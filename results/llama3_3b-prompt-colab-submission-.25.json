[
  {
    "id": 1,
    "response": "```python\ndef max_chain_length(lst, n):\n    def longest_common_prefix(strings):\n        prefix = strings[0]\n        for s in strings[1:]:\n            while not s.startswith(prefix):\n                prefix = prefix[:-1]\n        return prefix\n\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            prefix = longest_common_prefix([lst[i], lst[j]])\n            if len(prefix) > max_len:\n                max_len = len(prefix)\n    return max_len\n```"
  },
  {
    "id": 2,
    "response": "```python\ndef first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n```"
  },
  {
    "id": 3,
    "response": "```python\ndef get_ludic(n):\n    def is_perfect_square(x):\n        s = int(x**0.5)\n        return s*s == x\n\n    if n < 1:\n        return None\n    for i in range(1, n+1):\n        if is_perfect_square(i) and i == n or is_perfect_square(i) and i < n:\n            return i\n    return None\n```"
  },
  {
    "id": 4,
    "response": "```python\ndef reverse_words(s):\n    words = s.split()\n    reversed_words =''.join(reversed(words))\n    return reversed_words\n```"
  },
  {
    "id": 5,
    "response": "```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```"
  },
  {
    "id": 6,
    "response": "```python\nimport math\n\ndef radian_degree(n):\n    return n * (180 / math.pi)\n```"
  },
  {
    "id": 7,
    "response": "```python\nimport re\n\ndef find_literals(s, s2):\n    match = re.search(rf'(?<!\\w)({s2})(?!\\w)', s)\n    if match:\n        return match.start()\n    else:\n        return -1\n```"
  },
  {
    "id": 8,
    "response": "```python\ndef bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return n * bell_number(n-1)\n```"
  },
  {
    "id": 9,
    "response": "```python\ndef floor_min(a, b, c):\n    return min(a, b, c)\n```"
  },
  {
    "id": 10,
    "response": "```python\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```"
  },
  {
    "id": 11,
    "response": "```python\ndef max_of_nth(lst, n):\n    return max(column for column in zip(*lst) if n - 1 < len(column))\n```"
  },
  {
    "id": 12,
    "response": "```python\ndef merge(lst):\n    return [lst[0], lst[-1]]\n```"
  },
  {
    "id": 13,
    "response": "```python\ndef maximum_value(lst):\n    return max(lst)\n```"
  },
  {
    "id": 14,
    "response": "```python\ndef cummulative_sum(lst):\n    return [sum(lst[:i+1]) for i in range(len(lst))]\n```"
  },
  {
    "id": 15,
    "response": "```python\ndef average_tuple(tup):\n    return sum(tup) / len(tup)\n```"
  },
  {
    "id": 16,
    "response": "```python\ndef tuple_modulo(tup, tup2):\n    if len(tup)!= len(tup2):\n        raise ValueError(\"দুটি টুপলের দৈর্ঘ্য সমান হতে হবে\")\n    return tuple(a % b for a, b in zip(tup, tup2))\n```"
  },
  {
    "id": 17,
    "response": "```python\ndef min_jumps(n, n2, n3):\n    return (n3 - n) // n2 + 1\n```"
  },
  {
    "id": 18,
    "response": "```python\ndef div_list(lst, lst2):\n    return [i for i in lst if i % lst2[0] == 0]\n```"
  },
  {
    "id": 19,
    "response": "```python\ndef move_num(s):\n    return s[::-1]\n```"
  },
  {
    "id": 20,
    "response": "```python\ndef largest_subset(lst, n):\n    def is_divisible(a, b):\n        return a % b == 0\n\n    def backtrack(start, current_subset, current_sum):\n        if current_sum > n:\n            return\n        if current_sum == n:\n            return current_subset\n        max_subset = []\n        for i in range(start, len(lst)):\n            if is_divisible(lst[i], current_sum + lst[i]):\n                result = backtrack(i + 1, current_subset + [lst[i]], current_sum + lst[i])\n                if result:\n                    return result\n        return None\n\n    return backtrack(0, [], 0)\n```"
  },
  {
    "id": 21,
    "response": "```python\ndef increment_numerics(lst, n):\n    return [x + n for x in lst]\n```"
  },
  {
    "id": 22,
    "response": "```python\ndef get_median(lst, lst2):\n    \"\"\"\n    Returns the median of two sorted lists of the same length.\n\n    Args:\n        lst (list): The first list of numbers.\n        lst2 (list): The second list of numbers.\n\n    Returns:\n        float: The median of the combined list.\n    \"\"\"\n    # Combine the two lists into one\n    combined = lst + lst2\n    \n    # Sort the combined list\n    combined.sort()\n    \n    # Get the length of the combined list\n    n = len(combined)\n    \n    # If the length is odd, the median is the middle element\n    if n % 2!= 0:\n        return combined[n // 2]\n    # If the length is even, the median is the average of the two middle elements\n    else:\n        return (combined[n // 2 - 1] + combined[n // 2]) / 2\n```"
  },
  {
    "id": 23,
    "response": "```python\ndef nth_nums(lst, n):\n    return [i ** n for i in lst]\n```"
  },
  {
    "id": 24,
    "response": "```python\ndef is_upper(s):\n    return s == s.upper()\n```"
  },
  {
    "id": 25,
    "response": "```python\ndef swap_list(lst):\n    if len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
  },
  {
    "id": 26,
    "response": "```python\nimport math\n\ndef triangle_area(n):\n    return (n * (n - 1)) / 2\n```"
  },
  {
    "id": 27,
    "response": "```python\ndef find_First_Missing(lst, n, n2):\n    \"\"\"\n    This function finds the smallest missing number in a given list.\n    \n    Parameters:\n    lst (list): The input list of integers.\n    n (int): The end of the range of the list.\n    n2 (int): The end of the range of the list (not used in this implementation).\n    \n    Returns:\n    int: The smallest missing number in the list.\n    \"\"\"\n    i = 0\n    while i < len(lst):\n        if lst[i] > n:\n            return lst[i]\n        elif lst[i] in lst[i+1:]:\n            i += 1\n    return lst[i] + 1\n```"
  },
  {
    "id": 28,
    "response": "```python\ndef replace_spaces(s):\n    return s.replace(' ', '*')\n```"
  },
  {
    "id": 29,
    "response": "```python\ndef split(lst):\n    def is_digit(num):\n        return isinstance(num, int) and num >= 0\n\n    def is_letter(num):\n        return isinstance(num, int) and 0 <= num <= 9\n\n    def is_special(num):\n        return isinstance(num, int) and num > 9\n\n    def is_mixed(num):\n        return is_digit(num) or is_letter(num) or is_special(num)\n\n    return [num for num in lst if is_mixed(num)]\n```"
  },
  {
    "id": 30,
    "response": "```python\ndef get_adjacent_pairs(tup):\n    return [(tup[i], tup[(i+1) % len(tup)]) for i in range(len(tup))]\n```"
  },
  {
    "id": 31,
    "response": "```python\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'\\s+', '_', s).replace('_','')\n```"
  },
  {
    "id": 32,
    "response": "```python\ndef move_zero(lst):\n    return [x for x in lst if x!= 0]\n```"
  },
  {
    "id": 33,
    "response": "```python\ndef pair_OR_Sum(lst):\n    return [sum(x ^ y for x, y in zip(lst, lst[1:])) for _ in range(len(lst))]\n```"
  },
  {
    "id": 34,
    "response": "```python\ndef even_Power_Sum(n):\n    return sum(i**4 for i in range(2, n+1, 2))\n```"
  },
  {
    "id": 35,
    "response": "```python\ndef heapify(lst):\n    def heapify_helper(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[left] > lst[largest]:\n            largest = left\n\n        if right < n and lst[right] > lst[largest]:\n            largest = right\n\n        if largest!= i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify_helper(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify_helper(lst, n, i)\n\n    return lst\n```"
  },
  {
    "id": 36,
    "response": ""
  },
  {
    "id": 37,
    "response": "```python\ndef no_profit_noloss(n, n2):\n    if n >= n2:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 38,
    "response": "```python\ndef wind_chill(n, n2):\n    \"\"\"\n    Calculate the wind chill temperature.\n\n    The wind chill temperature is a measure of how cold it feels outside when wind is blowing.\n    It is calculated using the following formula:\n\n    T = 35.74 + 0.6215T + (35.75 * v^0.16) - (0.4275 * T * v^0.16)\n\n    Where:\n    T is the air temperature in Fahrenheit\n    v is the wind speed in miles per hour\n\n    Args:\n        n (float): The air temperature in Fahrenheit.\n        n2 (float): The wind speed in miles per hour.\n\n    Returns:\n        float: The wind chill temperature in Fahrenheit.\n    \"\"\"\n    return 35.74 + 0.6215 * n + (35.75 * n2 ** 0.16) - (0.4275 * n * n2 ** 0.16)\n```"
  },
  {
    "id": 39,
    "response": "```python\ndef sample_nam(lst):\n    return sum(len(name) for name in lst if name[0].lower() <='m')\n```"
  },
  {
    "id": 40,
    "response": "```python\ndef remove_parenthesis(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char == \"(\":\n            if temp:\n                result.append(temp)\n                temp = \"\"\n        elif char == \")\":\n            if temp:\n                temp = temp[:-1]\n        else:\n            temp += char\n    if temp:\n        result.append(temp)\n    return result\n```"
  },
  {
    "id": 41,
    "response": "```python\ndef is_nonagonal(n):\n    return n!= 6\n```"
  },
  {
    "id": 42,
    "response": "```python\ndef remove_similar_rows(matrix):\n    def get_row_hash(row):\n        return tuple(sorted(row))\n\n    unique_rows = set(get_row_hash(row) for row in matrix)\n    return [row for row in matrix if get_row_hash(row) in unique_rows]\n```"
  },
  {
    "id": 43,
    "response": "```python\ndef text_match_wordz_middle(text):\n    if 'z' in text and 'z' not in text[0] and 'z' not in text[-1]:\n        return text\n    else:\n        return None\n```"
  },
  {
    "id": 44,
    "response": "```python\ndef reverse_array_up_to_k(lst, k):\n    return lst[:k][::-1] + lst[k:][::-1]\n```"
  },
  {
    "id": 45,
    "response": "```python\ndef find_k_product(lst, k):\n    return lst[k-1] if k <= len(lst) else 1\n```"
  },
  {
    "id": 46,
    "response": "```python\ndef No_of_cubes(n, n2):\n    return n * n * n2\n```"
  },
  {
    "id": 47,
    "response": "```python\ndef split_upperstring(s):\n    return''.join(word for word in s.split() if word[0].isupper())\n```"
  },
  {
    "id": 48,
    "response": "```python\ndef exchange_elements(lst):\n    return [lst[i+1] if i!= len(lst) - 1 else lst[0] for i in range(len(lst) - 1)]\n```"
  },
  {
    "id": 49,
    "response": "```python\ndef sum_Range_list(lst, n, n2):\n    return sum(i for i in range(n, n2) if i in lst)\n```"
  },
  {
    "id": 50,
    "response": "```python\ndef are_Equal(lst, lst2, n, n2):\n    if len(lst)!= n or len(lst2)!= n2:\n        return False\n    for i in range(n):\n        if lst[i]!= lst2[i]:\n            return False\n    return True\n```"
  },
  {
    "id": 51,
    "response": "```python\ndef check_subset(tup, tup2):\n    return set(tup).issubset(tup2)\n```"
  },
  {
    "id": 52,
    "response": "```python\ndef matrix_to_list(matrix):\n    return [list(row) for row in matrix]\n```"
  },
  {
    "id": 53,
    "response": "```python\nfrom collections import defaultdict\n\ndef grouping_dictionary(lst):\n    result = defaultdict(list)\n    for key, value in lst:\n        result[value].append(key)\n    return dict(result)\n```"
  },
  {
    "id": 54,
    "response": "```python\ndef rectangle_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
  },
  {
    "id": 55,
    "response": "```python\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))\n```"
  },
  {
    "id": 56,
    "response": "```python\ndef find_min_sum(lst, lst2):\n    return min(sum(abs(a - b) for a, b in zip(lst, lst2)) for lst in [lst, lst2])\n```"
  },
  {
    "id": 57,
    "response": "```python\ndef first_Digit(n):\n    return int(str(abs(n))[-1])\n```"
  },
  {
    "id": 58,
    "response": "```python\ndef max_occurrences(lst):\n    return max(set(lst), lst.count(max(set(lst)))\n```"
  },
  {
    "id": 59,
    "response": "```python\ndef repeat(lst):\n    return [x for i, x in enumerate(lst) for _ in range(2)]\n```"
  },
  {
    "id": 60,
    "response": "```python\ndef find_Points(n, n2, n3, n4):\n    def intersect(r1, r2):\n        return set(r1) & set(r2)\n\n    def is_outside(r1, r2):\n        return not intersect(r1, r2)\n\n    def find_points(r1, r2):\n        return [x for x in r1 if is_outside(x, r2)]\n\n    return find_points(n, n2) + find_points(n3, n4)\n```"
  },
  {
    "id": 61,
    "response": "```python\ndef max_sum_of_three_consecutive(lst, n):\n    if len(lst) < 3:\n        return None\n    \n    max_sum = float('-inf')\n    for i in range(len(lst) - 2):\n        if lst[i] + lst[i+1] + lst[i+2] > max_sum:\n            max_sum = lst[i] + lst[i+1] + lst[i+2]\n    \n    return max_sum\n```"
  },
  {
    "id": 62,
    "response": "```python\ndef sorted_dict(dct):\n    return dict(sorted(dct.items()))\n```"
  },
  {
    "id": 63,
    "response": "```python\ndef find_max_val(n, n2, n3):\n    return max(n, n2, n3)\n```"
  },
  {
    "id": 64,
    "response": "```python\ndef average_Even(n):\n    even_numbers = [i for i in range(n) if i % 2 == 0]\n    return sum(even_numbers) / len(even_numbers) if even_numbers else 0\n```"
  },
  {
    "id": 65,
    "response": "```python\ndef move_last(lst):\n    return lst[-1:] + lst[:-1]\n```"
  },
  {
    "id": 66,
    "response": "```python\ndef count_char(s, s2):\n    return s.count(s2)\n```"
  },
  {
    "id": 67,
    "response": "```python\ndef Check_Vow(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)\n```"
  },
  {
    "id": 68,
    "response": "```python\ndef replace(s, s2):\n    return s.replace(' ', s2)\n```"
  },
  {
    "id": 69,
    "response": "```python\nimport re\n\ndef check_IP(ip):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return bool(re.match(pattern, ip))\n```"
  },
  {
    "id": 70,
    "response": "```python\ndef decreasing_trend(lst):\n    return lst == sorted(lst)[::-1] == lst\n```"
  },
  {
    "id": 71,
    "response": "```python\ndef set_Right_most_Unset_Bit(n):\n    return n | (n >> 31)\n```"
  },
  {
    "id": 72,
    "response": "```python\ndef max_of_three(a, b, c):\n    return max(a, b, c)\n```"
  },
  {
    "id": 73,
    "response": "```python\ndef convert(lst):\n    return sum(lst)\n```"
  },
  {
    "id": 74,
    "response": "```python\ndef remove_duplicate(s):\n    return ''.join([word for i, word in enumerate(s.split()) if s.split().count(word) == 1])\n```"
  },
  {
    "id": 75,
    "response": "```python\ndef sum_nums(n, n2, n3, n4):\n    if n <= n2 <= n3 <= n4:\n        return 20\n    else:\n        return n + n2 + n3 + n4\n```"
  },
  {
    "id": 76,
    "response": "```python\nimport re\n\ndef remove_extra_char(s):\n    return re.sub('[^a-zA-Z]', '', s)\n```"
  },
  {
    "id": 77,
    "response": "```python\ndef validity_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 78,
    "response": "```python\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 79,
    "response": "```python\ndef access_key(dct, n):\n    return dct.get(n)\n```"
  },
  {
    "id": 80,
    "response": "```python\ndef increasing_trend(lst):\n    return lst == sorted(lst)\n```"
  },
  {
    "id": 81,
    "response": "```python\ndef smallest_Divisor(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n```"
  },
  {
    "id": 82,
    "response": "```python\ndef mul_list(lst1, lst2):\n    return [a * b for a, b in zip(lst1, lst2)]\n```"
  },
  {
    "id": 83,
    "response": "```python\ndef sum_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if i * i + i * i == n:\n            return True\n    return False\n```"
  },
  {
    "id": 84,
    "response": "```python\ndef count_Char(s, s2):\n    return sum(s.count(c) for c in s2)\n```"
  },
  {
    "id": 85,
    "response": "```python\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n + 1) if is_prime(num))\n```"
  },
  {
    "id": 86,
    "response": "```python\ndef freq_element(tup):\n    return max(tup, key=tup.count)\n```"
  },
  {
    "id": 87,
    "response": "```python\ndef recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n```"
  },
  {
    "id": 88,
    "response": "```python\ndef len_complex(n):\n    return len(str(n))\n```"
  },
  {
    "id": 89,
    "response": "```python\ndef min_jumps(arr):\n    n = len(arr)\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and jumps[i] > jumps[j] + 1:\n                jumps[i] = jumps[j] + 1\n    return min(jumps)\n```"
  },
  {
    "id": 90,
    "response": "```python\ndef mul_consecutive_nums(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n```"
  },
  {
    "id": 91,
    "response": "```python\ndef group_element(lst):\n    if len(lst) < 2:\n        return lst\n    else:\n        return [lst[0]] + group_element(lst[1:])\n```"
  },
  {
    "id": 92,
    "response": "```python\ndef last_Two_Digits(n):\n    return str(n % 100)[-2:]\n```"
  },
  {
    "id": 93,
    "response": "```python\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +','', s)\n```"
  },
  {
    "id": 94,
    "response": "```python\ndef extract_unique(dct):\n    return {k: v for k, v in dct.items() if dct.count(v) == 1}\n```"
  },
  {
    "id": 95,
    "response": "```python\ndef check_greater(tup, tup2):\n    return tup[0] > tup2[0] and tup[1] > tup2[1]\n```"
  },
  {
    "id": 96,
    "response": "```python\ndef zip_list(lst, lst2):\n    return list(zip(lst, lst2))\n```"
  },
  {
    "id": 97,
    "response": "```python\ndef count_even(lst):\n    return len([i for i in lst if i % 2 == 0])\n```"
  },
  {
    "id": 98,
    "response": "```python\ndef sort_dict_item(dct):\n    return {k: v for k, v in sorted(dct.items())}\n```"
  },
  {
    "id": 99,
    "response": "```python\ndef min_Swaps(s, s2):\n    n = len(s)\n    m = len(s2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[n][m]\n```"
  },
  {
    "id": 100,
    "response": "```python\ndef count_range_in_list(lst, n, n2):\n    return sum(1 for i in lst if n <= i <= n2)\n```"
  },
  {
    "id": 101,
    "response": "```python\ndef equilibrium_index(lst):\n    \"\"\"\n    This function calculates the equilibrium index of a given list.\n    \n    The equilibrium index of a list is the index at which the sum of elements at lower index is equal to the sum of elements at higher index.\n    \n    Args:\n        lst (list): The input list.\n    \n    Returns:\n        int: The equilibrium index if it exists, -1 otherwise.\n    \"\"\"\n    \n    n = len(lst)\n    \n    # Calculate the total sum of the list\n    total_sum = sum(lst)\n    \n    # Initialize the left sum as 0\n    left_sum = 0\n    \n    # Iterate over the list\n    for i in range(n):\n        # If the left sum is equal to the total sum minus the left sum and the current element, return the current index\n        if left_sum == total_sum - left_sum - lst[i]:\n            return i\n        # Add the current element to the left sum\n        left_sum += lst[i]\n    \n    # If no equilibrium index is found, return -1\n    return -1\n```"
  },
  {
    "id": 102,
    "response": "```python\ndef removals(lst, n, n2):\n    return min(n2 - lst.count(n) for lst in lst if n in lst)\n```"
  },
  {
    "id": 103,
    "response": "```python\ndef is_key_present(dct, n):\n    return n in dct\n```"
  },
  {
    "id": 104,
    "response": "```python\ndef harmonic_sum(n):\n    return sum(1 / i for i in range(1, n + 1))\n```"
  },
  {
    "id": 105,
    "response": "```python\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))\n```"
  },
  {
    "id": 106,
    "response": "```python\ndef is_subset(lst, n, lst2, n2):\n    return set(lst).issubset(set(n))\n```"
  },
  {
    "id": 107,
    "response": "```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"
  },
  {
    "id": 108,
    "response": "```python\ndef string_to_list(s):\n    return list(s)\n```"
  },
  {
    "id": 109,
    "response": "```python\ndef get_unique(lst):\n    return tuple(set(lst))\n```"
  },
  {
    "id": 110,
    "response": "```python\ndef front_and_rear(tup):\n    return tup[0], tup[-1]\n```"
  },
  {
    "id": 111,
    "response": "```python\ndef product_Equal(n):\n    product = 1\n    for char in str(n):\n        product *= ord(char)\n    return product == n\n```"
  },
  {
    "id": 112,
    "response": "```python\ndef remove_duplicate(lst):\n    return list(set(lst))\n```"
  },
  {
    "id": 113,
    "response": "```python\ndef check_valid(tup):\n    return all(isinstance(x, int) and 0 <= x <= 100 for x in tup)\n```"
  },
  {
    "id": 114,
    "response": "```python\ndef count_Fac(n):\n    def prime_factors(n):\n        i = 2\n        factors = {}\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors[i] = factors.get(i, 0) + 1\n        if n > 1:\n            factors[n] = factors.get(n, 0) + 1\n        return factors\n\n    factors = prime_factors(n)\n    count = 1\n    for power in factors.values():\n        count *= (power + 1)\n    return count\n```"
  },
  {
    "id": 115,
    "response": "```python\ndef str_to_tuple(s):\n    return tuple(int(i) for i in s)\n```"
  },
  {
    "id": 116,
    "response": "```python\ndef rombus_perimeter(n):\n    return 4 * n\n```"
  },
  {
    "id": 117,
    "response": "```python\ndef sd_calc(lst):\n    n = len(lst)\n    mean = sum(lst) / n\n    variance = sum((x - mean) ** 2 for x in lst) / n\n    standard_deviation = variance ** 0.5\n    return standard_deviation\n```"
  },
  {
    "id": 118,
    "response": "```python\ndef alternate_elements(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]\n```"
  },
  {
    "id": 119,
    "response": "```python\ndef text_match(text):\n    return 'a' in text and (text[-1] == 'a' or text[-2] == 'b')\n```"
  },
  {
    "id": 120,
    "response": "```python\ndef add_dict_to_tuple(tup, dct):\n    return tup + (dict(dct))\n```"
  },
  {
    "id": 121,
    "response": "```python\ndef maxAverageOfPath(lst, n):\n    def maxAveragePathHelper(i, j, visited, n, m):\n        if i < 0 or j < 0 or i >= n or j >= m or visited[i][j] or lst[i][j] == -1:\n            return -float('inf')\n        \n        if i == n - 1 and j == m - 1:\n            return lst[i][j]\n        \n        visited[i][j] = 1\n        max_avg = max(maxAveragePathHelper(i + 1, j, visited, n, m), \n                     maxAveragePathHelper(i - 1, j, visited, n, m), \n                     maxAveragePathHelper(i, j + 1, visited, n, m), \n                     maxAveragePathHelper(i, j - 1, visited, n, m))\n        visited[i][j] = 0\n        return max_avg\n    \n    return maxAveragePathHelper(0, 0, [[0]*m for _ in range(n)], n, m)\n```"
  },
  {
    "id": 122,
    "response": "```python\ndef filter_data(dct, n, n2):\n    filtered_data = {}\n    for key, value in dct.items():\n        if n <= value <= n2:\n            filtered_data[key] = value\n    return filtered_data\n```"
  },
  {
    "id": 123,
    "response": "```python\ndef count_same_pair(lst, lst2):\n    return sum(1 for x, y in zip(lst, lst2) if x == y)\n```"
  },
  {
    "id": 124,
    "response": "```python\ndef power_base_sum(n, power):\n    \"\"\"\n    This function calculates the sum of all digits of a number raised to a given power.\n\n    Args:\n        n (int): The base number.\n        power (int): The power to which each digit of the base number should be raised.\n\n    Returns:\n        int: The sum of all digits of the base number raised to the given power.\n    \"\"\"\n    return sum(int(digit) ** power for digit in str(n))\n```"
  },
  {
    "id": 125,
    "response": "```python\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"', s)\n```"
  },
  {
    "id": 126,
    "response": "```python\ndef multiply_elements(tup):\n    return tup[0] * tup[1]\n```"
  },
  {
    "id": 127,
    "response": "```python\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```"
  },
  {
    "id": 128,
    "response": ""
  },
  {
    "id": 129,
    "response": "```python\ndef add_list(lst, lst2):\n    return list(map(sum, zip(lst, lst2)))\n```"
  },
  {
    "id": 130,
    "response": "```python\ndef consecutive_duplicates(lst):\n    return [x for i, x in enumerate(lst) if i == 0 or x!= lst[i-1]]\n```"
  },
  {
    "id": 131,
    "response": "```python\nimport math\n\ndef lateralsurface_cone(n, n2):\n    return (math.pi * n2 * (n2 + math.sqrt(n2**2 + n**2)))\n```"
  },
  {
    "id": 132,
    "response": "```python\ndef replace_specialchar(s):\n    s = s.replace(' ', '')\n    s = s.replace(',', '')\n    s = s.replace('.', '')\n    return s\n```"
  },
  {
    "id": 133,
    "response": "```python\ndef find_first_occurrence(lst, n):\n    try:\n        return lst.index(n)\n    except ValueError:\n        return -1\n```"
  },
  {
    "id": 134,
    "response": "```python\ndef sum_Of_Subarray_Prod(lst):\n    n = len(lst)\n    total = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= lst[j]\n            total += product\n    return total\n```"
  },
  {
    "id": 135,
    "response": "```python\ndef toggle_middle_bits(n):\n    return n ^ ((n >> 1) & 0xFFFFFFFF) | ((n & 1) << 31)\n```"
  },
  {
    "id": 136,
    "response": "```python\ndef left_insertion(lst, n):\n    for i in range(len(lst)):\n        if lst[i] >= n:\n            return i\n    return len(lst)\n```"
  },
  {
    "id": 137,
    "response": "```python\nimport re\n\ndef check_str(s):\n    return bool(re.match('^[a-zA-Z]+$', s))\n```"
  },
  {
    "id": 138,
    "response": "```python\ndef geometric_sum(n):\n    if n <= 0:\n        return 0\n    a = 1\n    r = 1\n    sum = 0\n    for _ in range(n):\n        sum += a\n        a *= r\n    return sum\n```"
  },
  {
    "id": 139,
    "response": "```python\ndef find_index(n):\n    i = 1\n    while True:\n        triangle = sum(range(1, i+1))\n        if triangle >= n:\n            return i\n        i += 1\n```"
  },
  {
    "id": 140,
    "response": "```python\ndef tuple_to_dict(tup):\n    return dict(zip(tup, tup))\n```"
  },
  {
    "id": 141,
    "response": "```python\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```"
  },
  {
    "id": 142,
    "response": "```python\nimport math\n\ndef area_tetrahedron(n):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron.\n\n    Args:\n        n (float): The length of the edge of the tetrahedron.\n\n    Returns:\n        float: The surface area of the tetrahedron.\n    \"\"\"\n    return (math.sqrt(3) / 4) * (n ** 2)\n```"
  },
  {
    "id": 143,
    "response": "```python\ndef rotate_right(lst, n, n2):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n```"
  },
  {
    "id": 144,
    "response": "```python\ndef check_none(tup):\n    return tup[0] == 0 or tup[1] == 0\n```"
  },
  {
    "id": 145,
    "response": "```python\ndef divisible_by_digits(n, n2):\n    def is_divisible(num):\n        for digit in str(num):\n            if num % int(digit)!= 0:\n                return False\n        return True\n\n    return sum(1 for num in range(n, n2+1) if is_divisible(num))\n```"
  },
  {
    "id": 146,
    "response": "```python\ndef sector_area(n, n2):\n    \"\"\"\n    Calculate the area of a sector of a circle.\n\n    Parameters:\n    n (float): The number of degrees of the sector.\n    n2 (float): The radius of the circle.\n\n    Returns:\n    float: The area of the sector.\n    \"\"\"\n    import math\n    return (n / 360) * math.pi * (n2 ** 2)\n```"
  },
  {
    "id": 147,
    "response": "```python\ndef lcs_of_three(s, s2, s3):\n    m, n, p = len(s), len(s2), len(s3)\n    dp = [[[0] * (p + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if s[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[m][n][p]\n```"
  },
  {
    "id": 148,
    "response": "```python\ndef capital_words_spaces(s):\n    return''.join(word if not word[0].isupper() else'' + word for word in s.split())\n```"
  },
  {
    "id": 149,
    "response": "```python\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n```"
  },
  {
    "id": 150,
    "response": "```python\ndef add_tuple(lst, tup):\n    return lst + tup\n```"
  },
  {
    "id": 151,
    "response": "```python\ndef check_min_heap(lst, n):\n    def is_min_heap(i):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        smallest = i\n        if left < n and lst[left] < lst[smallest]:\n            smallest = left\n        if right < n and lst[right] < lst[smallest]:\n            smallest = right\n        return smallest == i\n\n    for i in range(n // 2 - 1, -1, -1):\n        if not is_min_heap(i):\n            return False\n    return True\n```"
  },
  {
    "id": 152,
    "response": "```python\ndef jacobsthal_num(n):\n    if n <= 0:\n        return \"প্রত্যাশিত মান হল ধনাত্মক পূর্ণসংখ্যা নয়\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, (a + b) % 10\n        return b\n```"
  },
  {
    "id": 153,
    "response": "```python\ndef min_k(lst, k):\n    return min(lst[:k])\n```"
  },
  {
    "id": 154,
    "response": "```python\ndef extract_index_list(lst, lst2, lst3):\n    return [i for i, (x, y, z) in enumerate(zip(lst, lst2, lst3) if x == y == z]\n```"
  },
  {
    "id": 155,
    "response": "```python\ndef second_smallest(lst):\n    if len(lst) < 2:\n        raise ValueError(\"তালিকাটি অবশ্যই কমপক্ষে দুটি সংখ্যা থাকতে হবে\")\n    return sorted(lst)[1]\n```"
  },
  {
    "id": 156,
    "response": "```python\ndef text_match_zero_one(text):\n    return any(char in text for char in ['0', '1']) and any(char in text for char in ['b', 'B'])\n```"
  },
  {
    "id": 157,
    "response": "```python\ndef count_reverse_pairs(lst):\n    \"\"\"\n    Returns the number of pairs of strings in the input list where the second string is the reverse of the first string.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count\n```"
  },
  {
    "id": 158,
    "response": "```python\ndef unique_sublists(lst):\n    return len(set(tuple(sorted(sublist)) for sublist in lst))\n```"
  },
  {
    "id": 159,
    "response": "```python\ndef is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n```"
  },
  {
    "id": 160,
    "response": "```python\ndef unique_element(lst, n):\n    return len(lst) == len(set(lst)) and len(lst) == n\n```"
  },
  {
    "id": 161,
    "response": "```python\nimport math\n\ndef arc_length(n, n2):\n    \"\"\"\n    Calculate the arc length of a sector of a circle.\n\n    Parameters:\n    n (float): The number of degrees of the sector.\n    n2 (float): The radius of the circle.\n\n    Returns:\n    float: The arc length of the sector.\n    \"\"\"\n    return (n / 360) * 2 * math.pi * n2\n```"
  },
  {
    "id": 162,
    "response": "```python\ndef check_month_number(n):\n    month_days = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    return month_days.get(n, 0) >= 30\n```"
  },
  {
    "id": 163,
    "response": "```python\ndef find_min_diff(tup):\n    return min(tup[i] - tup[j] for i in range(len(tup)) for j in range(i+1, len(tup)))\n```"
  },
  {
    "id": 164,
    "response": "```python\ndef number_ctr(s):\n    return sum(int(c) for c in s if c.isdigit())\n```"
  },
  {
    "id": 165,
    "response": "```python\ndef is_polite(n):\n    \"\"\"\n    Returns True if the given number is polite, False otherwise.\n    \n    A number is polite if the sum of its proper divisors is equal to the number itself.\n    \"\"\"\n    def sum_of_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n    \n    return sum_of_divisors(n) == n\n```"
  },
  {
    "id": 166,
    "response": "```python\ndef pair_wise(lst):\n    return [lst[i:i+2] for i in range(0, len(lst), 2)]\n```"
  },
  {
    "id": 167,
    "response": "```python\ndef get_Pairs_Count(lst, n, n2):\n    return len([i for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] + lst[j] == n])\n```"
  },
  {
    "id": 168,
    "response": "```python\ndef check_Odd_Parity(n):\n    return n % 2!= 0\n```"
  },
  {
    "id": 169,
    "response": "```python\ndef diff(lst, lst2):\n    return [x for x in set(lst) if x not in lst2]\n```"
  },
  {
    "id": 170,
    "response": "```python\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, n+1) if i % 2!= 0)\n```"
  },
  {
    "id": 171,
    "response": "```python\ndef check_expression(s):\n    \"\"\"\n    Checks if the given string is balanced.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        bool: True if the string is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n\n    for char in s:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n\n    return not stack\n```"
  },
  {
    "id": 172,
    "response": "```python\ndef remove_length(s, n):\n    return''.join([word for word in s.split() if len(word)!= n])\n```"
  },
  {
    "id": 173,
    "response": "```python\ndef occurance_substring(s, s2):\n    \"\"\"\n    Returns the occurrences of s2 in s and their positions.\n    \"\"\"\n    indices = []\n    start = 0\n    while True:\n        pos = s.find(s2, start)\n        if pos == -1:\n            break\n        indices.append(pos)\n        start = pos + 1\n    return indices\n```"
  },
  {
    "id": 174,
    "response": "```python\nimport re\n\ndef check_email(s):\n    pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n    return bool(re.match(pattern, s))\n```"
  },
  {
    "id": 175,
    "response": "```python\ndef odd_position(lst):\n    return [i for i, x in enumerate(lst) if i % 2!= 0 and x % 2 == 1]\n```"
  },
  {
    "id": 176,
    "response": "```python\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)\n```"
  },
  {
    "id": 177,
    "response": "```python\ndef find_Sum(lst, n):\n    return sum(i for i in lst if i!= n)\n```"
  },
  {
    "id": 178,
    "response": "```python\ndef pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item == result[-1]:\n            result.append(item)\n        else:\n            result.append([item])\n    return result\n```"
  },
  {
    "id": 179,
    "response": "```python\ndef unique_sublists(lst):\n    return len(set(tuple(sublist) for sublist in lst))\n```"
  },
  {
    "id": 180,
    "response": "```python\ndef find_combinations(lst):\n    return [sum(tup) for tup in zip(*lst)]\n```"
  },
  {
    "id": 181,
    "response": "```python\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```"
  },
  {
    "id": 182,
    "response": "```python\ndef Odd_Length_Sum(lst):\n    return sum(i for i in lst if len(i) % 2!= 0)\n```"
  },
  {
    "id": 183,
    "response": "```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return round(h, 2), round(s, 2), round(v, 2)\n```"
  },
  {
    "id": 184,
    "response": "```python\ndef mul_even_odd(lst):\n    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2!= 0]\n    return even[0] * odd[0] if len(even) > 0 and len(odd) > 0 else None\n```"
  },
  {
    "id": 185,
    "response": "```python\ndef tuple_str_int(s):\n    return tuple(map(int, s.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))\n```"
  },
  {
    "id": 186,
    "response": "```python\ndef right_insertion(lst, n):\n    for i in range(len(lst) - 1, -1, -1):\n        if lst[i] >= n:\n            return i\n    return 0\n```"
  },
  {
    "id": 187,
    "response": "```python\ndef text_match_three(s):\n    return s.find('a')!= -1 and s.find('b', s.find('a') + 1)!= -1 and s.find('b', s.find('a') + 2)!= -1\n```"
  },
  {
    "id": 188,
    "response": "```python\ndef new_tuple(lst, s):\n    return tuple(s) + tuple(lst)\n```"
  },
  {
    "id": 189,
    "response": "```python\nimport math\n\ndef perimeter_polygon(n, side_length):\n    \"\"\"\n    Calculate the perimeter of a regular polygon.\n\n    Args:\n        n (int): The number of sides of the polygon.\n        side_length (float): The length of each side of the polygon.\n\n    Returns:\n        float: The perimeter of the polygon.\n    \"\"\"\n    return n * side_length\n```"
  },
  {
    "id": 190,
    "response": "```python\ndef even_position(lst):\n    return [i for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 0]\n```"
  },
  {
    "id": 191,
    "response": "```python\ndef remove_nested(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result\n```"
  },
  {
    "id": 192,
    "response": "```python\ndef count_list(lst):\n    return len(lst)\n```"
  },
  {
    "id": 193,
    "response": "```python\ndef last(lst, n, n2):\n    return lst[-n2]\n```"
  },
  {
    "id": 194,
    "response": "```python\ndef text_starta_endb(text):\n    if text.endswith('b') and 'a' in text[:-1]:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 195,
    "response": "```python\ndef cheap_items(lst, n):\n    return [item for item in lst if item <= n]\n```"
  },
  {
    "id": 196,
    "response": "```python\ndef return_sum(dct):\n    return sum(dct.values())\n```"
  },
  {
    "id": 197,
    "response": "```python\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)\n```"
  },
  {
    "id": 198,
    "response": "```python\ndef sum_array(lst):\n    return sum(lst)\n```"
  },
  {
    "id": 199,
    "response": "```python\ndef left_rotate(n, n2):\n    return n2 * 10**(len(str(n)) - len(str(n2))) + n\n```"
  },
  {
    "id": 200,
    "response": "```python\ndef remove_all_spaces(s):\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 201,
    "response": "```python\ndef test_three_equal(n, n2, n3):\n    return sum(1 for _ in (n, n2, n3) if str(n) == str(n2) == str(n3))\n```"
  },
  {
    "id": 202,
    "response": "```python\ndef count_Rotation(lst, n):\n    return len(lst) - len(lst[n:]) - len(lst[:n])\n```"
  },
  {
    "id": 203,
    "response": "```python\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    sqrt = int(n ** 0.5)\n    return sqrt * sqrt == n\n```"
  },
  {
    "id": 204,
    "response": "```python\ndef is_product_even(lst, n):\n    return all(x % 2 == 0 for x in lst) and n % 2 == 0\n```"
  },
  {
    "id": 205,
    "response": "```python\ndef max_sum_list(lst):\n    return max(sum(lst), lst)\n```"
  },
  {
    "id": 206,
    "response": "```python\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```"
  },
  {
    "id": 207,
    "response": "```python\ndef first_odd(lst):\n    for num in lst:\n        if num % 2!= 0:\n            return num\n    return None\n```"
  },
  {
    "id": 208,
    "response": "```python\ndef check_K(tup, n):\n    return n in tup\n```"
  },
  {
    "id": 209,
    "response": "```python\ndef check_smaller(tup1, tup2):\n    return all(tup1[i] < tup2[i] for i in range(len(tup1)))\n```"
  },
  {
    "id": 210,
    "response": "```python\ndef count_variable(*args):\n    return args.count(args[0])\n```"
  },
  {
    "id": 211,
    "response": "```python\ndef check_identical(list1, list2):\n    return list1 == list2\n```"
  },
  {
    "id": 212,
    "response": "```python\ndef road_rd(s):\n    return s.replace('road', 'rd')\n```"
  },
  {
    "id": 213,
    "response": "```python\ndef string_length(s):\n    return len(s)\n```"
  },
  {
    "id": 214,
    "response": "```python\ndef rombus_area(n, n2):\n    return n * n2\n```"
  },
  {
    "id": 215,
    "response": "```python\ndef sort_by_dnf(lst):\n    return sorted(lst, key=lambda x: (x % 2, x // 2))\n```"
  },
  {
    "id": 216,
    "response": "```python\ndef clear_tuple(tup):\n    return tuple()\n```"
  },
  {
    "id": 217,
    "response": "```python\ndef div_of_nums(lst, m, n):\n    return [num for num in lst if num % m == 0 and num % n == 0]\n```"
  },
  {
    "id": 218,
    "response": "```python\ndef lower_ctr(s):\n    return sum(1 for c in s if c.islower())\n```"
  },
  {
    "id": 219,
    "response": "```python\ndef count_duplic(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return {num: count for num, count in freq.items() if count > 1}\n```"
  },
  {
    "id": 220,
    "response": "```python\ndef check_monthnum_number(n):\n    month_days = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    return month_days.get(n, 0) == 28\n```"
  },
  {
    "id": 221,
    "response": "```python\ndef merge_dictionaries(dct, dct2):\n    return {**dct, **dct2}\n```"
  },
  {
    "id": 222,
    "response": "```python\ndef pass_validity(password):\n    return len(password) >= 8 and any(char.isupper() for char in password) and any(char.isdigit() for char in password) and any(char.islower() for char in password)\n```"
  },
  {
    "id": 223,
    "response": "```python\nimport re\n\ndef check_substring(s, s2):\n    return bool(re.search(s2, s))\n```"
  },
  {
    "id": 224,
    "response": "```python\ndef remove_even(lst):\n    return [x for x in lst if x % 2!= 0]\n```"
  },
  {
    "id": 225,
    "response": "```python\ndef access_elements(lst, lst2, index):\n    \"\"\"\n    Accesses multiple elements from two lists at a specified index.\n\n    Args:\n        lst (list): The first list.\n        lst2 (list): The second list.\n        index (int): The index at which to access elements.\n\n    Returns:\n        tuple: A tuple containing the elements at the specified index from both lists.\n    \"\"\"\n    return (lst[index], lst2[index])\n```"
  },
  {
    "id": 226,
    "response": ""
  },
  {
    "id": 227,
    "response": "```python\ndef sum_column(lst, n):\n    return sum(lst[n])\n```"
  },
  {
    "id": 228,
    "response": "```python\ndef count_alpha_dig_spl(s):\n    alpha_count = sum(1 for c in s if c.isalpha())\n    dig_count = sum(1 for c in s if c.isdigit())\n    spl_count = sum(1 for c in s if c in \"!@#$%^&*()_+-={}:<>?,./;[]\\\\|\")\n    return alpha_count, dig_count, spl_count\n```"
  },
  {
    "id": 229,
    "response": "```python\ndef second_frequent(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    return sorted_freq[1][0]\n```"
  },
  {
    "id": 230,
    "response": "```python\ndef round_up(n, n2):\n    return (n + n2 - 1) // n2 * n2\n```"
  },
  {
    "id": 231,
    "response": "```python\ndef count_Pairs(lst, n):\n    return len([i for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] == lst[j]])\n```"
  },
  {
    "id": 232,
    "response": "```python\nimport re\n\ndef extract_max(s):\n    return max(map(int, re.findall(r'\\d+', s)))\n```"
  },
  {
    "id": 233,
    "response": "```python\ndef get_key(dct, key):\n    return dct.get(key)\n```"
  },
  {
    "id": 234,
    "response": "```python\ndef generate_matrix(n):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = 2 ** (i + j)\n    return matrix\n```"
  },
  {
    "id": 235,
    "response": "```python\ndef slope(n, n2, n3, n4):\n    \"\"\"\n    Calculate the slope of a line given four points (n, n2), (n3, n4), (n5, n6), (n7, n8).\n\n    Args:\n        n (float): x-coordinate of the first point\n        n2 (float): y-coordinate of the first point\n        n3 (float): x-coordinate of the second point\n        n4 (float): y-coordinate of the second point\n\n    Returns:\n        float: The slope of the line\n    \"\"\"\n    if n3 - n == 0:\n        raise ValueError(\"Vertical line\")\n    return (n4 - n2) / (n3 - n)\n```"
  },
  {
    "id": 236,
    "response": "```python\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum = max(lst[i], current_sum + lst[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
  },
  {
    "id": 237,
    "response": "```python\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n+1))\n```"
  },
  {
    "id": 238,
    "response": ""
  },
  {
    "id": 239,
    "response": "```python\ndef sort_tuple(lst):\n    return tuple(sorted(lst))\n```"
  },
  {
    "id": 240,
    "response": "```python\ndef Check_Solution(n, n2, n3):\n    def check(n1, n2, n3):\n        return n1 + n2 == n3 and n1 - n2!= n3\n\n    return check(n, n2, n3)\n```"
  },
  {
    "id": 241,
    "response": "```python\ndef get_inv_count(lst):\n    return sum(1 for i, x in enumerate(lst) if x!= i + 1)\n```"
  },
  {
    "id": 242,
    "response": "```python\ndef get_odd_occurence(lst, n):\n    return sum(1 for i in lst if i % n == 0) % 2\n```"
  },
  {
    "id": 243,
    "response": "```python\ndef nth_super_ugly_number(n, lst):\n    def is_ugly(num):\n        for p in [2, 3, 5]:\n            while num % p == 0:\n                num //= p\n        return num == 1\n\n    def next_ugly():\n        i = 0\n        while True:\n            yield lst[i]\n            i += 1\n            for p in [2, 3, 5]:\n                if lst[i] % p == 0:\n                    break\n        i += 1\n\n    ugly = next_ugly()\n    for _ in range(n - 1):\n        next(ugly)\n\n    return next(ugly)\n```"
  },
  {
    "id": 244,
    "response": "```python\ndef get_nth_element(arr, k):\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k - 1]\n```"
  },
  {
    "id": 245,
    "response": "```python\ndef find_Digits(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    count = 0\n    for i in range(1, n+1):\n        count += factorial(i)\n    return count\n```"
  },
  {
    "id": 246,
    "response": ""
  },
  {
    "id": 247,
    "response": "```python\ndef lcopy(lst):\n    return lst[:]\n```"
  },
  {
    "id": 248,
    "response": "```python\ndef area_trapezium(n, n2, n3):\n    return 0.5 * (n + n2) * n3\n```"
  },
  {
    "id": 249,
    "response": "```python\ndef sum_divisors(n):\n    return sum(int(digit) for digit in str(n) if int(digit)!= 0)\n```"
  },
  {
    "id": 250,
    "response": "```python\ndef is_triangle_exists(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n```"
  },
  {
    "id": 251,
    "response": "```python\ndef Sum_of_Inverse_Divisors(n, n2):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def sum_of_inverse_divisors(num):\n        sum = 0\n        for i in range(1, num + 1):\n            if gcd(i, num) == 1:\n                sum += 1 / i\n        return sum\n\n    return sum_of_inverse_divisors(n) + sum_of_inverse_divisors(n2)\n```"
  },
  {
    "id": 252,
    "response": "```python\ndef remove_negs(lst):\n    return [i for i in lst if i >= 0]\n```"
  },
  {
    "id": 253,
    "response": "```python\ndef sum_of_odd_factors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2!= 0:\n                sum += i\n    return sum\n```"
  },
  {
    "id": 254,
    "response": "```python\ndef raw_heap(lst):\n    def heapify(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[left] > lst[largest]:\n            largest = left\n\n        if right < n and lst[right] > lst[largest]:\n            largest = right\n\n        if largest!= i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n\n    return lst\n```"
  },
  {
    "id": 255,
    "response": "```python\ndef check_Even_Parity(n):\n    return n % 2 == 0\n```"
  },
  {
    "id": 256,
    "response": "```python\ndef find_min_swaps(lst, n):\n    swaps = 0\n    for i in range(len(lst)):\n        if lst[i]!= i + 1:\n            k = i\n            while k < len(lst) and lst[k]!= i + 1:\n                k += 1\n            if k < len(lst):\n                swaps += k - i\n    return swaps\n```"
  },
  {
    "id": 257,
    "response": "```python\ndef listify_list(lst):\n    return lst\n```"
  },
  {
    "id": 258,
    "response": "```python\ndef count_list(lst):\n    return [len(i) ** 2 for i in lst]\n```"
  },
  {
    "id": 259,
    "response": "```python\ndef sub_lists(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            result.append(lst[i:j+1])\n    return result\n```"
  },
  {
    "id": 260,
    "response": "```python\ndef check_alphanumeric(s):\n    return s and s[-1].isalnum()\n```"
  },
  {
    "id": 261,
    "response": "```python\nanagram_lambda = lambda lst, s: [i for i in lst if sorted(i) == sorted(s)]\n```"
  },
  {
    "id": 262,
    "response": "```python\ndef n_common_words(s, n):\n    words = s.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    max_count = max(word_count.values())\n    return [word for word, count in word_count.items() if count == max_count]\n```"
  },
  {
    "id": 263,
    "response": "```python\ndef find_longest_conseq_subseq(lst, n):\n    def is_conseq_subseq(subseq):\n        return all(subseq[i] + 1 == subseq[i+1] for i in range(len(subseq) - 1))\n\n    max_len = 0\n    max_subseq = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            subseq = lst[i:j]\n            if is_conseq_subseq(subseq) and len(subseq) > max_len:\n                max_len = len(subseq)\n                max_subseq = subseq\n    return max_subseq\n```"
  },
  {
    "id": 264,
    "response": "```python\npalindrome_lambda = lambda lst: list(filter(lambda x: x == x[::-1], lst))\n```"
  },
  {
    "id": 265,
    "response": "```python\ndef ntimes_list(lst, n):\n    return [lst[i % len(lst)] for i in range(n)]\n```"
  },
  {
    "id": 266,
    "response": "```python\ndef check_monthnumb(s):\n    month_days = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    return month_days.get(s, 'প্রদত্ত মাসের নাম সঠিক নয়') in [31]\n```"
  },
  {
    "id": 267,
    "response": "```python\ndef min_Num(lst, n):\n    return min(lst) + n\n```"
  },
  {
    "id": 268,
    "response": "```python\ndef length_of_last_word(s):\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])\n```"
  },
  {
    "id": 269,
    "response": "```python\ndef remove_list_range(lst, n, n2):\n    return [i for i in lst if n <= i <= n2]\n```"
  },
  {
    "id": 270,
    "response": "```python\ndef sum_positive_numbers(lst):\n    return sum(filter(lambda x: x > 0, lst))\n```"
  },
  {
    "id": 271,
    "response": "```python\ndef are_rotations(s, s2):\n    if len(s)!= len(s2):\n        return False\n    return s in s2 + s2\n```"
  },
  {
    "id": 272,
    "response": "```python\ndef check_subset(lst, lst2):\n    return set(lst).issubset(set(lst2))\n```"
  },
  {
    "id": 273,
    "response": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return \"ক্রমটির পরিমাণ অবশ্যই ধনাত্মক পূর্ণসংখ্যা হতে হবে\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n```"
  },
  {
    "id": 274,
    "response": "```python\ndef check_Concat(s, s2):\n    return s == s2\n```"
  },
  {
    "id": 275,
    "response": "```python\ndef min_difference(lst):\n    return min(abs(a - b) for a, b in zip(lst, lst[1:]))\n```"
  },
  {
    "id": 276,
    "response": "```python\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return a * b // gcd(a, b)\n```"
  },
  {
    "id": 277,
    "response": "```python\ndef sort_String(s):\n    return ''.join(sorted(s))\n```"
  },
  {
    "id": 278,
    "response": "```python\ndef check_tuples(tup, lst):\n    return len(tup) == len(lst)\n```"
  },
  {
    "id": 279,
    "response": "```python\nimport re\n\ndef text_match(s):\n    pattern = r'^.*a.*b$'\n    return bool(re.match(pattern, s))\n```"
  },
  {
    "id": 280,
    "response": "```python\ndef Check_Solution(n, n2, n3):\n    def is_perfect_square(num):\n        root = int(num ** 0.5)\n        return root * root == num\n\n    count = 0\n    for i in range(1, n2 + 1):\n        for j in range(i, n3 + 1):\n            if is_perfect_square(i * i + j * j):\n                count += 1\n    return count\n```"
  },
  {
    "id": 281,
    "response": "```python\ndef sum_even_odd(lst):\n    even_sum = sum(num for num in lst if num % 2 == 0)\n    odd_sum = sum(num for num in lst if num % 2!= 0)\n    return even_sum, odd_sum\n```"
  },
  {
    "id": 282,
    "response": "```python\ndef parallelogram_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
  },
  {
    "id": 283,
    "response": "```python\ndef div_of_nums(lst, m, n):\n    return [i for i in lst if i % m == 0 and i % n == 0]\n```"
  },
  {
    "id": 284,
    "response": "```python\ndef all_Bits_Set_In_The_Given_Range(n, n2, n3):\n    def check_bits(num):\n        return bin(num)[2:].count('1') == n3 - n2 + 1\n\n    return all(check_bits(i) for i in range(n2, n3 + 1))\n```"
  },
  {
    "id": 285,
    "response": "```python\ndef is_isomorphic(s, s2):\n    if len(s)!= len(s2):\n        return False\n    mapping = {}\n    for c1, c2 in zip(s, s2):\n        if c1 in mapping and mapping[c1]!= c2:\n            return False\n        if c1 not in mapping and c2 in mapping.values():\n            return False\n        mapping[c1] = c2\n    return True\n```"
  },
  {
    "id": 286,
    "response": "```python\ndef sum_num(tup):\n    return sum(tup) / len(tup)\n```"
  },
  {
    "id": 287,
    "response": "```python\ndef is_odd(n):\n    return n % 2!= 0\n```"
  },
  {
    "id": 288,
    "response": "```python\ndef substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n```"
  },
  {
    "id": 289,
    "response": "```python\ndef reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]\n```"
  },
  {
    "id": 290,
    "response": "```python\ndef find_extra(lst, lst2):\n    return [i for i in lst if i not in lst2]\n```"
  },
  {
    "id": 291,
    "response": "```python\ndef same_length(n, n2):\n    return len(str(n)) == len(str(n2))\n```"
  },
  {
    "id": 292,
    "response": "```python\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 293,
    "response": "```python\ndef extract(lst):\n    return lst[-1]\n```"
  },
  {
    "id": 294,
    "response": "```python\ndef float_to_tuple(s):\n    return tuple(map(float, s.split()))\n```"
  },
  {
    "id": 295,
    "response": "```python\ndef max_sum_subseq(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            for k in range(i, j):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j])\n    return dp[0][n - 1]\n```"
  },
  {
    "id": 296,
    "response": "```python\ndef sort_list_last(lst):\n    return lst[::-1]\n```"
  },
  {
    "id": 297,
    "response": "```python\ndef is_word_present(s, s2):\n    return s2.lower() in s.lower()\n```"
  },
  {
    "id": 298,
    "response": "```python\ndef extract_elements(lst, n):\n    return lst[:n]\n```"
  },
  {
    "id": 299,
    "response": "```python\ndef check(lst, n):\n    return all(x % n == 0 for x in lst)\n```"
  },
  {
    "id": 300,
    "response": "```python\ndef match_num(s, num):\n    if len(s)!= num:\n        raise ValueError(\"String length does not match the given number\")\n    return s\n```"
  },
  {
    "id": 301,
    "response": "```python\ndef num_comm_div(n, n2):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return gcd(n, n2)\n```"
  },
  {
    "id": 302,
    "response": "```python\ndef find(n, n2):\n    return n % n2\n```"
  },
  {
    "id": 303,
    "response": "```python\ndef add_consecutive_nums(lst):\n    return sum(lst)\n```"
  },
  {
    "id": 304,
    "response": "```python\ndef sum_Of_Series(n):\n    return sum(i**3 for i in range(1, n+1))\n```"
  },
  {
    "id": 305,
    "response": "```python\ndef re_order(lst):\n    return [i for i in lst[:-1] if i!= 0]\n```"
  },
  {
    "id": 306,
    "response": "```python\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    else:\n        return n * permutation_coefficient(n-1, k-1)\n```"
  },
  {
    "id": 307,
    "response": "```python\ndef remove_words(list1, list2):\n    return [word for word in list1 if word not in list2]\n```"
  },
  {
    "id": 308,
    "response": "```python\ndef same_order(lst, lst2):\n    return lst == sorted(lst) == sorted(lst2)\n```"
  },
  {
    "id": 309,
    "response": "```python\ndef average_Odd(n):\n    return sum(i for i in range(n) if i % 2!= 0) / n\n```"
  },
  {
    "id": 310,
    "response": "```python\ndef no_of_subsequences(lst, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        count = 0\n        for j in range(i):\n            count += dp[j]\n        dp[i] = count\n    return dp[n]\n```"
  },
  {
    "id": 311,
    "response": "```python\ndef find_min_sum(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def min_sum(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    return min_sum(n)\n```"
  },
  {
    "id": 312,
    "response": "```python\ndef count_element_freq(tup):\n    freq = {}\n    for item in tup:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n```"
  },
  {
    "id": 313,
    "response": "```python\ndef add_str(tup, s):\n    return tup + [s]\n```"
  },
  {
    "id": 314,
    "response": "```python\ndef sum_elements(tup):\n    return sum(tup)\n```"
  },
  {
    "id": 315,
    "response": "```python\ndef modular_sum(lst, m):\n    return sum(x % m == 0 for x in lst) == len(lst)\n```"
  },
  {
    "id": 316,
    "response": "```python\nimport math\n\ndef radix_sort(lst):\n    RADIX = 10\n    placement = 1\n    max_digit = max(lst)\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in lst:\n            tmp = int((i / placement) % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                lst[a] = i\n                a += 1\n        placement *= RADIX\n    return lst\n```"
  },
  {
    "id": 317,
    "response": "```python\ndef largest_pos(lst):\n    return max(lst)\n```"
  },
  {
    "id": 318,
    "response": "```python\ndef sqrt_root(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0 or n == 1:\n        return n\n    low, high = 0, n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return mid\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n```"
  },
  {
    "id": 319,
    "response": "```python\nimport math\n\ndef volume_tetrahedron(n):\n    return (1.0/6) * n * (n-2) * (n-1) * (n-3)\n```"
  },
  {
    "id": 320,
    "response": "```python\ndef get_lcm(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = lst[0]\n    for num in lst[1:]:\n        result = lcm(result, num)\n    return result\n```"
  },
  {
    "id": 321,
    "response": "```python\ndef check_isosceles(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] == sides[1]\n```"
  },
  {
    "id": 322,
    "response": "```python\ndef lbs(lst):\n    def recursive_lbs(lst, max_len):\n        if not lst:\n            return \"\"\n        elif len(lst) == 1:\n            return str(lst[0])\n        else:\n            longest = \"\"\n            for i in range(len(lst)):\n                prefix = str(lst[i])\n                suffix = recursive_lbs(lst[i+1:], max_len - len(prefix))\n                if len(prefix) + len(suffix) > len(longest):\n                    longest = prefix + suffix\n            return longest\n\n    return recursive_lbs(lst, len(str(lst[0])))\n\n```"
  },
  {
    "id": 323,
    "response": "```python\ndef check_string(s):\n    def is_valid(c):\n        return c.isupper() or c.islower() or c.isdigit()\n\n    return len(s) == 6 and all(is_valid(c) for c in s)\n```"
  },
  {
    "id": 324,
    "response": "```python\ndef max_sum_increasing_subsequence(lst):\n    n = len(lst)\n    dp = [[num for num in lst]]\n\n    for i in range(1, n):\n        prev_max = float('-inf')\n        curr_max = float('-inf')\n        for j in range(i):\n            if dp[i-1][j] < dp[i-1][j+1] and dp[i-1][j] + lst[i] > curr_max:\n                curr_max = dp[i-1][j] + lst[i]\n            elif dp[i-1][j] < prev_max:\n                curr_max = prev_max\n            else:\n                curr_max = dp[i-1][j]\n        dp.append([curr_max])\n\n    return max(dp[-1])\n```"
  },
  {
    "id": 325,
    "response": "```python\ndef parallel_lines(lst, lst2):\n    return lst == lst2\n```"
  },
  {
    "id": 326,
    "response": "```python\ndef capitalize_first_last_letters(s):\n    return s[0].upper() + s[1:-1] + s[-1].upper()\n```"
  },
  {
    "id": 327,
    "response": "```python\ndef get_pairs_count(lst, n):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                count += 1\n    return count\n```"
  },
  {
    "id": 328,
    "response": "```python\ndef min_length(lst):\n    return min(len(i) for i in lst)\n```"
  },
  {
    "id": 329,
    "response": "```python\ndef jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        a, b = 2, 3\n        for _ in range(2, n):\n            a, b = b, a + b + b\n        return b\n```"
  },
  {
    "id": 330,
    "response": "```python\ndef negative_count(lst):\n    return sum(1 for x in lst if x < 0)\n```"
  },
  {
    "id": 331,
    "response": "```python\ndef min_coins(lst, n, n2):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for coin in lst:\n            if coin <= i and dp[i - coin]!= float('inf'):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n\n    return dp[n] if dp[n]!= float('inf') else -1\n```"
  },
  {
    "id": 332,
    "response": "```python\ndef check_permutation(s, s2):\n    return sorted(s) == sorted(s2)\n```"
  },
  {
    "id": 333,
    "response": "```python\ndef remove_datatype(tup, param):\n    return tuple(x for x in tup if type(x)!= param)\n```"
  },
  {
    "id": 334,
    "response": "```python\ndef search_literal(s, s2):\n    try:\n        return s.index(s2)\n    except ValueError:\n        return -1\n```"
  },
  {
    "id": 335,
    "response": "```python\ndef top_bottom_surface_area(n):\n    \"\"\"\n    Calculate the surface area of the top and bottom of a cylinder.\n\n    Args:\n        n (float): The radius of the cylinder.\n\n    Returns:\n        float: The total surface area of the top and bottom of the cylinder.\n    \"\"\"\n    import math\n\n    # Calculate the area of the top and bottom\n    top_bottom_area = 2 * math.pi * n ** 2\n\n    return top_bottom_area\n```"
  },
  {
    "id": 336,
    "response": "```python\ndef nth_items(lst, n):\n    return lst[n-1] if n > 0 and n <= len(lst) else None\n```"
  },
  {
    "id": 337,
    "response": "```python\ndef first_repeated_word(s):\n    words = s.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word in words:\n        if word_count[word] > 1:\n            return word\n    return None\n```"
  },
  {
    "id": 338,
    "response": "```python\ndef string_list_to_tuple(string_list):\n    return tuple(string_list)\n```"
  },
  {
    "id": 339,
    "response": "```python\ndef basesnum_correspondingnum(lst, lst2):\n    return [lst[i] ** lst2[i] for i in range(len(lst))]\n```"
  },
  {
    "id": 340,
    "response": "```python\ndef find_Diff(lst):\n    if len(lst) < 2:\n        return None\n    min_freq = min(lst)\n    max_freq = max(lst)\n    return max_freq - min_freq\n```"
  },
  {
    "id": 341,
    "response": "```python\ndef check_abundant(n):\n    return sum(i for i in range(1, n) if n % i == 0) > n\n```"
  },
  {
    "id": 342,
    "response": "```python\nimport re\n\ndef fill_spaces(s):\n    return re.sub(r'[,;:.]+', lambda x: x.group().replace(' ', '|'), s)\n```"
  },
  {
    "id": 343,
    "response": "```python\ndef count_digits(n, n2):\n    return len(str(n + n2))\n```"
  },
  {
    "id": 344,
    "response": "```python\ndef flatten_tuple(tup):\n    return [item for sublist in tup for item in sublist]\n```"
  },
  {
    "id": 345,
    "response": "```python\ndef toggle_F_and_L_bits(n):\n    return n ^ ((n >> 4) << 4)\n```"
  },
  {
    "id": 346,
    "response": "```python\ndef last_occurence_char(s, s2):\n    try:\n        return s.rindex(s2[-1])\n    except ValueError:\n        return -1\n```"
  },
  {
    "id": 347,
    "response": "```python\ndef Total_Hamming_Distance(n):\n    def hamming_distance(i, j):\n        return sum(1 for a, b in zip(range(i, n), range(i + 1, n)) if a!= b)\n\n    return sum(hamming_distance(i, i + 1) for i in range(n - 1))\n```"
  },
  {
    "id": 348,
    "response": "```python\ndef longest_increasing_subsequence(lst):\n    if not lst:\n        return 0\n\n    dp = [1] * len(lst)\n\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n```"
  },
  {
    "id": 349,
    "response": "```python\ndef odd_Num_Sum(n):\n    return sum(i**5 for i in range(1, n+1) if i % 2!= 0)\n```"
  },
  {
    "id": 350,
    "response": "```python\ndef find_max(lst, n, n2):\n    return max(lst[n:n2])\n```"
  },
  {
    "id": 351,
    "response": "```python\ndef extract_column(lst, n):\n    return [row[n] for row in lst]\n```"
  },
  {
    "id": 352,
    "response": "```python\ndef Seq_Linear(lst):\n    return len(lst) == len(set(lst))\n```"
  },
  {
    "id": 353,
    "response": "```python\ndef tuple_to_float(tup):\n    return float(tup[0])\n```"
  },
  {
    "id": 354,
    "response": "```python\ndef split(lst):\n    def is_odd(num):\n        return num % 2!= 0\n\n    return [num for num in lst if is_odd(num)]\n```"
  },
  {
    "id": 355,
    "response": "```python\ndef difference(n):\n    def sum_cubes():\n        return sum(i**3 for i in range(1, n+1))\n\n    def sum_numbers():\n        return sum(range(1, n+1))\n\n    return sum_cubes() - sum_numbers()\n```"
  },
  {
    "id": 356,
    "response": "```python\ndef find_Odd_Pair(lst, n):\n    return [(i, j) for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] ^ lst[j] == n]\n```"
  },
  {
    "id": 357,
    "response": "```python\ndef toggle_string(s):\n    return s.swapcase()\n```"
  },
  {
    "id": 358,
    "response": "```python\ndef digit_distance(n, n2):\n    return abs(int(str(n)[0] - str(n2)[0]) + \n                int(str(n)[1] - str(n2)[1]) + \n                int(str(n)[2] - str(n2)[2]) + \n                int(str(n)[3] - str(n2)[3]) + \n                int(str(n)[4] - str(n2)[4]))\n```"
  },
  {
    "id": 359,
    "response": "```python\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum = max(lst[i], current_sum + lst[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n```"
  },
  {
    "id": 360,
    "response": "```python\ndef union_elements(tup1, tup2):\n    return tuple(set(tup1) | set(tup2))\n```"
  },
  {
    "id": 361,
    "response": "```python\ndef assign_elements(lst):\n    if len(lst) % 2!= 0:\n        raise ValueError(\"টিপলের অবশ্যই জোড় সংখ্যা থাকতে হবে\")\n    return tuple(x for i in range(0, len(lst), 2) for x in (lst[i], lst[i+1]))\n```"
  },
  {
    "id": 362,
    "response": "```python\ndef Find_Max_Length(lst):\n    return max(len(x) for x in lst)\n```"
  },
  {
    "id": 363,
    "response": "```python\ndef extract_values(s):\n    \"\"\"\n    Extracts values from a string containing quotes.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    values = []\n    current_value = \"\"\n    in_quotes = False\n\n    for char in s:\n        if char == '\"':\n            in_quotes = not in_quotes\n        elif in_quotes:\n            current_value += char\n        elif current_value:\n            values.append(current_value)\n            current_value = \"\"\n\n    if current_value:\n        values.append(current_value)\n\n    return values\n```"
  },
  {
    "id": 364,
    "response": "```python\ndef count_Pairs(lst, n):\n    return sum(1 for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i]!= lst[j])\n```"
  },
  {
    "id": 365,
    "response": "```python\ndef split_string(s):\n    return ''.join(c if c.isalnum() else'' for c in s)\n```"
  },
  {
    "id": 366,
    "response": "```python\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n```"
  },
  {
    "id": 367,
    "response": "```python\ndef issort_list(lst):\n    return lst == sorted(lst)\n```"
  },
  {
    "id": 368,
    "response": "```python\ndef empty_list(n):\n    return [None] * n\n```"
  },
  {
    "id": 369,
    "response": "```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n```"
  },
  {
    "id": 370,
    "response": "```python\ndef remove_words(lst, lst2):\n    return [word for word in lst if word not in lst2]\n```"
  },
  {
    "id": 371,
    "response": "```python\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\n    lst.sort()\n    left = 0\n    right = len(lst) - 1\n    max_sum = float('-inf')\n    \n    while left < right:\n        current_sum = lst[right] + lst[left]\n        if current_sum <= k:\n            max_sum = max(max_sum, current_sum)\n            left += 1\n        else:\n            right -= 1\n    \n    return max_sum\n```"
  },
  {
    "id": 372,
    "response": "```python\ndef two_unique_nums(lst):\n    return [i for i in set(lst) if lst.count(i) == 1]\n```"
  },
  {
    "id": 373,
    "response": "```python\ndef unique_product(lst):\n    product = 1\n    for num in lst:\n        if num not in lst[:lst.index(num)]:\n            product *= num\n    return product\n```"
  },
  {
    "id": 374,
    "response": "```python\ndef surface_area_cylinder(r, h):\n    return 2 * 3.14 * (r ** 2) + 2 * 3.14 * r * h\n```"
  },
  {
    "id": 375,
    "response": "```python\ndef count_no(*args):\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    \n    return fib(args[-1])\n```"
  },
  {
    "id": 376,
    "response": "```python\ndef is_sub_array(lst, lst2, n, n2):\n    \"\"\"\n    Checks if lst2 is a sub-array of lst.\n\n    Args:\n        lst (list): The main array.\n        lst2 (list): The sub-array to check.\n        n (int): The length of the main array.\n        n2 (int): The length of the sub-array.\n\n    Returns:\n        bool: True if lst2 is a sub-array of lst, False otherwise.\n    \"\"\"\n    return lst[:n2] == lst2\n```"
  },
  {
    "id": 377,
    "response": "```python\ndef last_Digit_Factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    result = factorial(n)\n    return result % 10\n```"
  },
  {
    "id": 378,
    "response": "```python\ndef interleave_lists(lst, lst2, lst3):\n    return [item for pair in zip(lst, lst2, lst3) for item in pair]\n```"
  },
  {
    "id": 379,
    "response": "```python\ndef find_dissimilar(tup, tup2):\n    return [item for item in set(tup) if item not in set(tup2)]\n```"
  },
  {
    "id": 380,
    "response": "```python\ndef extract_even(tup):\n    return tuple(x for x in tup if x[0] == x[1])\n```"
  },
  {
    "id": 381,
    "response": ""
  },
  {
    "id": 382,
    "response": "```python\ndef is_empty(dct):\n    return len(dct) == 0\n```"
  },
  {
    "id": 383,
    "response": "```python\ndef catalan_number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        catalan = [0 for _ in range(n + 1)]\n        catalan[0] = catalan[1] = 1\n        for i in range(2, n + 1):\n            catalan[i] = 0\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[n]\n```"
  },
  {
    "id": 384,
    "response": ""
  },
  {
    "id": 385,
    "response": "```python\ndef expensive_items(lst, n):\n    return [item for item in lst if item > n]\n```"
  },
  {
    "id": 386,
    "response": "```python\ndef split_arr(lst, n, n2):\n    return lst[:n] + lst[n2:]\n```"
  },
  {
    "id": 387,
    "response": "```python\ndef list_tuple(lst):\n    return tuple(lst)\n```"
  },
  {
    "id": 388,
    "response": "```python\ndef big_diff(lst):\n    return max(lst) - min(lst)\n```"
  },
  {
    "id": 389,
    "response": "```python\ndef perfect_squares(n, n2):\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt = int(num ** 0.5)\n        return sqrt * sqrt == num\n\n    for i in range(min(n, n2), 0, -1):\n        if is_perfect_square(i):\n            return i\n    return None\n```"
  },
  {
    "id": 390,
    "response": "```python\ndef polar_rect(r, theta):\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return x, y\n```"
  },
  {
    "id": 391,
    "response": "```python\ndef swap_list(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
  },
  {
    "id": 392,
    "response": "```python\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (n - i + 1)\n    return sum\n```"
  },
  {
    "id": 393,
    "response": "```python\ndef removezero_ip(ip):\n    parts = ip.split('.')\n    parts = [part for part in parts if part!= '0']\n    return '.'.join(parts)\n```"
  },
  {
    "id": 394,
    "response": "```python\ndef diff_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2!= 0]\n    return abs(min(even) - min(odd))\n```"
  },
  {
    "id": 395,
    "response": "```python\ndef min_Swaps(s, s2):\n    m, n = len(s), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]\n```"
  },
  {
    "id": 396,
    "response": "```python\ndef tuple_size(tup):\n    return len(tup)\n```"
  },
  {
    "id": 397,
    "response": ""
  },
  {
    "id": 398,
    "response": "```python\ndef armstrong_number(n):\n    return n == sum(int(digit) ** len(str(n)) for digit in str(n))\n```"
  },
  {
    "id": 399,
    "response": "```python\ndef sum_average(n):\n    total = sum(range(1, n + 1))\n    return total / n\n```"
  },
  {
    "id": 400,
    "response": "```python\ndef is_even(n):\n    return n % 2 == 0\n```"
  }
]