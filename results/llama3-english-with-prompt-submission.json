[
  {
    "id": 1,
    "response": ""
  },
  {
    "id": 2,
    "response": "```python\ndef first_recurring_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n```"
  },
  {
    "id": 3,
    "response": "```python\ndef get_ludic(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            return i\n```"
  },
  {
    "id": 4,
    "response": "```python\ndef reverse_words(s):\n    words = s.split()\n    reversed_words =''.join(reversed(words))\n    return reversed_words\n```"
  },
  {
    "id": 5,
    "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```"
  },
  {
    "id": 6,
    "response": "```python\ndef radian_degree(n):\n    return n * 180 / 3.14159265359\n```"
  },
  {
    "id": 7,
    "response": "```python\nimport re\n\ndef find_literals(s, pattern):\n    \"\"\"\n    Find the location of all occurrences of a literal string pattern in a given string.\n\n    Args:\n        s (str): The string to search in.\n        pattern (str): The literal string pattern to search for.\n\n    Returns:\n        list: A list of tuples containing the start and end positions of all occurrences of the pattern in the string.\n    \"\"\"\n    return [(m.start(), m.end()) for m in re.finditer(pattern, s)]\n```"
  },
  {
    "id": 8,
    "response": "```python\ndef bell_number(n):\n    if n == 0:\n        return 0\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n```"
  },
  {
    "id": 9,
    "response": "```python\ndef floor_min(n, n2, n3):\n    def f(x):\n        return n * x**2 + n2 * x + n3\n\n    def derivative(x):\n        return 2 * n * x + n2\n\n    def floor_derivative(x):\n        return int(derivative(x))  # Use floor division to get the largest integer less than or equal to the derivative\n\n    def find_root(x0, epsilon=1e-6):\n        x = x0\n        while True:\n            f_x = f(x)\n            f_x_prime = floor_derivative(x)\n            if f_x <= 0 and f_x_prime < 0:\n                return x\n            elif f_x <= 0:\n                x -= epsilon\n            elif f_x > 0:\n                x += epsilon\n\n    return find_root(0)\n```"
  },
  {
    "id": 10,
    "response": "```python\ndef remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n```"
  },
  {
    "id": 11,
    "response": "```python\ndef max_of_nth(lst, n):\n    return max(i for i in range(len(lst)) if lst[i][n-1] == max(lst[i]) if i < n else None)\n```"
  },
  {
    "id": 12,
    "response": "```python\ndef merge(lst):\n    return [lst[0], lst[-1]]\n```"
  },
  {
    "id": 13,
    "response": "```python\ndef maximum_value(lst):\n    return max(lst)\n```"
  },
  {
    "id": 14,
    "response": "```python\ndef cumulative_sum(lst):\n    return [sum(lst[:i+1]) for i in range(len(lst))]\n```"
  },
  {
    "id": 15,
    "response": "```python\ndef average_tuple(tup):\n    return sum(tup) / len(tup)\n```"
  },
  {
    "id": 16,
    "response": "```python\ndef tuple_modulo(tup, tup2):\n    return tuple(t % tup2 for t in tup)\n```"
  },
  {
    "id": 17,
    "response": "```python\ndef min_jumps(n, n2, n3):\n    \"\"\"\n    Calculate the minimum number of jumps required to reach the point (n, 0) from the origin (0, 0) in a 2D flat.\n    \n    The function uses dynamic programming to build up a table of minimum jumps required to reach each point.\n    \n    Parameters:\n    n (int): The x-coordinate of the target point.\n    n2 (int): The y-coordinate of the target point.\n    n3 (int): The z-coordinate of the target point.\n    \n    Returns:\n    int: The minimum number of jumps required to reach the target point.\n    \"\"\"\n    \n    # Initialize a 3D table to store the minimum jumps required to reach each point\n    dp = [[[float('inf')] * (n2 + 1) for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: 0 jumps are required to reach the origin (0, 0)\n    dp[0][0][0] = 0\n    \n    # Fill in the table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(n2 + 1):\n            for k in range(n3 + 1):\n                # If we can reach the current point from the previous point, update the minimum jumps\n                if i > 0 and j > 0:\n                    dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j][k] + 1)\n                if i > 0 and k > 0:\n                    dp[i][j][k] = min(dp[i][j][k], dp[i][j][k - 1] + 1)\n                if j > 0 and k > 0:\n                    dp[i][j][k] = min(dp[i][j][k], dp[i][j - 1][k] + 1)\n    \n    # Return the minimum jumps required to reach the target point\n    return dp[n][n2][n]\n```"
  },
  {
    "id": 18,
    "response": "```python\ndef div_list(lst, lst2):\n    return list(map(lambda x, y: x / y, lst, lst2))\n```"
  },
  {
    "id": 19,
    "response": "```python\ndef move_num(s):\n    return ''.join(str(i) for i in s)\n```"
  },
  {
    "id": 20,
    "response": "```python\ndef largest_subset(lst, n):\n    def backtrack(start, path, max_len):\n        if len(path) == n:\n            result.append(path)\n            return\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]], max_len)\n\n    result = []\n    backtrack(0, [], 0)\n    return max(result, key=len)\n```"
  },
  {
    "id": 21,
    "response": "```python\ndef increment_numerics(lst, n):\n    return [str(int(i) + n) for i in lst]\n```"
  },
  {
    "id": 22,
    "response": "```python\ndef get_median(lst, lst2):\n    merged = sorted(lst + lst2)\n    n = len(merged)\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2\n    else:\n        return merged[n // 2]\n```"
  },
  {
    "id": 23,
    "response": "```python\ndef nth_nums(lst, n):\n    return list(map(lambda x: x ** n, lst))\n```"
  },
  {
    "id": 24,
    "response": "```python\ndef is_upper(s):\n    return s.isupper()\n```"
  },
  {
    "id": 25,
    "response": "```python\ndef swap_list(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
  },
  {
    "id": 26,
    "response": "```python\nimport math\n\ndef triangle_area(n):\n    return (n * (n - 1)) / 2\n```"
  },
  {
    "id": 27,
    "response": "```python\ndef find_first_missing(lst, n, n2):\n    \"\"\"\n    Finds the smallest missing number in a sorted list.\n\n    Args:\n        lst (list): A sorted list of integers.\n        n (int): The expected length of the list.\n        n2 (int): The actual length of the list.\n\n    Returns:\n        int: The smallest missing number in the list.\n    \"\"\"\n    for i in range(n2):\n        if i + 1!= lst[i]:\n            return i + 1\n    return n + 1\n```"
  },
  {
    "id": 28,
    "response": "```python\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```"
  },
  {
    "id": 29,
    "response": "```python\ndef find_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]\n```"
  },
  {
    "id": 30,
    "response": "```python\ndef get_coordinates(tup):\n    x, y = tup\n    return (x, y)\n```"
  },
  {
    "id": 31,
    "response": "```python\ndef replace_spaces(s):\n    return s.replace(' ', '_')\n```"
  },
  {
    "id": 32,
    "response": "```python\ndef move_zero(lst):\n    return [x for x in lst if x!= 0]\n```"
  },
  {
    "id": 33,
    "response": "```python\ndef pair_or_sum(lst, n):\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total ^= lst[i] ^ lst[j]\n    return total\n```"
  },
  {
    "id": 34,
    "response": "```python\ndef even_power_sum(n):\n    return sum(i**4 for i in range(n) if i % 2 == 0)\n```"
  },
  {
    "id": 35,
    "response": "```python\ndef heapify(lst):\n    def heapify_helper(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[left] > lst[largest]:\n            largest = left\n\n        if right < n and lst[right] > lst[largest]:\n            largest = right\n\n        if largest!= i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify_helper(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify_helper(lst, n, i)\n\n    for i in range(n - 1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        n -= 1\n        heapify_helper(lst, n, 0)\n```"
  },
  {
    "id": 36,
    "response": "```python\ndef check_solution(n, n2, n3):\n    \"\"\"\n    Checks if the roots of the quadratic equation ax^2 + bx + c = 0 are competing.\n    \n    Args:\n    n (float): Coefficient 'a' of the quadratic equation.\n    n2 (float): Coefficient 'b' of the quadratic equation.\n    n3 (float): Coefficient 'c' of the quadratic equation.\n    \n    Returns:\n    bool: True if the roots are competing, False otherwise.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = n2**2 - 4*n*n3\n    \n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return False\n    else:\n        return True\n```"
  },
  {
    "id": 37,
    "response": "```python\ndef noprofit_noloss(n, n2):\n    return n == n2\n```"
  },
  {
    "id": 38,
    "response": "```python\ndef wind_chill(n, n2):\n    \"\"\"\n    Calculates the wind chill index.\n\n    Args:\n        n (float): Air temperature in degrees Celsius.\n        n2 (float): Wind speed in km/h.\n\n    Returns:\n        float: Wind chill index in degrees Celsius.\n    \"\"\"\n    return 13.12 + (0.6215 * n) - (11.37 * (n ** 0.16) + (0.3965 * n2 * (n ** 0.16))\n                                - (0.0278 * (n ** 2) + (0.0278 * (n2 ** 1.16))) * (n ** 0.16))\n```"
  },
  {
    "id": 39,
    "response": "```python\ndef sum_name_lengths(lst):\n    return sum(len(name) for name in lst if name[0].isupper())\n```"
  },
  {
    "id": 40,
    "response": "```python\ndef Remove_Parenthesis(lst):\n    return ''.join([c for c in lst if c not in ['(', ')']])\n```"
  },
  {
    "id": 41,
    "response": "```python\ndef is_nonagonal(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 1\n    while True:\n        if is_prime(i) and is_prime(i + 1) and is_prime(i + 2) and is_prime(i + 3) and is_prime(i + 4) and is_prime(i + 5) and is_prime(i + 6):\n            return i\n        i += 1\n```"
  },
  {
    "id": 42,
    "response": "```python\ndef remove_similar_row(lst):\n    def get_row_hash(row):\n        return tuple(sorted(row))\n\n    unique_rows = set(get_row_hash(row) for row in lst)\n    return [row for row in lst if get_row_hash(row) in unique_rows]\n```"
  },
  {
    "id": 43,
    "response": "```python\ndef text_match_wordz_Middle(s):\n    def count_vowels(word):\n        return sum(1 for char in word.lower() if char in 'aeiou')\n\n    vowels = 'aeiou'\n    word = s.lower()\n    count = count_vowels(word)\n    return word if count > 1 and word[0] not in vowels and word[-1] not in vowels else None\n```"
  },
  {
    "id": 44,
    "response": "```python\ndef reverse_array_upto_k(lst, k):\n    return lst[:k][::-1] + lst[k:]\n```"
  },
  {
    "id": 45,
    "response": "```python\ndef find_k_product(lst, k):\n    \"\"\"\n    This function calculates the product of the Kth term in a list of tuples.\n    \n    Parameters:\n    lst (list): A list of tuples.\n    k (int): The index of the term to calculate the product for (1-indexed).\n    \n    Returns:\n    int: The product of the Kth term in the list.\n    \"\"\"\n    return lst[k-1][0]\n```"
  },
  {
    "id": 46,
    "response": "```python\ndef no_of_cubes(n, n2):\n    return n2 // n ** 3\n```"
  },
  {
    "id": 47,
    "response": "```python\ndef split_upper_string(s):\n    result = []\n    temp = \"\"\n    for char in s:\n        if char.isupper():\n            if temp:\n                result.append(temp)\n            temp = char\n        else:\n            temp += char\n    if temp:\n        result.append(temp)\n    return result\n```"
  },
  {
    "id": 48,
    "response": "```python\ndef exchange_elements(lst):\n    return [lst[i] if i % 2 == 0 else lst[i-1] for i in range(len(lst))]\n```"
  },
  {
    "id": 49,
    "response": "```python\ndef sum_range_list(lst, n, n2):\n    return sum(lst[n:n2])\n```"
  },
  {
    "id": 50,
    "response": "```python\ndef are_equal(lst, lst2, n, n2):\n    if len(lst)!= n or len(lst2)!= n2:\n        return False\n    for i in range(n):\n        if lst[i]!= lst2[i]:\n            return False\n    return True\n```"
  },
  {
    "id": 51,
    "response": "```python\ndef check_subset(TUP, TUP2):\n    return set(TUP).issubset(set(TUP2))\n```"
  },
  {
    "id": 52,
    "response": "```python\ndef matrix_to_list(matrix):\n    return [row for col in zip(*matrix) for row in col]\n```"
  },
  {
    "id": 53,
    "response": "```python\nimport collections\n\ndef group_dictionary(lst):\n    return collections.defaultdict(list, lst)\n```"
  },
  {
    "id": 54,
    "response": "```python\ndef rectangle_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
  },
  {
    "id": 55,
    "response": "```python\ndef fifth_power_sum(n):\n    return sum(i**5 for i in range(1, n+1))\n```"
  },
  {
    "id": 56,
    "response": "```python\ndef find_min_sum(lst, lst2, n):\n    return min(abs(a - b) for a, b in zip(lst, lst2)) for _ in range(n)\n```"
  },
  {
    "id": 57,
    "response": "```python\ndef first_digit(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    result = factorial(n)\n    return int(str(result)[0])\n```"
  },
  {
    "id": 58,
    "response": "```python\ndef max_occurrences(lst):\n    counts = {}\n    for item in lst:\n        counts[item] = counts.get(item, 0) + 1\n    return max(counts, key=counts.get)\n```"
  },
  {
    "id": 59,
    "response": "```python\ndef print_duplicates(lst):\n    seen = set()\n    duplicates = set()\n    for num in lst:\n        if num in seen:\n            duplicates.add(num)\n        seen.add(num)\n    for num in duplicates:\n        print(num)\n```"
  },
  {
    "id": 60,
    "response": "```python\ndef find_points(n, n2, n3, n4):\n    def find_intersection(range1, range2):\n        start = max(range1[0], range2[0])\n        end = min(range1[1], range2[1])\n        if start <= end:\n            return (start, end)\n        else:\n            return None\n\n    def find_points(n, n2, n3, n4):\n        points = []\n        if n < n2:\n            points.append(n)\n            n2 = n2 + 1\n        if n2 < n3:\n            points.append(n2)\n            n3 = n3 + 1\n        if n3 < n4:\n            points.append(n3)\n            n4 = n4 + 1\n        return points\n\n    if find_intersection((n, n2), (n3, n4)) is None:\n        return []\n    else:\n        return find_points(n, n2, find_intersection((n, n2), (n3, n4))[0], find_intersection((n3, n4), (n, n2))[1])\n```"
  },
  {
    "id": 61,
    "response": "```python\ndef max_sum_of_three_conscript(lst, n):\n    if len(lst) < 3:\n        return 0\n    max_sum = float('-inf')\n    for i in range(len(lst) - 2):\n        current_sum = sum(lst[i:i+3])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
  },
  {
    "id": 62,
    "response": "```python\ndef pick_list(dct):\n    return dct.get(list)\n```"
  },
  {
    "id": 63,
    "response": "```python\ndef Find_Max_val(n, n2, n3):\n    max_val = max(n, n2, n3)\n    return max_val % n3\n```"
  },
  {
    "id": 64,
    "response": "```python\ndef average_even(n):\n    numbers = [i for i in range(1, n+1) if i % 2 == 0]\n    if len(numbers) % 2 == 0:\n        return sum(numbers) / len(numbers)\n    else:\n        return numbers[len(numbers) // 2]\n```"
  },
  {
    "id": 65,
    "response": "```python\ndef move_last(lst):\n    return lst[-1]\n```"
  },
  {
    "id": 66,
    "response": "```python\ndef count_char(S, char):\n    return S.count(char)\n```"
  },
  {
    "id": 67,
    "response": "```python\ndef check_vowels(S, S2):\n    vowels = 'aeiou'\n    count = 0\n    for char in S2:\n        if char.lower() in vowels:\n            count += 1\n    return count\n```"
  },
  {
    "id": 68,
    "response": "```python\ndef replace(s, s2):\n    return s.replace(s2, 'X')\n```"
  },
  {
    "id": 69,
    "response": "```python\nimport re\n\ndef Check_IP(s):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 70,
    "response": "```python\ndef decreasing_trend(lst):\n    return all(lst[i] > lst[i+1] for i in range(len(lst)-1))\n```"
  },
  {
    "id": 71,
    "response": "```python\ndef set_right_most_unset_bit(n):\n    return n | -n\n```"
  },
  {
    "id": 72,
    "response": "```python\ndef max_of_three(n, n2, n3):\n    return max(n, n2, n3)\n```"
  },
  {
    "id": 73,
    "response": "```python\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```"
  },
  {
    "id": 74,
    "response": "```python\ndef Remove_Duplicate(s):\n    return''.join(set(s.split()))\n```"
  },
  {
    "id": 75,
    "response": "```python\ndef sum_nums(n, n2, n3, n4):\n    total = n + n2 + n3 + n4\n    if 10 <= total <= 30:\n        return 20\n    else:\n        return total\n```"
  },
  {
    "id": 76,
    "response": "```python\nimport re\n\ndef remove_extra_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```"
  },
  {
    "id": 77,
    "response": "```python\ndef validity_triangle(n, n2, n3):\n    \"\"\"\n    Checks if a triangle with sides n, n2, n3 is valid.\n\n    A triangle is valid if the sum of the lengths of any two sides is greater than the length of the third side.\n\n    Args:\n        n (int): The length of the first side.\n        n2 (int): The length of the second side.\n        n3 (int): The length of the third side.\n\n    Returns:\n        bool: True if the triangle is valid, False otherwise.\n    \"\"\"\n    return n + n2 > n3 and n + n3 > n2 and n2 + n3 > n\n```"
  },
  {
    "id": 78,
    "response": "```python\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 79,
    "response": "```python\ndef ACCESS_KEY(DCT, N):\n    return DCT[N]\n```"
  },
  {
    "id": 80,
    "response": "```python\ndef increasing_trend(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n```"
  },
  {
    "id": 81,
    "response": "```python\ndef smallest_divisor(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n```"
  },
  {
    "id": 82,
    "response": "```python\ndef mul_list(lst, lst2):\n    return list(map(lambda x, y: x * y, lst, lst2))\n```"
  },
  {
    "id": 83,
    "response": "```python\ndef sum_square(n):\n    for i in range(int(n**0.5), 0, -1):\n        if i * i <= n:\n            j = int((n - i * i) ** 0.5)\n            if j * j == n - i * i:\n                return i, j\n    return None\n```"
  },
  {
    "id": 84,
    "response": "```python\ndef count_char(S, S2):\n    \"\"\"\n    Returns the number of occurrences of S2 in S.\n    \"\"\"\n    return S.count(S2)\n```"
  },
  {
    "id": 85,
    "response": "```python\ndef sum_of_primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n+1) if is_prime(num))\n```"
  },
  {
    "id": 86,
    "response": "```python\ndef freq_element(tup):\n    return {i: tup.count(i) for i in set(tup)}\n```"
  },
  {
    "id": 87,
    "response": "```python\ndef recur_gcd(n, n2):\n    if n2 == 0:\n        return n\n    else:\n        return recur_gcd(n2, n % n2)\n```"
  },
  {
    "id": 88,
    "response": "```python\ndef len_complex(n, n2):\n    return abs(n) + abs(n2)\n```"
  },
  {
    "id": 89,
    "response": "```python\ndef min_jumps(lst, n):\n    jumps = [0] * n\n    max_reach = 0\n    steps = 0\n    for i in range(n):\n        if i > max_reach:\n            return -1\n        jumps[i] = 1\n        max_reach = max(max_reach, i + lst[i])\n        if max_reach >= n - 1:\n            break\n        for j in range(i + 1, max_reach):\n            jumps[j] = max(jumps[j], jumps[i] + 1)\n    return jumps[-1]\n```"
  },
  {
    "id": 90,
    "response": "```python\ndef Mul_Conscripuit_nums(lst):\n    if len(lst) < 2:\n        return 0\n    result = lst[0]\n    for i in range(1, len(lst)):\n        result *= lst[i]\n    return result\n```"
  },
  {
    "id": 91,
    "response": "```python\ndef group_element(lst):\n    result = {}\n    for item in lst:\n        if item[1] not in result:\n            result[item[1]] = [item]\n        else:\n            result[item[1]].append(item)\n    return list(result.values())\n```"
  },
  {
    "id": 92,
    "response": "```python\ndef last_two_digits(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    result = factorial(n)\n    return result % 100\n```"
  },
  {
    "id": 93,
    "response": "```python\ndef remove_multipe_spaces(s):\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 94,
    "response": "```python\ndef extract_unique_values(dct):\n    return list(set(dct.values()))\n```"
  },
  {
    "id": 95,
    "response": "```python\ndef Check_Greater(TUP, TUP2):\n    return all(TUP2[i] > i for i in range(len(TUP))\n```"
  },
  {
    "id": 96,
    "response": "```python\ndef zip_list(lst, lst2):\n    return list(zip(lst, lst2))\n```"
  },
  {
    "id": 97,
    "response": "```python\ndef COUNT_Even(lst):\n    return len([x for x in lst if x % 2 == 0])\n```"
  },
  {
    "id": 98,
    "response": "```python\ndef sort_dict_item(dct):\n    return dict(sorted(dct.items(), key=lambda item: item[0]))\n```"
  },
  {
    "id": 99,
    "response": "```python\ndef min_swaps(s, s2):\n    n = len(s)\n    m = len(s2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m]\n```"
  },
  {
    "id": 100,
    "response": "```python\ndef COUNT_RANGE_IN_LIST(LST, N, N2):\n    return sum(1 for x in LST if N <= x <= N2)\n```"
  },
  {
    "id": 101,
    "response": "```python\ndef equilibrium_index(lst):\n    \"\"\"\n    Returns the index of the first element where the sum of elements to the left is equal to the sum of elements to the right.\n    If no such index exists, returns -1.\n    \"\"\"\n    total_sum = sum(lst)\n    left_sum = 0\n    for i, num in enumerate(lst):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1\n```"
  },
  {
    "id": 102,
    "response": "```python\ndef removals(lst, n, n2):\n    return len(lst) - max(n, n2)\n```"
  },
  {
    "id": 103,
    "response": "```python\ndef is_key_present(dictionary, key):\n    return key in dictionary\n```"
  },
  {
    "id": 104,
    "response": "```python\ndef harmonic_sum(n):\n    return sum(1 / i for i in range(1, n))\n```"
  },
  {
    "id": 105,
    "response": "```python\ndef sort_sublists(lst):\n    return sorted(lst, key=len)\n```"
  },
  {
    "id": 106,
    "response": "```python\ndef is_subset(lst, n, lst2, n2):\n    \"\"\"\n    Checks if lst is a subset of lst2.\n\n    Args:\n        lst (list): The list to check.\n        n (int): The length of lst.\n        lst2 (list): The list to check against.\n        n2 (int): The length of lst2.\n\n    Returns:\n        bool: True if lst is a subset of lst2, False otherwise.\n    \"\"\"\n    return set(lst).issubset(set(lst2))\n```"
  },
  {
    "id": 107,
    "response": "```python\ndef COUNT_SET_BITS(N):\n    return N.bit_length()\n```"
  },
  {
    "id": 108,
    "response": "```python\ndef string_to_list(s):\n    return list(s)\n```"
  },
  {
    "id": 109,
    "response": "```python\ndef get_unique(lst):\n    return {i: len(set(lst[i])) for i in range(len(lst))}\n```"
  },
  {
    "id": 110,
    "response": "```python\ndef front_and_rear(tup):\n    if len(tup) > 0:\n        return tup[0], tup[-1]\n    else:\n        return None, None\n```"
  },
  {
    "id": 111,
    "response": "```python\ndef product_equal(n):\n    return n % 2 == 0 and n % 10!= 0\n```"
  },
  {
    "id": 112,
    "response": "```python\ndef Remove_Duplicate(LST):\n    return list(dict.fromkeys(LST))\n```"
  },
  {
    "id": 113,
    "response": "```python\ndef check_valid(tube):\n    def is_valid(num):\n        return num >= 0 and num <= 100\n\n    return all(is_valid(num) for num in tube)\n```"
  },
  {
    "id": 114,
    "response": "```python\ndef count_fac(n):\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count\n```"
  },
  {
    "id": 115,
    "response": "```python\ndef str_to_tuple(s):\n    return tuple(s)\n```"
  },
  {
    "id": 116,
    "response": "```python\nimport math\n\ndef rhombus_perimeter(n):\n    \"\"\"\n    Calculate the perimeter of a rhombus.\n\n    Args:\n        n (float): The side length of the rhombus.\n\n    Returns:\n        float: The perimeter of the rhombus.\n    \"\"\"\n    return 4 * n\n```"
  },
  {
    "id": 117,
    "response": "```python\ndef sd_calc(lst):\n    if len(lst)!= 2:\n        raise ValueError(\"Input list must contain exactly two elements\")\n    if lst[1] == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return lst[0] / lst[1]\n```"
  },
  {
    "id": 118,
    "response": "```python\ndef alternate_elements(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]\n```"
  },
  {
    "id": 119,
    "response": "```python\ndef text_match(s):\n    while 'B' in s:\n        s = s.replace('B', '')\n    return s\n```"
  },
  {
    "id": 120,
    "response": "```python\ndef add_dict_to_tuple(tup, dct):\n    return tup + (dct,)\n```"
  },
  {
    "id": 121,
    "response": "```python\ndef max_average_of_path(lst, n):\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    def dfs(x, y, path_sum, visited):\n        if x < 0 or y < 0 or x >= n or y >= n or visited[x][y] or lst[x][y] == 0:\n            return path_sum\n        visited[x][y] = True\n        path_sum += lst[x][y]\n        max_path_sum = max(max_average_of_path(lst, n)(x+1, y, path_sum, visited), \n                          max_average_of_path(lst, n)(x-1, y, path_sum, visited), \n                          max_average_of_path(lst, n)(x, y+1, path_sum, visited), \n                          max_average_of_path(lst, n)(x, y-1, path_sum, visited))\n        visited[x][y] = False\n        return max_path_sum\n\n    max_path_sum = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if lst[i][j]!= 0:\n                max_path_sum = max(max_path_sum, dfs(i, j, lst[i][j], [[False for _ in range(n)] for _ in range(n)]))\n    return max_path_sum / (n * n)\n```"
  },
  {
    "id": 122,
    "response": "```python\ndef Filter_data(DCT, N, N2):\n    filtered_data = {student: (height, width) for student, (height, width) in DCT.items() if height > N and width > N2}\n    return filtered_data\n```"
  },
  {
    "id": 123,
    "response": "```python\ndef COUNT_SAME_PAIR(LST, LST2):\n    return sum(map(lambda x, y: LST.count(x) == LST2.count(y), set(LST) & set(LST2)))\n```"
  },
  {
    "id": 124,
    "response": "```python\ndef Power_Base_Sum(N, N2):\n    def power_base_sum(n, base):\n        return sum(base ** i for i in range(n + 1))\n\n    return power_base_sum(N, N2)\n```"
  },
  {
    "id": 125,
    "response": "```python\ndef extract_quotation(s):\n    start = s.find('\"')\n    if start!= -1:\n        end = s.find('\"', start + 1)\n        if end!= -1:\n            return s[start + 1:end]\n    return None\n```"
  },
  {
    "id": 126,
    "response": "```python\ndef multiply_elements(tup):\n    return tuple(a * b for a, b in zip(tup, tup[1:] + tup[:1]))\n```"
  },
  {
    "id": 127,
    "response": "```python\ndef remove_char(s):\n    return ''.join(c for c in s if c.isalnum())\n```"
  },
  {
    "id": 128,
    "response": "```python\ndef sum_list(lst, lst2):\n    return [x + y for x, y in zip(lst, lst2)]\n```"
  },
  {
    "id": 129,
    "response": "```python\ndef add_list(lst, lst2):\n    return list(map(lambda x, y: x + y, lst, lst2))\n```"
  },
  {
    "id": 130,
    "response": "```python\ndef CONCCTIVE_DUPLICATES(LST):\n    return list(dict.fromkeys(LST))\n```"
  },
  {
    "id": 131,
    "response": "```python\ndef lateral_surface_cone(n, n2):\n    \"\"\"\n    Calculates the lateral surface area of a cone.\n\n    Parameters:\n    n (float): Radius of the base of the cone.\n    n2 (float): Height of the cone.\n\n    Returns:\n    float: Lateral surface area of the cone.\n    \"\"\"\n    return 3.14 * n * n2\n```"
  },
  {
    "id": 132,
    "response": "```python\ndef replace_speecialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n```"
  },
  {
    "id": 133,
    "response": "```python\ndef find_first_occurrence(lst, n):\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if lst[mid] == n:\n            if mid == 0 or lst[mid - 1]!= n:\n                return mid\n            right = mid - 1\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```"
  },
  {
    "id": 134,
    "response": "```python\ndef sum_of_subarray_prod(lst):\n    n = len(lst)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            dp[i][j] = lst[i] * dp[i + 1][j] + lst[j] * dp[i][j - 1]\n    return dp[0][-1]\n```"
  },
  {
    "id": 135,
    "response": "```python\ndef toggle_middle_bits(n):\n    return n ^ ((n >> 1) & ((1 << n.bit_length()) - 1))\n```"
  },
  {
    "id": 136,
    "response": "```python\ndef LEFT_INSERTION(LST, N):\n    \"\"\"\n    This function identifies the left insertion point for a particular quality in a list.\n    \n    Parameters:\n    LST (list): The input list.\n    N (int): The quality to be inserted.\n    \n    Returns:\n    int: The left insertion point for the quality.\n    \"\"\"\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(LST)\n    \n    # Continue the loop until the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the mid index\n        mid = (left + right) // 2\n        \n        # If the middle element is less than the quality, move the left pointer to mid + 1\n        if LST[mid] < N:\n            left = mid + 1\n        # If the middle element is greater than or equal to the quality, move the right pointer to mid\n        else:\n            right = mid\n    \n    # At the end of the loop, the left pointer will be the left insertion point\n    return left\n```"
  },
  {
    "id": 137,
    "response": "```python\ndef check_str(s):\n    vowels = 'aeiouAEIOU'\n    return s and (s[0] in vowels)\n```"
  },
  {
    "id": 138,
    "response": "```python\ndef geometric_sum(n):\n    if n < 1:\n        return 0\n    else:\n        return (n - 1) * (1 - (1 / (1 + 1)))\n```"
  },
  {
    "id": 139,
    "response": "```python\ndef find_index(n):\n    \"\"\"\n    Returns the smallest triangular number index that is greater than or equal to n.\n    \"\"\"\n    i = 1\n    while True:\n        triangular_num = i * (i + 1) // 2\n        if triangular_num >= n:\n            return i\n        i += 1\n```"
  },
  {
    "id": 140,
    "response": "```python\ndef tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))\n```"
  },
  {
    "id": 141,
    "response": "```python\ndef all_characters_same(s):\n    return len(set(s)) == 1\n```"
  },
  {
    "id": 142,
    "response": "```python\nimport math\n\ndef area_tetrahedron(n):\n    return (math.sqrt(8 * (n**3)) / 27)\n```"
  },
  {
    "id": 143,
    "response": "```python\ndef rotate_right(lst, n, n2):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n```"
  },
  {
    "id": 144,
    "response": "```python\ndef check_none(tup):\n    return 0 in tup\n```"
  },
  {
    "id": 145,
    "response": "```python\ndef divisible_by_digits(n, n2):\n    def is_divisible(num):\n        for digit in str(num):\n            if num % int(digit)!= 0:\n                return False\n        return True\n\n    return [i for i in range(n, n2+1) if is_divisible(i)]\n```"
  },
  {
    "id": 146,
    "response": "```python\ndef sector_area(n, r):\n    \"\"\"\n    Calculate the area of a sector of a circle.\n\n    Args:\n        n (float): The angle of the sector in degrees.\n        r (float): The radius of the circle.\n\n    Returns:\n        float: The area of the sector.\n    \"\"\"\n    return (n / 360) * 3.14159 * r ** 2\n```"
  },
  {
    "id": 147,
    "response": "```python\ndef LCS_OF_THREE(S, S2, S3, N, N2, N3):\n    def lcs(S, S2, memo):\n        if not S or not S2:\n            return \"\"\n        if (S2, S) in memo:\n            return memo[(S2, S)]\n        if S[0] == S2[0]:\n            result = lcs(S[1:], S2[1:], memo) + S[0]\n        else:\n            result = max([lcs(S, S2[1:], memo), lcs(S[1:], S2, memo)], key=len)\n        memo[(S2, S)] = result\n        return result\n\n    def lcs2(S, S2, memo):\n        if not S or not S2:\n            return \"\"\n        if (S, S2) in memo:\n            return memo[(S, S2)]\n        if S2[0] == S[0]:\n            result = lcs2(S[1:], S2[1:], memo) + S2[0]\n        else:\n            result = max([lcs2(S, S2[1:], memo), lcs2(S[1:], S2, memo)], key=len)\n        memo[(S, S2)] = result\n        return result\n\n    def lcs3(S, S2, S3, memo):\n        if not S or not S2 or not S3:\n            return \"\"\n        if (S, S2, S3) in memo:\n            return memo[(S, S2, S3)]\n        if S[0] == S2[0] == S3[0]:\n            result = lcs3(S[1:], S2[1:], S3[1:], memo) + S[0]\n        else:\n            result = max([lcs3(S, S2[1:], S3[1:], memo), lcs3(S[1:], S2, S3[1:], memo), lcs3(S[1:], S2, S3, memo)], key=len)\n        memo[(S, S2, S3)] = result\n        return result\n\n    return lcs3(S, S2, S3, {})\n\n```"
  },
  {
    "id": 148,
    "response": "```python\ndef capital_words_spaces(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(''+ word)\n        else:\n            result.append(word)\n    return''.join(result)\n```"
  },
  {
    "id": 149,
    "response": "```python\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=lambda s: int(s))\n```"
  },
  {
    "id": 150,
    "response": "```python\ndef add_tuple(lst, tup):\n    return lst + tup\n```"
  },
  {
    "id": 151,
    "response": "```python\ndef check_min_heap(lst, n):\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and lst[i] > lst[left_child]:\n            return False\n        if right_child < n and lst[i] > lst[right_child]:\n            return False\n    return True\n```"
  },
  {
    "id": 152,
    "response": "```python\ndef jacobsthal_num(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, (a + b) % 1000000007\n        return b\n```"
  },
  {
    "id": 153,
    "response": "```python\ndef min_k(lst, k):\n    return lst[:k]\n```"
  },
  {
    "id": 154,
    "response": "```python\ndef extract_index_list(LST, LST2, LST3):\n    return [LST[i] for i in range(len(LST)) if LST[i] in LST2 and LST[i] in LST3]\n```"
  },
  {
    "id": 155,
    "response": "```python\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n```"
  },
  {
    "id": 156,
    "response": "```python\ndef text_match_zero_one(s):\n    return 'B' in s or '0' in s\n```"
  },
  {
    "id": 157,
    "response": "```python\ndef count_reverse_pairs(lst):\n    def reverse(s):\n        return s[::-1]\n\n    return sum(1 for s in lst if s!= reverse(s))\n```"
  },
  {
    "id": 158,
    "response": "```python\ndef unique_sublists(lst):\n    return len(set(tuple(sorted(sublist)) for sublist in lst))\n```"
  },
  {
    "id": 159,
    "response": "```python\ndef is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n```"
  },
  {
    "id": 160,
    "response": "```python\ndef unique_element(lst, n):\n    return len(lst) == n and len(set(lst)) == 1\n```"
  },
  {
    "id": 161,
    "response": "```python\nimport math\n\ndef arc_length(n, n2):\n    return math.sqrt((n2 - n)**2 + (1 - n**2))\n```"
  },
  {
    "id": 162,
    "response": "```python\ndef check_month_number_of_days(n):\n    if n in [31, 30, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 163,
    "response": "```python\ndef find_min_diff(tup):\n    return min(tup) - max(tup)\n```"
  },
  {
    "id": 164,
    "response": "```python\ndef extract_number(s):\n    import re\n    match = re.search(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", s)\n    if match:\n        return float(match.group())\n    else:\n        return None\n```"
  },
  {
    "id": 165,
    "response": "```python\ndef is_polite(n):\n    polite_numbers = [1, 2, 4, 8, 16, 32, 64]\n    while n > 0:\n        if n % 2 == 1:\n            polite_numbers.append(polite_numbers[-1] * 2)\n        n //= 2\n    return polite_numbers[-1] == 1\n```"
  },
  {
    "id": 166,
    "response": "```python\ndef pair_wise(lst):\n    return [x for i in range(0, len(lst), 2) for x in lst[i:i+2]]\n```"
  },
  {
    "id": 167,
    "response": "```python\ndef get_pairs_count(lst, n, n2):\n    pairs = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n + n2:\n                pairs += 1\n    return pairs\n```"
  },
  {
    "id": 168,
    "response": "```python\ndef check_odd_parity(n):\n    return n % 2!= 0\n```"
  },
  {
    "id": 169,
    "response": "```python\ndef diff(lst, lst2):\n    return [a for a, b in zip(lst, lst2) if a!= b]\n```"
  },
  {
    "id": 170,
    "response": "```python\ndef odd_num_sum(n):\n    return sum(i**4 for i in range(n) if i % 2!= 0)\n```"
  },
  {
    "id": 171,
    "response": "```python\ndef check_expression(s):\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n    return not stack\n```"
  },
  {
    "id": 172,
    "response": ""
  },
  {
    "id": 173,
    "response": "```python\ndef occurrence_substring(S, S2):\n    try:\n        return S.index(S2)\n    except ValueError:\n        return -1\n```"
  },
  {
    "id": 174,
    "response": "```python\nimport re\n\ndef check_email(s):\n    pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n    return bool(re.match(pattern, s))\n```"
  },
  {
    "id": 175,
    "response": "```python\ndef odd_position(lst):\n    return [i for i, x in enumerate(lst) if i % 2!= 0]\n```"
  },
  {
    "id": 176,
    "response": "```python\ndef count_vowels(s):\n    vowels = 'aeiou'\n    return sum(1 for char in s.lower() if char in vowels)\n```"
  },
  {
    "id": 177,
    "response": "```python\ndef find_sum(lst, n):\n    return sum(i for i in set(lst) if lst.count(i) == 1)\n```"
  },
  {
    "id": 178,
    "response": "```python\ndef Pack_Conscriptive_Duplicates(lst):\n    return [sub_list for sub_list in [sub_list for sub_list in lst if isinstance(sub_list, list)]]\n```"
  },
  {
    "id": 179,
    "response": "```python\ndef unique_sublists(lst):\n    return len(set(tuple(sorted(sublist)) for sublist in lst))\n```"
  },
  {
    "id": 180,
    "response": "```python\ndef find_combinations(lst):\n    def backtrack(start, path, target):\n        if target < 0:\n            return\n        if target == 0:\n            result.append(path)\n            return\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]], target - lst[i])\n\n    result = []\n    backtrack(0, [], 0)\n    return result\n```"
  },
  {
    "id": 181,
    "response": "```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
  },
  {
    "id": 182,
    "response": "```python\ndef odd_length_sum(lst):\n    return sum(i for i in lst if i % 2!= 0)\n```"
  },
  {
    "id": 183,
    "response": "```python\ndef rgb_to_hsv(n, n2, n3):\n    r, g, b = n / 255.0, n2 / 255.0, n3 / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return round(h, 2), round(s, 2), round(v, 2)\n```"
  },
  {
    "id": 184,
    "response": "```python\ndef mul_even_odd(lst):\n    even_count = sum(1 for num in lst if num % 2 == 0)\n    odd_count = len(lst) - even_count\n    if even_count == odd_count:\n        return even_count\n    else:\n        return \"No equal number of even and odd numbers found\"\n```"
  },
  {
    "id": 185,
    "response": "```python\ndef tuple_str_int(s):\n    return tuple(int(i) for i in s)\n```"
  },
  {
    "id": 186,
    "response": "```python\ndef Right_Insertion(lst, n):\n    \"\"\"\n    This function identifies the correct insert points for a particular quality in a list.\n    \n    Parameters:\n    lst (list): The input list.\n    n (int): The quality to be inserted.\n    \n    Returns:\n    list: The modified list with the quality inserted at the correct points.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if lst[i] <= n:\n            result.append(n)\n            result.extend(lst[i:])\n            return result\n    result.append(n)\n    return result\n```"
  },
  {
    "id": 187,
    "response": "```python\nimport re\n\ndef text_match_three(s):\n    return bool(re.search(r'A.*?B{3}', s))\n```"
  },
  {
    "id": 188,
    "response": "```python\ndef new_tuple(lst, s):\n    return tuple(s)\n```"
  },
  {
    "id": 189,
    "response": "```python\ndef perimeter_polygon(n, side_length):\n    \"\"\"\n    Calculate the perimeter of a regular polygon.\n\n    Parameters:\n    n (int): The number of sides of the polygon.\n    side_length (float): The length of each side of the polygon.\n\n    Returns:\n    float: The perimeter of the polygon.\n    \"\"\"\n    return n * side_length\n```"
  },
  {
    "id": 190,
    "response": "```python\ndef even_position(lst):\n    return [i for i, x in enumerate(lst) if i % 2 == 0]\n```"
  },
  {
    "id": 191,
    "response": "```python\ndef remove_nest(tup):\n    return tup[1]\n```"
  },
  {
    "id": 192,
    "response": "```python\ndef COUNT_LIST(LST):\n    return [len(i) for i in LST]\n```"
  },
  {
    "id": 193,
    "response": "```python\ndef last_position(lst, n, n2):\n    return lst[-1]\n```"
  },
  {
    "id": 194,
    "response": "```python\ndef match_string(s):\n    return s and s[-1] == 'B' and 'A' in s[:-1]\n```"
  },
  {
    "id": 195,
    "response": "```python\ndef cheap_items(lst, n):\n    \"\"\"\n    Returns the n cheapest items from the given list.\n\n    Args:\n        lst (list): A list of tuples containing item name and price.\n        n (int): The number of cheapest items to return.\n\n    Returns:\n        list: A list of tuples containing the n cheapest items.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])[:n]\n```"
  },
  {
    "id": 196,
    "response": "```python\ndef Return_sum(dct):\n    return sum(dct.values())\n```"
  },
  {
    "id": 197,
    "response": "```python\ndef sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)\n```"
  },
  {
    "id": 198,
    "response": "```python\ndef sum_array(lst):\n    return sum(lst)\n```"
  },
  {
    "id": 199,
    "response": "```python\ndef left_rotate(n, num_bits):\n    return (n << num_bits) | (n >> (32 - num_bits))\n```"
  },
  {
    "id": 200,
    "response": "```python\ndef remove_all_spaces(s):\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 201,
    "response": "```python\ndef test_three_equal(n, n2, n3):\n    return n == n2 and n == n3\n```"
  },
  {
    "id": 202,
    "response": "```python\ndef count_rotation(lst):\n    return lst.index(min(lst)) if lst else 0\n```"
  },
  {
    "id": 203,
    "response": "```python\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt = int(n ** 0.5)\n    return sqrt * sqrt == n\n```"
  },
  {
    "id": 204,
    "response": "```python\ndef is_product_even(lst, n):\n    return all(x % n == 0 for x in lst)\n```"
  },
  {
    "id": 205,
    "response": "```python\ndef max_sum_list(lst):\n    return max(lst)\n```"
  },
  {
    "id": 206,
    "response": "```python\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```"
  },
  {
    "id": 207,
    "response": "```python\ndef first_odd(lst):\n    for i, num in enumerate(lst):\n        if num % 2!= 0:\n            return num\n    return None\n```"
  },
  {
    "id": 208,
    "response": "```python\ndef check_k(tuples, k):\n    return k in tuples\n```"
  },
  {
    "id": 209,
    "response": "```python\ndef Check_smaller(TUP, TUP2):\n    return all(x < i for i, x in enumerate(TUP2) if i < len(TUP))\n```"
  },
  {
    "id": 210,
    "response": "```python\ndef count_repeating_elements(*args):\n    counts = {}\n    for num in args:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return counts\n```"
  },
  {
    "id": 211,
    "response": "```python\ndef check_identical(LST, LST2):\n    return LST == LST2\n```"
  },
  {
    "id": 212,
    "response": "```python\ndef shorten_road(s):\n    return s.replace('RD', 'road')\n```"
  },
  {
    "id": 213,
    "response": "```python\ndef string_length(s):\n    return len(s)\n```"
  },
  {
    "id": 214,
    "response": "```python\ndef rhombus_area(n, n2):\n    return (n * n2) / 2\n```"
  },
  {
    "id": 215,
    "response": "```python\ndef sort_by_dnf(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] == 2 and lst[j] == 1:\n                lst[i], lst[j] = lst[j], lst[i]\n            elif lst[i] == 1 and lst[j] == 0:\n                lst[i], lst[j] = lst[j], lst[i]\n            elif lst[i] == 0 and lst[j] == 2:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n```"
  },
  {
    "id": 216,
    "response": "```python\ndef clear_tuple(TUP):\n    return ()\n```"
  },
  {
    "id": 217,
    "response": "```python\ndef div_of_nums(lst, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n```"
  },
  {
    "id": 218,
    "response": "```python\ndef low_ctr(s):\n    return sum(1 for c in s if c.islower())\n```"
  },
  {
    "id": 219,
    "response": "```python\ndef count_duplicates(lst):\n    return len(set(lst)) - len(lst)\n```"
  },
  {
    "id": 220,
    "response": "```python\ndef check_monthnum_number(n):\n    if n == 20:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 221,
    "response": "```python\ndef merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}\n```"
  },
  {
    "id": 222,
    "response": "```python\ndef pass_validity(s):\n    return len(s) >= 8 and any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s) and any(c.isalpha() for c in s)\n```"
  },
  {
    "id": 223,
    "response": "```python\ndef check_substring(S, S2):\n    return S.startswith(S2)\n```"
  },
  {
    "id": 224,
    "response": "```python\ndef remove_even(lst):\n    return [num for num in lst if num % 2!= 0]\n```"
  },
  {
    "id": 225,
    "response": "```python\ndef access_elements(LST, LST2):\n    return [LST[i] for i in range(len(LST2)) for j in range(len(LST))]\n```"
  },
  {
    "id": 226,
    "response": "```python\ndef Check_Type_of_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        if a == b == c:\n            return \"Equilateral\"\n        elif a == b or a == c or b == c:\n            return \"Isosceles\"\n        else:\n            return \"Scalene\"\n    else:\n        return \"Not a triangle\"\n```"
  },
  {
    "id": 227,
    "response": "```python\ndef sum_column(lst, n):\n    return sum(lst[n])\n```"
  },
  {
    "id": 228,
    "response": "```python\ndef Count_alpha_dig_spl(s):\n    alpha = sum(c.isalpha() for c in s)\n    dig = sum(c.isdigit() for c in s)\n    spl = sum(not c.isalnum() for c in s)\n    return alpha, dig, spl\n```"
  },
  {
    "id": 229,
    "response": "```python\ndef second_frequent(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    if len(sorted_counter) < 2:\n        return None\n    return sorted_counter[1][0]\n```"
  },
  {
    "id": 230,
    "response": "```python\ndef round_up(n, n2):\n    return -(-n // n2) * n2\n```"
  },
  {
    "id": 231,
    "response": "```python\ndef count_pairs(lst, n):\n    \"\"\"\n    Returns the number of pairs of equal elements in the given list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The size of the subarray.\n\n    Returns:\n        int: The number of pairs of equal elements.\n    \"\"\"\n    count = 0\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n]) == 1:\n            count += 1\n    return count\n```"
  },
  {
    "id": 232,
    "response": "```python\ndef extract_max(s):\n    return max(map(int, s.split()))\n```"
  },
  {
    "id": 233,
    "response": "```python\ndef get_key(dictionary):\n    return list(dictionary.keys())\n```"
  },
  {
    "id": 234,
    "response": "```python\ndef Generate_matrix(n):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    dir_index = 0\n    row, col = 0, 0\n    for i in range(1, n * n + 1):\n        matrix[row][col] = i\n        next_row, next_col = row + directions[dir_index][0], col + directions[dir_index][1]\n        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row][next_col] == 0:\n            row, col = next_row, next_col\n        else:\n            dir_index = (dir_index + 1) % 4\n            row, col = row + directions[dir_index][0], col + directions[dir_index][1]\n    return matrix\n```"
  },
  {
    "id": 235,
    "response": "```python\ndef slope(n, x1, y1, x2, y2):\n    \"\"\"\n    Calculate the slope of a line given two points (x1, y1) and (x2, y2).\n\n    Args:\n        n (int): The number of points.\n        x1 (float): The x-coordinate of the first point.\n        y1 (float): The y-coordinate of the first point.\n        x2 (float): The x-coordinate of the second point.\n        y2 (float): The y-coordinate of the second point.\n\n    Returns:\n        float: The slope of the line.\n    \"\"\"\n    if n == 2:\n        if x1 == x2:\n            raise ValueError(\"Vertical line\")\n        return (y2 - y1) / (x2 - x1)\n    else:\n        raise ValueError(\"At least two points are required to calculate the slope\")\n```"
  },
  {
    "id": 236,
    "response": "```python\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += lst[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n```"
  },
  {
    "id": 237,
    "response": "```python\ndef cube_sum(n):\n    return sum(i**3 for i in range(1, n+1) if i % 2!= 0)\n```"
  },
  {
    "id": 238,
    "response": "```python\ndef min_swaps(s, s2):\n    n = len(s)\n    m = len(s2)\n    if n!= m:\n        return -1\n    \n    diff = [0] * (n + 1)\n    for i in range(n):\n        diff[i] = s[i]!= s2[i]\n    \n    res = 0\n    for i in range(n):\n        if diff[i]:\n            res += 1\n            j = i\n            while j < n and diff[j]:\n                j += 1\n            res += j - i - 1\n    \n    return res\n```"
  },
  {
    "id": 239,
    "response": "```python\ndef sort_tuple(lst):\n    return tuple(sorted(lst))\n```"
  },
  {
    "id": 240,
    "response": "```python\ndef check_solution(n, n2, n3):\n    def equation(x):\n        return n*x**2 + n2*x + n3\n\n    def derivative(x):\n        return 2*n*x + n2\n\n    def is_close(x, y, tol=1e-5):\n        return abs(x - y) < tol\n\n    # Initial guess\n    x = -n2 / (2 * n)\n\n    # Newton-Raphson method\n    while True:\n        x_next = x - equation(x) / derivative(x)\n        if is_close(x, x_next):\n            return True\n        x = x_next\n```"
  },
  {
    "id": 241,
    "response": "```python\ndef get_inv_count(lst, n):\n    return lst.count(n) if n in lst else 0\n```"
  },
  {
    "id": 242,
    "response": "```python\ndef get_odd_occurence(lst, n):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2!= 0 and count == n:\n            return num\n    return None\n```"
  },
  {
    "id": 243,
    "response": "```python\ndef nth_super_ugly_number(n, lst):\n    def is_ugly(num):\n        return all(num % i for i in lst)\n\n    def is_super_ugly(num):\n        return all(num % i!= 0 for i in lst)\n\n    def next_ugly(num):\n        for i, x in enumerate(num):\n            if is_ugly(x):\n                return x\n        return num\n\n    def next_super_ugly(num):\n        next_num = next(num)\n        while not is_super_ugly(next_num):\n            next_num = next_ugly(next_num)\n        return next_num\n\n    return next_super_ugly(iter(lst))\n```"
  },
  {
    "id": 244,
    "response": ""
  },
  {
    "id": 245,
    "response": "```python\ndef find_factorials(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    count = 0\n    i = 1\n    while True:\n        if factorial(i) > n:\n            break\n        count += 1\n        i += 1\n    return count\n```"
  },
  {
    "id": 246,
    "response": "```python\ndef Find_Platform(lst, lst2, n):\n    \"\"\"\n    This function calculates the minimum number of platforms required for a railway station.\n    \n    Parameters:\n    lst (list): A list of arrival times of trains\n    lst2 (list): A list of departure times of trains\n    n (int): The number of trains\n    \n    Returns:\n    int: The minimum number of platforms required\n    \"\"\"\n    arrival = [x for x in lst]\n    departure = [x for x in lst2]\n    arrival.sort()\n    departure.sort()\n    i = j = 0\n    platforms = 0\n    max_platforms = 0\n    \n    while i < len(arrival) and j < len(departure):\n        if arrival[i] <= departure[j]:\n            platforms += 1\n            i += 1\n        else:\n            platforms -= 1\n            j += 1\n        max_platforms = max(max_platforms, platforms)\n    \n    return max_platforms\n```"
  },
  {
    "id": 247,
    "response": ""
  },
  {
    "id": 248,
    "response": "```python\ndef area_trapezium(n, n2, n3):\n    return 0.5 * (n + n2) * n3\n```"
  },
  {
    "id": 249,
    "response": "```python\ndef sum_of_divisions(n):\n    return sum(ord(c) for c in str(n))\n```"
  },
  {
    "id": 250,
    "response": "```python\ndef is_triangle_exists(n, n2, n3):\n    return n + n2 > n3 and n + n3 > n2 and n2 + n3 > n\n```"
  },
  {
    "id": 251,
    "response": "```python\ndef sum_of_inverse_divisors(n, n2):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def sum_of_divisors(n):\n        sum_divisors = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    sum_divisors += i\n                else:\n                    sum_divisors += i + n // i\n        return sum_divisors\n\n    def sum_of_inverse_divisors(n):\n        return sum(1 / d for d in sum_of_divisors(n) if d!= n)\n\n    def sum_of_inverse_divisors_n2(n):\n        return sum(1 / d for d in sum_of_divisors(n2) if d!= n2)\n\n    return sum_of_inverse_divisors(n) + sum_of_inverse_divisors_n2(n)\n```"
  },
  {
    "id": 252,
    "response": "```python\ndef remove_negs(lst):\n    return [x for x in lst if x >= 0]\n```"
  },
  {
    "id": 253,
    "response": "```python\ndef sum_of_odd_factors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2!= 0:\n                sum += i\n    return sum\n```"
  },
  {
    "id": 254,
    "response": "```python\ndef raw_heap(lst):\n    def heapify(lst, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and lst[left] > lst[largest]:\n            largest = left\n\n        if right < n and lst[right] > lst[largest]:\n            largest = right\n\n        if largest!= i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n\n    return lst\n```"
  },
  {
    "id": 255,
    "response": "```python\ndef check_even_parity(n):\n    return n % 2 == 0\n```"
  },
  {
    "id": 256,
    "response": "```python\ndef find_min_swaps(lst, n):\n    def cycle_count(cycle):\n        count = 0\n        visited = set()\n        i = 0\n        while i not in visited:\n            visited.add(i)\n            cycle_count += 1\n            i = lst[i]\n        return cycle_count\n\n    def find_cyclic(arr):\n        for i in range(len(arr)):\n            if arr[i]!= i + 1:\n                return i\n        return -1\n\n    def min_swaps(arr):\n        n = len(arr)\n        cycles = [cycle_count(arr[i:]) + 1 for i in range(n)]\n        cycle_start = find_cyclic(arr)\n        if cycle_start == -1:\n            return 0\n        return sum(cycles) - cycles[cycle_start]\n\n    return min_swaps(lst)\n```"
  },
  {
    "id": 257,
    "response": "```python\ndef listify_list(lst):\n    return list(map(str, lst))\n```"
  },
  {
    "id": 258,
    "response": "```python\ndef count_list(lst):\n    return [i**2 for i in range(len(lst))]\n```"
  },
  {
    "id": 259,
    "response": "```python\ndef sub_lists(lst):\n    def sub_list(n):\n        if n == 0:\n            return [[]]\n        else:\n            result = []\n            for i in range(len(lst)):\n                for sub in sub_lists(lst[i+1:]):\n                    result.append([lst[i]] + sub)\n            return result\n    return sub_list(len(lst))\n```"
  },
  {
    "id": 260,
    "response": "```python\ndef check_alphanumeric(s):\n    return s and s[-1].isalnum()\n```"
  },
  {
    "id": 261,
    "response": "```python\nanagram_lambda = lambda lst, s: [i for i in lst if sorted(i) == sorted(s)]\n```"
  },
  {
    "id": 262,
    "response": "```python\ndef n_common_words(s, n):\n    words = s.split()\n    syllable_counts = {}\n    for word in words:\n        word = word.lower()\n        syllable_count = 0\n        vowels = 'aeiouy'\n        if word[0] in vowels:\n            syllable_count += 1\n        for index in range(1, len(word)):\n            if word[index] in vowels and (word[index - 1] not in vowels):\n                syllable_count += 1\n        if word.endswith('e'):\n            syllable_count -= 1\n        if word.endswith('le'):\n            syllable_count -= 1\n        if word.endswith('ly'):\n            syllable_count -= 1\n        if word.endswith('es'):\n            syllable_count -= 1\n        if word.endswith('s'):\n            syllable_count -= 1\n        syllable_counts[word] = syllable_count\n    return max(syllable_counts, key=syllable_counts.get, default=None)\n```"
  },
  {
    "id": 263,
    "response": "```python\ndef Find_longest_ConseQ_Subseq(lst, n):\n    def is_subsequence(s1, s2):\n        i = j = 0\n        while i < len(s1) and j < len(s2):\n            if s1[i] == s2[j]:\n                i += 1\n            j += 1\n        return i == len(s1)\n\n    def longest_subseq(s):\n        max_len = 0\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                subseq = s[i:j]\n                if is_subsequence(subseq, s):\n                    max_len = max(max_len, len(subseq))\n        return max_len\n\n    return longest_subseq(lst)\n```"
  },
  {
    "id": 264,
    "response": "```python\npalindrome_lambda = lambda lst: list(filter(lambda s: s == s[::-1], lst))\n```"
  },
  {
    "id": 265,
    "response": "```python\ndef ntimes_list(lst, n):\n    return list(map(lambda x: x * n, lst))\n```"
  },
  {
    "id": 266,
    "response": "```python\ndef check_monthnumb(s):\n    months_with_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    months_with_30_days = ['April', 'June', 'September', 'November']\n    months_with_28_days = ['February']\n\n    s = s.capitalize()\n    if s in months_with_31_days:\n        return True\n    elif s in months_with_30_days:\n        return False\n    elif s == 'February':\n        if (year := int(input(\"Enter the year: \"))) % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False\n```"
  },
  {
    "id": 267,
    "response": "```python\ndef min_num(lst, n):\n    return min(x for x in lst if x % 2!= 0) + 1 if sum(lst) % 2 else 0\n```"
  },
  {
    "id": 268,
    "response": "```python\ndef length_of_last_word(s):\n    words = s.split()\n    if not words:\n        return 0\n    last_word = words[-1]\n    return len(last_word)\n```"
  },
  {
    "id": 269,
    "response": "```python\ndef remove_list_range(lst, n, n2):\n    return [i for i in lst if n < i < n2]\n```"
  },
  {
    "id": 270,
    "response": "```python\nsum_positivenum = lambda lst: sum(filter(lambda x: x > 0, lst))\n```"
  },
  {
    "id": 271,
    "response": "```python\ndef are_rotations(s, s2):\n    if len(s)!= len(s2):\n        return False\n    return s in s2 + s2\n```"
  },
  {
    "id": 272,
    "response": "```python\ndef Check_subset(lst, lst2):\n    return all(x in lst2 for x in lst)\n```"
  },
  {
    "id": 273,
    "response": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```"
  },
  {
    "id": 274,
    "response": "```python\ndef Check_Concat(S, S2):\n    return S + S2\n```"
  },
  {
    "id": 275,
    "response": "```python\ndef min_difference(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    min_diff = float('inf')\n    for i in range(1, len(lst)):\n        min_diff = min(min_diff, lst[i] - lst[i-1])\n    return min_diff\n```"
  },
  {
    "id": 276,
    "response": "```python\ndef lcm(n, n2):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return abs(n*n2) // gcd(n, n2)\n```"
  },
  {
    "id": 277,
    "response": "```python\ndef sort_string(s):\n    return ''.join(sorted(s))\n```"
  },
  {
    "id": 278,
    "response": "```python\ndef check_tuples(tup, k):\n    return len(tup) == k\n```"
  },
  {
    "id": 279,
    "response": "```python\nimport re\n\ndef text_match(s):\n    pattern = r'^.*A.*$|.*B$'\n    return bool(re.match(pattern, s))\n```"
  },
  {
    "id": 280,
    "response": "```python\ndef check_solution(n, n2, n3):\n    \"\"\"\n    Returns the number of solutions to the square equation n^2 + n2^2 + n3^2 = 1000.\n    \n    Parameters:\n    n (int): The value of n in the equation.\n    n2 (int): The value of n^2 in the equation.\n    n3 (int): The value of n^3 in the equation.\n    \n    Returns:\n    int: The number of solutions to the equation.\n    \"\"\"\n    return 1 if n2 <= 1000 and n3 <= 1000 and n**2 + n2**2 + n3**2 == 1000 else 0\n```"
  },
  {
    "id": 281,
    "response": "```python\ndef sum_even_odd(lst):\n    even_count = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_sum += num\n    if even_count == odd_sum:\n        return even_count\n    else:\n        return None\n```"
  },
  {
    "id": 282,
    "response": "```python\ndef parallelogram_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
  },
  {
    "id": 283,
    "response": "```python\ndef div_of_nums(lst, m, n):\n    return list(map(lambda x: x / n, filter(lambda x: x % m == 0, lst)))\n```"
  },
  {
    "id": 284,
    "response": "```python\ndef All_Bits_Set_in_The_Given_RANGE(N, N2, N3):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    return count_set_bits(N) == count_set_bits(N2) == count_set_bits(N3)\n```"
  },
  {
    "id": 285,
    "response": "```python\ndef is_isomorphic(s, t):\n    if len(s)!= len(t):\n        return False\n\n    s_to_t_map = {}\n    t_to_s_map = {}\n\n    for char_s, char_t in zip(s, t):\n        if char_s in s_to_t_map and s_to_t_map[char_s]!= char_t:\n            return False\n        if char_t in t_to_s_map and t_to_s_map[char_t]!= char_s:\n            return False\n        s_to_t_map[char_s] = char_t\n        t_to_s_map[char_t] = char_s\n\n    return True\n```"
  },
  {
    "id": 286,
    "response": "```python\ndef sum_num(tup):\n    return sum(tup) / len(tup)\n```"
  },
  {
    "id": 287,
    "response": "```python\ndef is_odd(n):\n    return (n & 1)!= 0\n```"
  },
  {
    "id": 288,
    "response": "```python\ndef subtract_elements(TUP, TUP2):\n    return tuple(a - b for a, b in zip(TUP, TUP2))\n```"
  },
  {
    "id": 289,
    "response": "```python\ndef reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]\n```"
  },
  {
    "id": 290,
    "response": "```python\ndef find_extra(LST, LST2, N):\n    i = 0\n    j = 0\n    extra = []\n    for num in LST:\n        if num not in LST2:\n            extra.append(num)\n        else:\n            while LST2[j]!= num:\n                j += 1\n            j += 1\n    return extra\n```"
  },
  {
    "id": 291,
    "response": "```python\ndef same_length(n, n2):\n    return len(str(abs(n))) == len(str(abs(n2)))\n```"
  },
  {
    "id": 292,
    "response": "```python\ndef remove_spaces(s):\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 293,
    "response": "```python\ndef extract_last(lst):\n    return [sublist[-1] for sublist in lst]\n```"
  },
  {
    "id": 294,
    "response": "```python\ndef float_to_tuple(s):\n    return tuple(map(float, s.split()))\n```"
  },
  {
    "id": 295,
    "response": "```python\ndef max_sum_subseq(lst):\n    if not lst:\n        return 0\n    max_sum = current_sum = lst[0]\n    for num in lst[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
  },
  {
    "id": 296,
    "response": "```python\ndef sort_list_last(lst):\n    return lst[::-1]\n```"
  },
  {
    "id": 297,
    "response": "```python\ndef is_word_present(sentence, word):\n    return word in sentence\n```"
  },
  {
    "id": 298,
    "response": "```python\ndef extract_elements(lst, n):\n    return lst[:n]\n```"
  },
  {
    "id": 299,
    "response": "```python\ndef can_pick_corner(lst, n):\n    return len(lst) == n * 4 and all(x in lst for x in [1, 2, 3, 4])\n```"
  },
  {
    "id": 300,
    "response": "```python\ndef match_num(s, num):\n    return s.startswith(str(num))\n```"
  },
  {
    "id": 301,
    "response": "```python\ndef num_comm_div(n, n2):\n    if n2 == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return n / n2\n```"
  },
  {
    "id": 302,
    "response": "```python\ndef find_remaining_numbers(n, n2):\n    return n, n2\n```"
  },
  {
    "id": 303,
    "response": "```python\ndef Add_Conscript_nums(lst):\n    return lst + [0]\n```"
  },
  {
    "id": 304,
    "response": "```python\ndef sum_of_series(n):\n    return sum(i**3 for i in range(1, n+1))\n```"
  },
  {
    "id": 305,
    "response": "```python\ndef re_order(lst):\n    return [x for x in lst[:-1] if x!= 0] + [lst[-1]]\n```"
  },
  {
    "id": 306,
    "response": "```python\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient (n choose k).\n\n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The permutation coefficient (n choose k).\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers.\")\n    if k > n:\n        raise ValueError(\"k cannot be greater than n.\")\n    if k < 0 or n < 0:\n        raise ValueError(\"Both n and k must be non-negative.\")\n\n    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    return factorial(n) // factorial(k) // factorial(n - k)\n```"
  },
  {
    "id": 307,
    "response": "```python\ndef remove_words(lst, lst2):\n    return [word for word in lst if word not in lst2]\n```"
  },
  {
    "id": 308,
    "response": "```python\ndef same_order(lst, lst2):\n    return lst == lst2\n```"
  },
  {
    "id": 309,
    "response": "```python\ndef average_odd(n):\n    odd_numbers = [i for i in range(1, n+1) if i % 2!= 0]\n    return sum(odd_numbers) / len(odd_numbers)\n```"
  },
  {
    "id": 310,
    "response": "```python\ndef no_of_subsequences(lst, k):\n    n = len(lst)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if lst[j] * lst[i] < k:\n                dp[i] += dp[j]\n    return dp[n]\n```"
  },
  {
    "id": 311,
    "response": "```python\ndef find_min_sum(n):\n    def min_sum_of_multiples(n):\n        def sum_of_multiples(k):\n            return k * (k + 1) * (2 * k + 1) // 6\n\n        min_sum = float('inf')\n        for k in range(1, n + 1):\n            total = sum_of_multiples(k)\n            min_sum = min(min_sum, total)\n        return min_sum\n\n    return min_sum_of_multiples(n)\n```"
  },
  {
    "id": 312,
    "response": "```python\ndef count_element_freq(tup):\n    freq = {}\n    for elem in tup:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq\n```"
  },
  {
    "id": 313,
    "response": "```python\ndef add_str(tup, s):\n    return [x + s for x in tup]\n```"
  },
  {
    "id": 314,
    "response": "```python\ndef sum_elements(tup):\n    return sum(tup)\n```"
  },
  {
    "id": 315,
    "response": "```python\ndef modular_sum(lst, n, n2):\n    def is_subset(lst, n, n2, sum, current_sum=0):\n        if sum == n2:\n            return True\n        if sum > n2:\n            return False\n        for i in range(len(lst)):\n            if lst[i] % n == 0 and is_subset(lst[i+1:], n, n2, current_sum + lst[i], current_sum):\n                return True\n        return False\n\n    return is_subset(lst, n, n2, 0)\n```"
  },
  {
    "id": 316,
    "response": "```python\ndef radix_sort(lst):\n    RADIX = 10\n    placement = 1\n    max_digit = max(lst)\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in lst:\n            tmp = int((i / placement) % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                lst[a] = i\n                a += 1\n        placement *= RADIX\n    return lst\n```"
  },
  {
    "id": 317,
    "response": "```python\ndef largest_pos(lst):\n    return max(lst)\n```"
  },
  {
    "id": 318,
    "response": "```python\nimport math\n\ndef sqrt_root(n):\n    return math.sqrt(n)\n```"
  },
  {
    "id": 319,
    "response": "```python\ndef volume_tetrahedron(n):\n    \"\"\"\n    Calculate the volume of a tetrahedron.\n\n    Parameters:\n    n (float): The side length of the tetrahedron.\n\n    Returns:\n    float: The volume of the tetrahedron.\n    \"\"\"\n    import math\n    return (math.sqrt(2) / 12) * (n ** 3)\n```"
  },
  {
    "id": 320,
    "response": "```python\ndef get_lcm(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    lcm = lst[0]\n    for num in lst[1:]:\n        lcm = lcm * num // gcd(lcm, num)\n    return lcm\n```"
  },
  {
    "id": 321,
    "response": "```python\ndef Check_isosceles(n, n2, n3):\n    if n == n2 or n == n3 or n2 == n3:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 322,
    "response": "```python\ndef longest_bitonic(lst):\n    n = len(lst)\n    if n <= 2:\n        return n\n\n    def is_bitonic(i):\n        return lst[i] >= lst[i-1] and lst[i] >= lst[i+1]\n\n    def is_increasing(i):\n        return all(lst[i] <= lst[j] for j in range(i+1, n))\n\n    def is_decreasing(i):\n        return all(lst[i] >= lst[j] for j in range(i-1, -1, -1))\n\n    max_length = 1\n    for i in range(1, n-1):\n        if is_bitonic(i) and (is_increasing(i-1) or is_decreasing(i+1)):\n            max_length = max(max_length, i+1)\n\n    return max_length\n```"
  },
  {
    "id": 323,
    "response": "```python\ndef check_string(s):\n    def lambda_func(c):\n        return (ord(c) >= 65 and ord(c) <= 90) or (ord(c) >= 97 and ord(c) <= 122) or (ord(c) >= 48 and ord(c) <= 57)\n\n    def check_length(s, length):\n        return s.__len__() == length\n\n    def check_string(s):\n        return all(lambda_func(c) for c in s) and check_length(s, len(s))\n\n    return check_string\n```"
  },
  {
    "id": 324,
    "response": "```python\ndef max_sum_increasing_subsequence(lst):\n    n = len(lst)\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            if lst[j] > lst[i]:\n                dp[i][j] = max(dp[i][j-1] + lst[j], dp[i][j-1])\n            else:\n                dp[i][j] = dp[i][j-1]\n\n    return dp[-1][-1]\n```"
  },
  {
    "id": 325,
    "response": "```python\ndef parallel_lines(line1, line2):\n    \"\"\"\n    Checks if two lines are parallel.\n\n    Args:\n        line1 (list): The first line represented as a list of two points.\n        line2 (list): The second line represented as a list of two points.\n\n    Returns:\n        bool: True if the lines are parallel, False otherwise.\n    \"\"\"\n    # Calculate the slope of the first line\n    x1, y1 = line1\n    x2, y2 = line1\n    x3, y3 = line2\n    x4, y4 = line2\n\n    # Calculate the slopes of the two lines\n    slope1 = (y2 - y1) * (x3 - x4) - (x2 - x1) * (y3 - y4)\n    slope2 = (y1 - y2) * (x3 - x4) - (x1 - x2) * (y3 - y4)\n\n    # Check if the slopes are equal (i.e., the lines are parallel)\n    return slope1 == slope2\n```"
  },
  {
    "id": 326,
    "response": "```python\ndef capitalize_first_last_letters(s):\n    return ''.join(word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word for word in s.split())\n```"
  },
  {
    "id": 327,
    "response": "```python\ndef get_pairs_count(lst, n, n2):\n    count = 0\n    hash_table = {}\n    \n    for i in range(len(lst)):\n        diff = n - lst[i]\n        if diff in hash_table:\n            count += hash_table[diff]\n        hash_table[lst[i]] = hash_table.get(lst[i], 0) + 1\n    \n    return count\n```"
  },
  {
    "id": 328,
    "response": "```python\ndef min_length(lst):\n    return min(len(x) for x in lst)\n```"
  },
  {
    "id": 329,
    "response": "```python\ndef jacobsthal_lucas(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```"
  },
  {
    "id": 330,
    "response": "```python\ndef Negative_count(lst):\n    return sum(1 for num in lst if num < 0) / len(lst)\n```"
  },
  {
    "id": 331,
    "response": "```python\ndef min_coins(lst, n, n2):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for coin in lst:\n            if i >= coin and dp[i - coin]!= float('inf'):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n\n    return dp[n] if dp[n]!= float('inf') else -1\n```"
  },
  {
    "id": 332,
    "response": "```python\ndef Check_permutation(S, S2):\n    if len(S)!= len(S2):\n        return False\n    return sorted(S) == sorted(S2)\n```"
  },
  {
    "id": 333,
    "response": "```python\ndef remove_datatype(tup, param):\n    return tuple(x for x in tup if type(x)!= param)\n```"
  },
  {
    "id": 334,
    "response": "```python\ndef search_literal(S, S2):\n    try:\n        return S.index(S2)\n    except ValueError:\n        return -1\n```"
  },
  {
    "id": 335,
    "response": "```python\nimport math\n\ndef top_bottom_surface_area(n):\n    \"\"\"\n    Calculate the surface area of the top or bottom of a cylinder.\n\n    Args:\n    n (float): The radius of the cylinder.\n\n    Returns:\n    float: The surface area of the top or bottom of the cylinder.\n    \"\"\"\n    return 2 * math.pi * n ** 2\n```"
  },
  {
    "id": 336,
    "response": "```python\ndef nth_items(lst, n):\n    return lst[n-1]\n```"
  },
  {
    "id": 337,
    "response": "```python\ndef first_repeated_word(s):\n    word_count = {}\n    for word in s.split():\n        if word in word_count:\n            return word\n        else:\n            word_count[word] = 1\n    return None\n```"
  },
  {
    "id": 338,
    "response": "```python\ndef string_list_to_tuple(s):\n    return tuple(s)\n```"
  },
  {
    "id": 339,
    "response": "```python\ndef basesnum_corasspondingnum(lst, lst2):\n    return list(map(lambda x, y: x * y, lst, lst2))\n```"
  },
  {
    "id": 340,
    "response": "```python\ndef find_diff(lst):\n    if len(lst) == 1:\n        return 0\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    return max(freq.values()) - min(freq.values())\n```"
  },
  {
    "id": 341,
    "response": "```python\ndef check_abundant(n):\n    return sum(i for i in range(1, n) if n % i == 0) > n\n```"
  },
  {
    "id": 342,
    "response": "```python\ndef fill_spaces(s):\n    return s.replace(' ', '#').replace(',', '#').replace('.', '#').replace('#','')\n```"
  },
  {
    "id": 343,
    "response": "```python\ndef count_digits(n, n2):\n    return len(str(n) + str(n2))\n```"
  },
  {
    "id": 344,
    "response": "```python\ndef flatten_tuple(lst):\n    return [item for sublist in lst for item in sublist]\n```"
  },
  {
    "id": 345,
    "response": "```python\ndef toggle_f_and_l_bits(n):\n    return (n ^ ((n >> 31) << 31)) & 0x7fffffff\n```"
  },
  {
    "id": 346,
    "response": "```python\ndef last_occurence_char(S, S2):\n    return S.rfind(S2)\n```"
  },
  {
    "id": 347,
    "response": "```python\ndef total_hamming_distance(n):\n    def hamming_distance(x, y):\n        return bin(x ^ y).count('1')\n\n    return sum(hamming_distance(i, i + 1) for i in range(n))\n```"
  },
  {
    "id": 348,
    "response": "```python\ndef longest_increasing_subsequence(lst):\n    if not lst:\n        return 0\n\n    dp = [1] * len(lst)\n\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n```"
  },
  {
    "id": 349,
    "response": "```python\ndef odd_num_sum(n):\n    return sum(i for i in range(n, 0, -2) if i % 2!= 0)\n```"
  },
  {
    "id": 350,
    "response": "```python\ndef Find_Max(lst, n, n2):\n    if n2 == 0:\n        return lst[n-1]\n    else:\n        return max(Find_Max(lst, n, n2-1), lst[n-1])\n```"
  },
  {
    "id": 351,
    "response": "```python\ndef extract_column(lst, n):\n    return [sublist[n] for sublist in lst]\n```"
  },
  {
    "id": 352,
    "response": "```python\ndef Seq_linear(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n```"
  },
  {
    "id": 353,
    "response": "```python\ndef tuple_to_float(tup):\n    return float(tup)\n```"
  },
  {
    "id": 354,
    "response": "```python\ndef find_odd(lst):\n    return [i for i in lst if i % 2!= 0]\n```"
  },
  {
    "id": 355,
    "response": "```python\ndef difference(n):\n    return sum(i**3 for i in range(1, n+1)) - sum(range(1, n+1))\n```"
  },
  {
    "id": 356,
    "response": "```python\ndef find_odd_pair(lst, n):\n    result = []\n    for i in range(0, n, 2):\n        result.append((lst[i], lst[i+1]))\n    return result\n```"
  },
  {
    "id": 357,
    "response": "```python\ndef toggle_string(s):\n    return s.swapcase()\n```"
  },
  {
    "id": 358,
    "response": "```python\ndef digit_distance(n, n2):\n    return abs(n - n2)\n```"
  },
  {
    "id": 359,
    "response": "```python\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum = max(lst[i], current_sum + lst[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n```"
  },
  {
    "id": 360,
    "response": "```python\ndef union_elements(tup1, tup2):\n    return tuple(set(tup1) | set(tup2))\n```"
  },
  {
    "id": 361,
    "response": "```python\ndef assign_elements(lst):\n    if len(lst) % 2!= 0:\n        raise ValueError(\"Input list must have an even number of elements\")\n    for i in range(0, len(lst), 2):\n        pair = lst[i:i+2]\n        if len(pair)!= 2:\n            raise ValueError(\"Input list must have pairs of elements\")\n        for j in range(len(lst)):\n            if j!= i and j!= i+1 and lst[j] == pair[0]:\n                lst[j] = pair[1]\n            elif j!= i and j!= i+1 and lst[j] == pair[1]:\n                lst[j] = pair[0]\n    return lst\n```"
  },
  {
    "id": 362,
    "response": "```python\ndef find_max_length(lst):\n    return max(len(sublist) for sublist in lst)\n```"
  },
  {
    "id": 363,
    "response": "```python\ndef extract_values(s):\n    \"\"\"\n    Extracts the value within the first quote of a string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The extracted value.\n    \"\"\"\n    start = s.find('\"')\n    if start!= -1:\n        end = s.find('\"', start + 1)\n        if end!= -1:\n            return s[start + 1:end]\n    return None\n```"
  },
  {
    "id": 364,
    "response": "```python\ndef count_pairs(lst):\n    n = len(lst)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i]!= lst[j]:\n                count += 1\n    return count\n```"
  },
  {
    "id": 365,
    "response": "```python\ndef split_string(s):\n    return ''.join(filter(str.isalpha, s))\n```"
  },
  {
    "id": 366,
    "response": "```python\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(abs(n)))\n```"
  },
  {
    "id": 367,
    "response": "```python\ndef is_sorted(lst):\n    return lst == sorted(lst)\n```"
  },
  {
    "id": 368,
    "response": "```python\ndef empty_list(n):\n    return [{} for _ in range(n)]\n```"
  },
  {
    "id": 369,
    "response": "```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n```"
  },
  {
    "id": 370,
    "response": "```python\ndef remove_words(lst, lst2):\n    return [word for word in lst if word not in lst2]\n```"
  },
  {
    "id": 371,
    "response": "```python\ndef max_sum_pair_diff_ssthan_k(lst, n, k):\n    \"\"\"\n    This function calculates the maximum potential sum of isolated joints for an integer and K-number given array.\n\n    Parameters:\n    lst (list): The input list of integers.\n    n (int): The number of elements in the list.\n    k (int): The K-number.\n\n    Returns:\n    int: The maximum potential sum of isolated joints.\n    \"\"\"\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n    \n    # Initialize the sum of the k smallest numbers\n    sum_k = sum(lst[:k])\n    \n    # Initialize the maximum sum\n    max_sum = sum_k\n    \n    # Iterate over the rest of the list\n    for i in range(k, n):\n        # Update the sum by subtracting the smallest number and adding the next number\n        sum_k = sum_k - lst[i-k] + lst[i]\n        \n        # Update the maximum sum if necessary\n        max_sum = max(max_sum, sum_k)\n    \n    return max_sum\n```"
  },
  {
    "id": 372,
    "response": "```python\ndef two_unique_nums(lst):\n    return [x for i, x in enumerate(lst) if lst.count(x) == 1]\n```"
  },
  {
    "id": 373,
    "response": "```python\ndef unique_product(lst):\n    return [i for i in set(lst) if lst.count(i) == 1]\n```"
  },
  {
    "id": 374,
    "response": "```python\ndef surface_area_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * (r + h)\n```"
  },
  {
    "id": 375,
    "response": "```python\ndef count_no(n, *args):\n    count = 0\n    for arg in args:\n        if arg!= n:\n            count += 1\n    return count\n```"
  },
  {
    "id": 376,
    "response": "```python\ndef is_sub_array(lst, lst2, n, n2):\n    if n2 > len(lst):\n        return False\n    for i in range(len(lst) - n + 1):\n        if lst[i:i+n] == lst2:\n            return True\n    return False\n```"
  },
  {
    "id": 377,
    "response": "```python\ndef last_digit_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    last_digit = 0\n    for i in range(1, n+1):\n        last_digit = (last_digit * i) % 10\n    return last_digit\n```"
  },
  {
    "id": 378,
    "response": "```python\ndef interleave_lists(LST, LST2, LST3):\n    result = []\n    min_len = min(len(LST), len(LST2), len(LST3))\n    for i in range(min_len):\n        result.append(LST[i])\n        result.append(LST2[i])\n        result.append(LST3[i])\n    return result\n```"
  },
  {
    "id": 379,
    "response": "```python\ndef find_dissimilar(tup, tup2):\n    return tuple(x for x in set(tup) if x not in set(tup2))\n```"
  },
  {
    "id": 380,
    "response": "```python\ndef extract_even(tup):\n    return tuple(x for x in tup if x % 2 == 0)\n```"
  },
  {
    "id": 381,
    "response": "```python\ndef surface_area(n, n2):\n    \"\"\"\n    Calculates the surface area of a square pyramid.\n\n    Parameters:\n    n (float): The length of the side of the square base.\n    n2 (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    return 5 * (n * n + n2 * n)\n```"
  },
  {
    "id": 382,
    "response": "```python\ndef is_empty(dct):\n    return len(dct) == 0\n```"
  },
  {
    "id": 383,
    "response": "```python\ndef catalan_number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        catalan = [0 for _ in range(n + 1)]\n        catalan[0] = catalan[1] = 1\n        for i in range(2, n + 1):\n            catalan[i] = 0\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[n]\n```"
  },
  {
    "id": 384,
    "response": ""
  },
  {
    "id": 385,
    "response": "```python\ndef expensive_items(lst, n):\n    \"\"\"\n    Returns the n most expensive items from a list of items.\n\n    Args:\n        lst (list): A list of tuples containing item names and prices.\n        n (int): The number of expensive items to return.\n\n    Returns:\n        list: A list of tuples containing the n most expensive items.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1], reverse=True)[:n]\n```"
  },
  {
    "id": 386,
    "response": "```python\ndef split_arr(lst, n, n2):\n    return lst[n:] + lst[:n]\n```"
  },
  {
    "id": 387,
    "response": "```python\ndef list_to_tuple(lst):\n    return tuple(lst)\n```"
  },
  {
    "id": 388,
    "response": "```python\ndef big_diff(lst):\n    return max(lst) - min(lst)\n```"
  },
  {
    "id": 389,
    "response": "```python\ndef perfect_squares(n, n2):\n    def is_perfect_square(num):\n        return num >= 0 and num ** 0.5 % 1 == 0\n\n    return [i for i in range(n, n2 + 1) if is_perfect_square(i)]\n```"
  },
  {
    "id": 390,
    "response": "```python\ndef polar_to_rect(n, n2):\n    r = (n**2 + n2**2)**0.5\n    theta = 2 * 3.14159265359 * n2 / r\n    x = r * n * 0.9999999999999999\n    y = r * n * -0.9999999999999999\n    return x, y\n```"
  },
  {
    "id": 391,
    "response": "```python\ndef swap_list(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
  },
  {
    "id": 392,
    "response": "```python\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the production of bipolar coefficients.\n\n    Args:\n        n (int): The number of bipolar coefficients.\n\n    Returns:\n        int: The sum of the production of bipolar coefficients.\n    \"\"\"\n    return 2 ** n - 1\n```"
  },
  {
    "id": 393,
    "response": "```python\ndef removezero_ip(s):\n    parts = s.split('.')\n    return '.'.join(part.lstrip('0') or '0' for part in parts)\n```"
  },
  {
    "id": 394,
    "response": "```python\ndef diff_even_odd(lst):\n    first_equal = None\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            first_equal = num\n        odd_count += 1\n    return first_equal - odd_count\n```"
  },
  {
    "id": 395,
    "response": "```python\ndef min_swaps(s, s2):\n    m = len(s)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n```"
  },
  {
    "id": 396,
    "response": "```python\ndef tuple_size(tup):\n    return len(tup)\n```"
  },
  {
    "id": 397,
    "response": "```python\ndef find_kth(LST, LST2, N, N2, N3, k):\n    \"\"\"\n    Find the kth element in two sorted arrays.\n\n    Args:\n        LST (list): The first sorted list.\n        LST2 (list): The second sorted list.\n        N (int): The length of the first list.\n        N2 (int): The length of the second list.\n        N3 (int): The length of the third list.\n        k (int): The target index.\n\n    Returns:\n        int: The kth element in the combined list.\n    \"\"\"\n    # Merge the two sorted lists into one sorted list\n    merged = sorted(LST + LST2)\n    \n    # Check if k is within the bounds of the merged list\n    if k < 1 or k > N + N2:\n        raise ValueError(\"k is out of range\")\n    \n    # Return the kth element\n    return merged[k - 1]\n```"
  },
  {
    "id": 398,
    "response": "```python\ndef is_armstrong(n):\n    return n == sum(int(digit) ** len(str(n)) for digit in str(n))\n```"
  },
  {
    "id": 399,
    "response": "```python\ndef Sum_Average(n):\n    \"\"\"\n    This function calculates the sum of the first n natural numbers and their average.\n\n    Args:\n        n (int): The number of natural numbers to sum.\n\n    Returns:\n        tuple: A tuple containing the sum of the first n natural numbers and their average.\n    \"\"\"\n    sum_of_numbers = n * (n + 1) // 2\n    average = sum_of_numbers / n\n    return sum_of_numbers, average\n```"
  },
  {
    "id": 400,
    "response": "```python\ndef is_even(n):\n    return (n & 1) == 0\n```"
  }
]