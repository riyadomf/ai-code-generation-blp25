[
  {
    "id": 1,
    "response": "```python\nfrom functools import cmp_to_key\r\n\r\nclass Pair:\r\n    def __init__(self, a, b):\r\n        self.first = a\r\n        self.second = b\r\n\r\ndef max_chain_length(lst, n):\r\n    lst.sort(key = lambda x: x.first)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if lst[j].second <= lst[i].first:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp) if dp else 0\n```"
  },
  {
    "id": 2,
    "response": "```python\ndef first_repeated_char(s):\r\n    char_set = set()\r\n    for char in s:\r\n        if char in char_set:\r\n            return char\r\n        char_set.add(char)\r\n    return \"None\"\n```"
  },
  {
    "id": 3,
    "response": "```python\ndef get_ludic(n):\r\n    if n == 0:\r\n        return []\r\n    if n == 1:\r\n        return [1]\r\n    a = [i for i in range(1, n+1)]\r\n    a[0] = 1\r\n    i = 2\r\n    while i <= n:\r\n        j = 2\r\n        while j < len(a):\r\n            if a[j-1] == 0:\r\n                j += 1\r\n            elif a[j-1] == 1:\r\n                a[j-1] = 0\r\n            else:\r\n                if a[j-1] % i == 0:\r\n                    a[j-1] = 0\r\n            j += 1\r\n        i += 1\r\n    return [x for x in a if x != 0]\n```"
  },
  {
    "id": 4,
    "response": "```python\ndef reverse_words(s):\r\n  s = s.split(\" \")\r\n  s.reverse()\r\n  return \" \".join(s)\n```"
  },
  {
    "id": 5,
    "response": "```python\ndef prime_num(n):\r\n    if (n <= 1):\r\n        return False\r\n    if (n == 2):\r\n        return True\r\n    if (n % 2 == 0):\r\n        return False\r\n    for i in range(3, int(n**0.5)+1, 2):\r\n        if (n % i == 0):\r\n            return False\r\n    return True\n```"
  },
  {
    "id": 6,
    "response": "```python\nimport math\r\ndef radian_degree(n):\r\n    return math.radians(n)\n```"
  },
  {
    "id": 7,
    "response": "```python\nimport re\r\ndef find_literals(s, s2):\r\n  match = re.search(s2, s)\r\n  if match:\r\n    return (s2, match.start(), match.end())\r\n  else:\r\n    return (s2, -1, -1)\n```"
  },
  {
    "id": 8,
    "response": "```python\ndef bell_Number(n):\r\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\r\n    bell[0][0] = 1\r\n    for i in range(1, n + 1):\r\n        bell[i][0] = bell[i - 1][i - 1]\r\n        for j in range(1, i + 1):\r\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\r\n    return bell[n][0]\n```"
  },
  {
    "id": 9,
    "response": "```python\ndef floor_Min(n, n2, n3):\r\n  if (n < n2 and n < n3):\r\n    return n\r\n  elif (n2 < n and n2 < n3):\r\n    return n2\r\n  else:\r\n    return n3\n```"
  },
  {
    "id": 10,
    "response": "```python\ndef remove_kth_element(lst, n):\r\n    lst.pop(n)\r\n    return lst\n```"
  },
  {
    "id": 11,
    "response": "```python\ndef max_of_nth(lst, n):\r\n  return max(row[n] for row in lst)\n```"
  },
  {
    "id": 12,
    "response": "```python\ndef merge(lst):\r\n  result = []\r\n  for i in range(len(lst[0])):\r\n    temp = []\r\n    for j in range(len(lst)):\r\n      temp.append(lst[j][i])\r\n    result.append(temp)\r\n  return result\n```"
  },
  {
    "id": 13,
    "response": "```python\ndef maximum_value(lst):\r\n  res = []\r\n  for i in range(len(lst)):\r\n    res.append((lst[i][0], max(lst[i][1])))\r\n  return res\n```"
  },
  {
    "id": 14,
    "response": "```python\ndef cummulative_sum(lst):\r\n    total = 0\r\n    for i in lst:\r\n        total = total + sum(i)\r\n    return total\n```"
  },
  {
    "id": 15,
    "response": "```python\ndef average_tuple(tup):\r\n  result = [] \r\n  for i in range(len(tup)):\r\n    avg = sum(tup[i]) / len(tup[i])\r\n    result.append(avg)\r\n  return result\n```"
  },
  {
    "id": 16,
    "response": "```python\ndef tuple_modulo(tup, tup2):\r\n    result = []\r\n    for i in range(len(tup)):\r\n        result.append(tup[i] % tup2[i])\r\n    return tuple(result)\n```"
  },
  {
    "id": 17,
    "response": "```python\ndef min_Jumps(n, n2, n3):\r\n  if n == 0:\r\n    return 0\r\n  if n2 == 0:\r\n    return 0\r\n  if n3 == 0:\r\n    return 0\r\n  if n3 >= n2:\r\n    return (n3 - n2) / n2\r\n  if n3 < n2:\r\n    return (n2 - n3) / n3\n```"
  },
  {
    "id": 18,
    "response": "```python\ndef div_list(lst, lst2):\r\n  return [float(a)/float(b) for a,b in zip(lst, lst2)]\n```"
  },
  {
    "id": 19,
    "response": "```python\ndef move_num(s):\r\n    import re\r\n    res = re.findall(r'\\d+', s)\r\n    res1 = re.sub(r'\\d+', '', s)\r\n    return res1 + ''.join(res)\n```"
  },
  {
    "id": 20,
    "response": "```python\ndef largest_subset(lst, n):\r\n  lst.sort()\r\n  count=0\r\n  for i in range(len(lst)):\r\n    if lst[i]%n==0:\r\n      count+=1\r\n  return count\n```"
  },
  {
    "id": 21,
    "response": "```python\ndef increment_numerics(lst, n):\r\n    for i in range(len(lst)):\r\n        if lst[i].isdigit():\r\n            lst[i] = str(int(lst[i]) + n)\r\n    return lst\n```"
  },
  {
    "id": 22,
    "response": "```python\ndef get_median(lst, lst2, n):\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(0, n):\r\n        sum1 += lst[i]\r\n        sum2 += lst2[i]\r\n    return (sum1 + sum2) / (2 * n)\n```"
  },
  {
    "id": 23,
    "response": "```python\ndef nth_nums(lst, n):\r\n    return list(map(lambda x: x ** n, lst))\n```"
  },
  {
    "id": 24,
    "response": "```python\ndef is_upper(s):\r\n  return s.upper()\n```"
  },
  {
    "id": 25,
    "response": "```python\ndef swap_List(lst):\r\n  lst[0], lst[-1] = lst[-1], lst[0]\r\n  return lst\n```"
  },
  {
    "id": 26,
    "response": "```python\ndef triangle_area(n):\r\n    if n<0:\r\n        return -1\r\n    if n==0:\r\n        return 0\r\n    else:\r\n        return n*n\n```"
  },
  {
    "id": 27,
    "response": "```python\ndef find_First_Missing(lst, n, n2):\r\n    a = [0]*n2\r\n    for i in lst:\r\n        a[i] = 1\r\n    for i in range(n2):\r\n        if a[i] == 0:\r\n            return i\r\n    return n2\n```"
  },
  {
    "id": 28,
    "response": "```python\ndef replace_spaces(s):\r\n    s = s.replace(\" \",\"%20\")\r\n    return s\n```"
  },
  {
    "id": 29,
    "response": "```python\ndef Split(lst):\r\n  if lst[0] % 2 == 0:\r\n    return lst[0::2]\r\n  else:\r\n    return lst[1::2]\n```"
  },
  {
    "id": 30,
    "response": "```python\ndef get_coordinates(tup):\r\n    x,y=tup\r\n    res=[]\r\n    for i in range(x-1,x+2):\r\n        for j in range(y-1,y+2):\r\n            if i==x and j==y:\r\n                res.append([i,j])\r\n            elif i==x and j!=y:\r\n                res.append([i,j])\r\n            elif i!=x and j==y:\r\n                res.append([i,j])\r\n            elif i!=x and j!=y:\r\n                res.append([i,j])\r\n    return res\n```"
  },
  {
    "id": 31,
    "response": "```python\nimport re\r\ndef replace_spaces(s):\r\n    return re.sub(r'\\s+', '_', s)\n```"
  },
  {
    "id": 32,
    "response": "```python\ndef move_zero(lst):\r\n  a = [i for i in lst if i!=0]\r\n  b = [0]*(len(lst)-len(a))\r\n  return a+b\n```"
  },
  {
    "id": 33,
    "response": "```python\ndef pair_OR_Sum(lst, n):\r\n    sum = 0\r\n    for i in range(0, n):\r\n        for j in range(i+1, n):\r\n            sum = sum + (lst[i] | lst[j])\r\n    return sum\n```"
  },
  {
    "id": 34,
    "response": "```python\ndef even_Power_Sum(n):\r\n    sum=0\r\n    for i in range(2,n+1,2):\r\n        sum=sum+(i**4)\r\n    return sum\n```"
  },
  {
    "id": 35,
    "response": "```python\ndef heap_sort(lst):\r\n    import heapq\r\n    heapq.heapify(lst)\r\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n```"
  },
  {
    "id": 36,
    "response": "```python\ndef Check_Solution(n, n2, n3):\r\n    if (n*n2)==(n3*n3):\r\n        return \"Yes\"\r\n    else:\r\n        return \"No\"\n```"
  },
  {
    "id": 37,
    "response": "```python\ndef noprofit_noloss(n, n2):\r\n    if n == n2:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 38,
    "response": "```python\ndef wind_chill(n, n2):\r\n  t = 33 - 0.6215 * n2 + (0.4275 * n) * (1 - 10 / (33 + n)) ** 0.16\r\n  return t\n```"
  },
  {
    "id": 39,
    "response": "```python\ndef sample_nam(lst):\r\n  x = 0\r\n  for i in lst:\r\n    if i[0].isupper() == False:\r\n      x += len(i)\r\n  return x\n```"
  },
  {
    "id": 40,
    "response": "```python\nimport re\r\ndef remove_parenthesis(lst):\r\n  for i in lst:\r\n    result = re.sub(r\"\\([^()]*\\)\", \"\", i)\r\n    return result\n```"
  },
  {
    "id": 41,
    "response": "```python\ndef is_nonagonal(n):\r\n  k = 1\r\n  while (k * (7 * k - 5)) / 2 < n:\r\n    k += 1\r\n  return int((k * (7 * k - 5)) / 2) == n\n```"
  },
  {
    "id": 42,
    "response": "```python\ndef remove_similar_row(lst):\r\n  res = []\r\n  for row in lst:\r\n    if row not in res:\r\n      res.append(row)\r\n  return res\n```"
  },
  {
    "id": 43,
    "response": "```python\nimport re\r\ndef text_match_wordz_middle(text):\r\n    pattern = 'z.*z'\r\n    if re.search(pattern,  text):\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'\n```"
  },
  {
    "id": 44,
    "response": "```python\ndef reverse_Array_Upto_K(lst, n):\r\n  for i in range(n//2):\r\n    lst[i], lst[n-1-i] = lst[n-1-i], lst[i]\r\n  return lst\n```"
  },
  {
    "id": 45,
    "response": "```python\ndef find_k_product(lst, n):\r\n  result = 1\r\n  for i in range(len(lst)):\r\n    result = result * lst[i][n]\r\n  return result\n```"
  },
  {
    "id": 46,
    "response": "```python\ndef No_of_cubes(n, k):\r\n  return (n-k+1)**3\n```"
  },
  {
    "id": 47,
    "response": "```python\ndef split_upperstring(s):\r\n    res = []\r\n    i = 0\r\n    while i < len(s):\r\n        if s[i].isupper():\r\n            res.append(s[i])\r\n            i += 1\r\n        else:\r\n            res.append(s[i])\r\n            i += 1\r\n    return res\n```"
  },
  {
    "id": 48,
    "response": "```python\ndef exchange_elements(lst):\r\n  for i in range(0, len(lst), 2):\r\n    lst[i], lst[i+1] = lst[i+1], lst[i]\r\n  return lst\n```"
  },
  {
    "id": 49,
    "response": "```python\ndef sum_Range_list(lst, n, n2):\r\n  return sum(lst[n:n2])\n```"
  },
  {
    "id": 50,
    "response": "```python\ndef are_Equal(lst, lst2, n, n2):\r\n  if n != n2:\r\n    return False\r\n  for i in range(0, n):\r\n    if lst[i] != lst2[i]:\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 51,
    "response": "```python\ndef check_subset(tup, tup2):\r\n    for i in tup:\r\n        if i not in tup2:\r\n            return False\r\n    return True\n```"
  },
  {
    "id": 52,
    "response": "```python\ndef matrix_to_list(lst):\r\n  return [list(x) for x in zip(*lst)]\n```"
  },
  {
    "id": 53,
    "response": "```python\nfrom collections import defaultdict\r\ndef grouping_dictionary(lst):\r\n    d = defaultdict(list)\r\n    for k, v in lst:\r\n        d[k].append(v)\r\n    return dict(d)\n```"
  },
  {
    "id": 54,
    "response": "```python\ndef rectangle_perimeter(n, n2): \r\n    return (2 * (n + n2))\n```"
  },
  {
    "id": 55,
    "response": "```python\ndef fifth_Power_Sum(n):\r\n    sum=0\r\n    for i in range(1,n+1):\r\n        sum=sum+(i**5)\r\n    return sum\n```"
  },
  {
    "id": 56,
    "response": "```python\ndef find_Min_Sum(lst, lst2, n):\r\n    a = 0\r\n    b = 0\r\n    for i in range(0, n):\r\n        a = a + abs(lst[i] - lst2[i])\r\n    for i in range(0, n):\r\n        b = b + abs(lst[i] - lst2[i])\r\n    return a - b\n```"
  },
  {
    "id": 57,
    "response": "```python\r\ndef first_Digit(n):\r\n    fact = 1\r\n    for i in range(1, n+1):\r\n        fact = fact * i\r\n    return int(str(fact)[0])\n```"
  },
  {
    "id": 58,
    "response": "```python\ndef max_occurrences(lst):\r\n  count = 0\r\n  max_count = 0\r\n  for i in lst:\r\n    count = lst.count(i)\r\n    if count > max_count:\r\n      max_count = count\r\n  return max_count\n```"
  },
  {
    "id": 59,
    "response": "```python\ndef Repeat(lst):\r\n  result = []\r\n  for i in range(len(lst)):\r\n    if lst[i] not in result:\r\n      result.append(lst[i])\r\n  return result\n```"
  },
  {
    "id": 60,
    "response": "```python\ndef find_Points(n, n2, n3, n4):\r\n  if (n > n2 and n3 > n4) or (n < n2 and n3 < n4):\r\n    return (n,n2)\r\n  else:\r\n    return (n3,n4)\n```"
  },
  {
    "id": 61,
    "response": "```python\ndef max_sum_of_three_consecutive(lst, n):\r\n    max_sum = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            for k in range(j+1, n):\r\n                max_sum = max(max_sum, lst[i]+lst[j]+lst[k])\r\n    return max_sum\n```"
  },
  {
    "id": 62,
    "response": "```python\ndef sorted_dict(dct):\r\n    result = dict(sorted(dct.items(), key=lambda x: sorted(x[1])))\r\n    return result\n```"
  },
  {
    "id": 63,
    "response": "```python\ndef find_max_val(n, x, y):\r\n    k = 0\r\n    for i in range(0, n+1):\r\n        if (i % x) == y:\r\n            k = i\r\n    return k\n```"
  },
  {
    "id": 64,
    "response": "```python\ndef average_Even(n):\r\n  if n % 2 == 0:\r\n    return (n//2) + (n//2 - 1) // 2\r\n  else:\r\n    return (n//2) + (n//2 - 1) // 2\n```"
  },
  {
    "id": 65,
    "response": "```python\ndef move_last(lst):\r\n  lst.insert(0, lst.pop(-1)) \r\n  return lst\n```"
  },
  {
    "id": 66,
    "response": "```python\ndef count_char(s, s2): \r\n  return s.count(s2)\n```"
  },
  {
    "id": 67,
    "response": "```python\ndef Check_Vow(s, s2):\r\n  count=0\r\n  for i in s:\r\n    if i in s2:\r\n      count+=1\r\n  return count\n```"
  },
  {
    "id": 68,
    "response": "```python\ndef replace(s, s2):\r\n    for i in range(len(s)):\r\n        if s[i] == s2:\r\n            s = s.replace(s2, \"\")\r\n    return s\n```"
  },
  {
    "id": 69,
    "response": "```python\nimport re\r\ndef check_IP(s): \r\n  pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$' \r\n  if re.search(pattern, s): \r\n    return 'Valid IP address'\r\n  else: \r\n    return 'Invalid IP address'\n```"
  },
  {
    "id": 70,
    "response": "```python\ndef decreasing_trend(lst):\r\n  for i in range(len(lst)-1):\r\n    if lst[i] < lst[i+1]:\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 71,
    "response": "```python\ndef set_Right_most_Unset_Bit(n): \r\n    return (n | (n + 1))\n```"
  },
  {
    "id": 72,
    "response": "```python\ndef max_of_three(n, n2, n3):\r\n    if n >= n2 and n >= n3:\r\n        return n\r\n    elif n2 >= n and n2 >= n3:\r\n        return n2\r\n    else:\r\n        return n3\n```"
  },
  {
    "id": 73,
    "response": "```python\ndef convert(lst):\r\n  return int(\"\".join(map(str, lst)))\n```"
  },
  {
    "id": 74,
    "response": "```python\ndef remove_duplicate(s):\r\n    s = s.split()\r\n    s = list(dict.fromkeys(s))\r\n    return ' '.join(s)\n```"
  },
  {
    "id": 75,
    "response": "```python\ndef sum_nums(n, n2, n3, n4):\r\n    sum = n + n2 + n3 + n4\r\n    if sum >= 20:\r\n        return sum\r\n    else:\r\n        return 20\n```"
  },
  {
    "id": 76,
    "response": "```python\nimport re\r\ndef remove_extra_char(s):\r\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n```"
  },
  {
    "id": 77,
    "response": "```python\ndef validity_triangle(n, n2, n3):\r\n  if (n+n2>n3) and (n+n3>n2) and (n2+n3>n):\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 78,
    "response": "```python\ndef remove_spaces(s):\r\n    return s.replace(\" \", \"\")\n```"
  },
  {
    "id": 79,
    "response": "```python\ndef access_key(dct, n):\r\n  for key in list(dct.keys()):\r\n    if n == list(dct.keys()).index(key):\r\n      return key\r\n  return None\n```"
  },
  {
    "id": 80,
    "response": "```python\ndef increasing_trend(lst):\r\n  for i in range(len(lst)-1):\r\n    if lst[i+1] < lst[i]:\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 81,
    "response": "```python\ndef smallest_Divisor(n):\r\n    if n % 2 == 0:\r\n        return 2\r\n    i = 3\r\n    while i * i <= n:\r\n        if n % i == 0:\r\n            return i\r\n        i += 2\r\n    return n\n```"
  },
  {
    "id": 82,
    "response": "```python\ndef mul_list(lst, lst2):\r\n  return list(map(lambda x, y: x * y, lst, lst2))\n```"
  },
  {
    "id": 83,
    "response": "```python\ndef sum_Square(n):\r\n  for i in range(0,n):\r\n    for j in range(0,n):\r\n      if(i*i+j*j==n):\r\n        return True\r\n  return False\n```"
  },
  {
    "id": 84,
    "response": "```python\ndef count_Char(s, s2): \r\n    count = 0\r\n    for i in s: \r\n        if (i == s2): \r\n            count = count + 1\r\n    return count\n```"
  },
  {
    "id": 85,
    "response": "```python\ndef sum_Of_Primes(n):\r\n  sum=0\r\n  for i in range(2,n+1):\r\n    for j in range(2,i):\r\n      if i%j==0:\r\n        break\r\n    else:\r\n      sum+=i\r\n  return sum\n```"
  },
  {
    "id": 86,
    "response": "```python\ndef freq_element(tup):\r\n  from collections import Counter\r\n  c=Counter(tup)\r\n  return str(c)\n```"
  },
  {
    "id": 87,
    "response": "```python\ndef recur_gcd(n, n2): \r\n\tif n2 == 0: \r\n\t\treturn n \r\n\treturn recur_gcd(n2, n % n2)\n```"
  },
  {
    "id": 88,
    "response": "```python\nimport math\r\ndef len_complex(n, n2): \r\n  return math.sqrt(n**2 + n2**2)\n```"
  },
  {
    "id": 89,
    "response": "```python\ndef min_jumps(arr, n):\r\n    if (n == 1):\r\n        return 0\r\n    jumps = 1\r\n    max_reach = arr[0]\r\n    step = arr[0]\r\n    for i in range(1, n):\r\n        if (i == n - 1):\r\n            return jumps\r\n        max_reach = max(max_reach, i + arr[i])\r\n        step -= 1\r\n        if (step == 0):\r\n            jumps += 1\r\n            step = max_reach - i\r\n            if (step == 0):\r\n                return -1\r\n    return -1\n```"
  },
  {
    "id": 90,
    "response": "```python\ndef mul_consecutive_nums(lst):\r\n    res = [lst[0]]\r\n    for i in range(1, len(lst)):\r\n        res.append(lst[i]*res[i-1])\r\n    return res\n```"
  },
  {
    "id": 91,
    "response": "```python\ndef group_element(lst):\r\n  d = {}\r\n  for (a, b) in lst:\r\n    if b not in d:\r\n      d[b] = []\r\n    d[b].append(a)\r\n  return d\n```"
  },
  {
    "id": 92,
    "response": "```python\ndef last_Two_Digits(n):\r\n  if n == 0 or n == 1:\r\n    return 1\r\n  else:\r\n    return (n * last_Two_Digits(n-1)) % 100\n```"
  },
  {
    "id": 93,
    "response": "```python\nimport re\r\ndef remove_multiple_spaces(s):\r\n    return re.sub(r'\\s+', ' ', s).strip()\n```"
  },
  {
    "id": 94,
    "response": "```python\ndef extract_unique(dct):\r\n  res = set()\r\n  for val in dct.values():\r\n    for i in val:\r\n      res.add(i)\r\n  return list(res)\n```"
  },
  {
    "id": 95,
    "response": "```python\ndef check_greater(tup, tup2):\r\n  for i in range(len(tup)):\r\n    if tup2[i] > tup[i]:\r\n      return True\r\n  return False\n```"
  },
  {
    "id": 96,
    "response": "```python\ndef zip_list(lst, lst2):\r\n  result = []\r\n  for i in range(len(lst)):\r\n    result.append(lst[i] + lst2[i])\r\n  return result\n```"
  },
  {
    "id": 97,
    "response": "```python\ndef count_even(lst):\r\n  count=0\r\n  for i in lst:\r\n    if i%2==0:\r\n      count+=1\r\n  return count\n```"
  },
  {
    "id": 98,
    "response": "```python\ndef sort_dict_item(dct):\r\n  return dict(sorted(dct.items(), key=lambda x: x[0]))\n```"
  },
  {
    "id": 99,
    "response": "```python\ndef min_Swaps(s1, s2):\r\n  count = 0\r\n  for i in range(len(s1)):\r\n    if s1[i] != s2[i]:\r\n      count += 1\r\n  if count == 0:\r\n    return 0\r\n  if count % 2 != 0:\r\n    return \"Not Possible\"\r\n  return int(count / 2)\n```"
  },
  {
    "id": 100,
    "response": "```python\ndef count_range_in_list(lst, n, n2):\r\n    count=0\r\n    for i in lst:\r\n        if n<=i<=n2:\r\n            count+=1\r\n    return count\n```"
  },
  {
    "id": 101,
    "response": "```python\ndef equilibrium_index(lst):\r\n  sum = 0\r\n  left_sum = 0\r\n  for i in range(len(lst)):\r\n    sum += lst[i]\r\n  for i in range(len(lst)):\r\n    sum -= lst[i]\r\n    if left_sum == sum:\r\n      return i\r\n    left_sum += lst[i]\r\n  return -1\n```"
  },
  {
    "id": 102,
    "response": "```python\ndef removals(lst, n, n2):\r\n    c=0\r\n    for i in lst:\r\n        if i==n or i==n2:\r\n            c+=1\r\n    return c\n```"
  },
  {
    "id": 103,
    "response": "```python\ndef is_key_present(dct, n):\r\n  if n in dct:\r\n    print('Key is present in the dictionary')\r\n  else:\r\n    print('Key is not present in the dictionary')\n```"
  },
  {
    "id": 104,
    "response": "```python\ndef harmonic_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return (1 / n) + harmonic_sum(n - 1)\n```"
  },
  {
    "id": 105,
    "response": "```python\ndef sort_sublists(lst):\r\n    lst.sort(key=lambda x: (len(x), x))\r\n    return lst\n```"
  },
  {
    "id": 106,
    "response": "```python\ndef is_subset(lst, n, lst2, n2):\r\n    for i in range(0, n2):\r\n        for j in range(0, n):\r\n            if lst2[i] == lst[j]:\r\n                break\r\n        else:\r\n            return False\r\n    return True\n```"
  },
  {
    "id": 107,
    "response": "```python\ndef count_Set_Bits(n):\r\n    count = 0\r\n    for i in range(1, n + 1):\r\n        while i:\r\n            count += i & 1\r\n            i >>= 1\r\n    return count\n```"
  },
  {
    "id": 108,
    "response": "```python\ndef Convert(s):\r\n    return s.split(' ')\n```"
  },
  {
    "id": 109,
    "response": "```python\ndef get_unique(lst):\r\n  d = dict()\r\n  for i in lst:\r\n    for j in i:\r\n      if j not in d:\r\n        d[j] = 1\r\n      else:\r\n        d[j] += 1\r\n  return str(d)\n```"
  },
  {
    "id": 110,
    "response": "```python\ndef front_and_rear(tup):\r\n    return (tup[0],tup[-1])\n```"
  },
  {
    "id": 111,
    "response": "```python\ndef product_Equal(n):\r\n  prod1=1\r\n  prod2=1\r\n  for i in range(len(str(n))):\r\n    if i%2==0:\r\n      prod1=prod1*int(str(n)[i])\r\n    else:\r\n      prod2=prod2*int(str(n)[i])\r\n  if prod1==prod2:\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 112,
    "response": "```python\ndef remove_duplicate(lst):\r\n  res = [] \r\n  for i in lst: \r\n    if i not in res: \r\n      res.append(i) \r\n  return res\n```"
  },
  {
    "id": 113,
    "response": "```python\ndef check_valid(tup):\r\n  for i in tup:\r\n    if (i==True or i==False):\r\n      pass\r\n    else:\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 114,
    "response": "```python\ndef count_Fac(n):\r\n  count=0\r\n  i=2\r\n  while i*i<=n:\r\n    if n%i==0:\r\n      count+=1\r\n      while n%i==0:\r\n        n=n//i\r\n    i+=1\r\n  if n>1:\r\n    count+=1\r\n  return count\n```"
  },
  {
    "id": 115,
    "response": "```python\ndef str_to_tuple(s):\r\n    t = tuple(int(x.strip()) for x in s.split(','))\r\n    return t\n```"
  },
  {
    "id": 116,
    "response": "```python\ndef rombus_perimeter(n):\r\n  return 4*n\n```"
  },
  {
    "id": 117,
    "response": "```python\nimport math\r\ndef sd_calc(lst):\r\n  n = len(lst)\r\n  mean = sum(lst)/n\r\n  variance = sum((x - mean)**2 for x in lst)/n\r\n  sd = math.sqrt(variance)\r\n  return sd\n```"
  },
  {
    "id": 118,
    "response": "```python\ndef alternate_elements(lst):\r\n  return [lst[i] for i in range(0, len(lst), 2)]\n```"
  },
  {
    "id": 119,
    "response": "```python\nimport re\r\ndef text_match(text):\r\n  pattern = 'ab*?'\r\n  if re.search(pattern,  text):\r\n    return 'Found a match!'\r\n  else:\r\n    return 'Not matched!'\n```"
  },
  {
    "id": 120,
    "response": "```python\ndef add_dict_to_tuple(tup, dct):\r\n    return tup + (dct,)\n```"
  },
  {
    "id": 121,
    "response": "```python\ndef maxAverageOfPath(lst, n):\r\n    sum = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            sum += lst[i][j]\r\n    avg = sum / (n * n)\r\n    return avg\n```"
  },
  {
    "id": 122,
    "response": "```python\ndef filter_data(dct, n, n2):\r\n  res = {}\r\n  for i in dct:\r\n    if (dct[i][0] >= n and dct[i][1] >= n2):\r\n      res[i] = dct[i]\r\n  return res\n```"
  },
  {
    "id": 123,
    "response": "```python\ndef count_same_pair(lst, lst2):\r\n    count=0\r\n    for i in lst:\r\n        if i in lst2:\r\n            count=count+1\r\n    return count\n```"
  },
  {
    "id": 124,
    "response": "```python\ndef power_base_sum(n, n2):\r\n    sum=0\r\n    for i in range(1,n2+1):\r\n        sum=sum+(n**i)\r\n    return sum\n```"
  },
  {
    "id": 125,
    "response": "```python\nimport re\r\ndef extract_quotation(s):\r\n  x = re.findall(r'\\\"(.*?)\\\"',s)\r\n  return x\n```"
  },
  {
    "id": 126,
    "response": "```python\ndef multiply_elements(tup):\r\n  res = tuple(tup[i]*tup[i+1] for i in range(len(tup)-1))\r\n  return res\n```"
  },
  {
    "id": 127,
    "response": "```python\nimport re\r\ndef remove_char(s): \r\n    return re.sub(r'[^a-zA-Z]', '', s)\n```"
  },
  {
    "id": 128,
    "response": "```python\ndef sum_list(lst, lst2):\r\n  result = []\r\n  for i in range(len(lst)):\r\n      result.append(lst[i] + lst2[i])\r\n  return result\n```"
  },
  {
    "id": 129,
    "response": "```python\ndef add_list(lst, lst2):\r\n  result = list(map(lambda x,y: x+y, lst, lst2))\r\n  return result\n```"
  },
  {
    "id": 130,
    "response": "```python\ndef consecutive_duplicates(lst):\r\n  result = [lst[0]]\r\n  for i in range(1, len(lst)):\r\n    if lst[i] != lst[i-1]:\r\n      result.append(lst[i])\r\n  return result\n```"
  },
  {
    "id": 131,
    "response": "```python\nimport math\r\ndef lateralsurface_cone(n, n2): \r\n    l = math.sqrt(n**2 + n2**2)\r\n    area = math.pi * n * l \r\n    return (area)\n```"
  },
  {
    "id": 132,
    "response": "```python\ndef replace_specialchar(s):\r\n    import re\r\n    s = re.sub(r'[,.\\s]', ':', s)\r\n    return s\n```"
  },
  {
    "id": 133,
    "response": "```python\ndef find_first_occurrence(lst, n):\r\n    for i in range(len(lst)):\r\n        if lst[i] == n:\r\n            return i\r\n    return -1\n```"
  },
  {
    "id": 134,
    "response": "```python\ndef sum_Of_Subarray_Prod(lst, n):\r\n  total_sum = 0\r\n  for i in range(0, n):\r\n    for j in range(i, n):\r\n      subarray_prod = 1\r\n      for k in range(i, j+1):\r\n        subarray_prod = subarray_prod * lst[k]\r\n      total_sum = total_sum + subarray_prod\r\n  return total_sum\n```"
  },
  {
    "id": 135,
    "response": "```python\ndef toggle_middle_bits(n):\r\n  # Get the number of bits in the number\r\n  num_bits = n.bit_length()\r\n  # If the number of bits is less than 2, return the number itself\r\n  if num_bits < 2:\r\n    return n\r\n  # If the number of bits is 2, toggle the middle bit\r\n  if num_bits == 2:\r\n    return n ^ 1\r\n  # Otherwise, toggle all bits except the first and last bit\r\n  first_bit = 1 << (num_bits - 1)\r\n  last_bit = 1\r\n  middle_bits = n ^ (first_bit | last_bit)\r\n  return middle_bits\n```"
  },
  {
    "id": 136,
    "response": "```python\ndef left_insertion(lst, n):\r\n  for i in range(len(lst)):\r\n    if lst[i] >= n:\r\n      return i\r\n  return len(lst)\n```"
  },
  {
    "id": 137,
    "response": "```python\ndef check_str(s):\r\n    if s[0] in \"aeiouAEIOU\":\r\n        return \"Valid\"\r\n    else:\r\n        return \"Invalid\"\n```"
  },
  {
    "id": 138,
    "response": "```python\ndef geometric_sum(n):\r\n  if n==1:\r\n    return 1\r\n  else:\r\n    return 1 + (geometric_sum(n-1)/2)\n```"
  },
  {
    "id": 139,
    "response": "```python\ndef find_Index(n):\r\n    x = 0\r\n    while len(str(x*(x+1)/2)) < n:\r\n        x += 1\r\n    return x\n```"
  },
  {
    "id": 140,
    "response": "```python\ndef tuple_to_dict(tup):\r\n    dict1 = {}\r\n    for i in range(0, len(tup), 2):\r\n        dict1[tup[i]] = tup[i+1]\r\n    return dict1\n```"
  },
  {
    "id": 141,
    "response": "```python\ndef all_Characters_Same(s):\r\n  return len(set(s)) <= 1\n```"
  },
  {
    "id": 142,
    "response": "```python\nimport math\r\ndef area_tetrahedron(n):\r\n    area = (sqrt(3) * (n * n)) / 4\r\n    return area\n```"
  },
  {
    "id": 143,
    "response": "```python\ndef rotate_right(lst, n, n2):\r\n    lst = lst[n:] + lst[:n]\r\n    return lst\n```"
  },
  {
    "id": 144,
    "response": "```python\ndef check_none(tup):\r\n  for i in tup:\r\n    if i is None:\r\n      return True\r\n  return False\n```"
  },
  {
    "id": 145,
    "response": "```python\ndef divisible_by_digits(n, n2):\r\n  l = []\r\n  for i in range(n,n2):\r\n    s = str(i)\r\n    if all(int(d) != 0 and i % int(d) == 0 for d in s):\r\n      l.append(i)\r\n  return l\n```"
  },
  {
    "id": 146,
    "response": "```python\nimport math\r\ndef sector_area(n, n2):\r\n    if n2 == 360:\r\n        return None\r\n    else:\r\n        return (n2/360) * (math.pi * (n**2))\n```"
  },
  {
    "id": 147,
    "response": "```python\ndef lcs_of_three(s, s2, s3, n, n2, n3):\r\n    dp = [[0 for i in range(n2 + 1)] for j in range(n + 1)]\r\n    for i in range(1, n + 1):\r\n        for j in range(1, n2 + 1):\r\n            for k in range(1, n3 + 1):\r\n                if s[i-1] == s2[j-1] == s3[k-1]:\r\n                    dp[i][j] = 1 + dp[i-1][j-1]\r\n                else:\r\n                    dp[i][j] = 0\r\n    return dp[n][n2]\n```"
  },
  {
    "id": 148,
    "response": "```python\ndef capital_words_spaces(s):\r\n  import re\r\n  return re.sub(r'([a-z])([A-Z])', r'\\1 \\2', s)\n```"
  },
  {
    "id": 149,
    "response": "```python\ndef sort_numeric_strings(lst):\r\n    return sorted([int(x) for x in lst])\n```"
  },
  {
    "id": 150,
    "response": "```python\ndef add_tuple(lst, tup):\r\n    return lst + list(tup)\n```"
  },
  {
    "id": 151,
    "response": "```python\ndef check_min_heap(lst, n):\r\n  for i in range(0, n):\r\n    left = 2 * i + 1\r\n    right = 2 * i + 2\r\n    if (left < n and lst[i] > lst[left]):\r\n      return False\r\n    if (right < n and lst[i] > lst[right]):\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 152,
    "response": "```python\ndef jacobsthal_num(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return (jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2))\n```"
  },
  {
    "id": 153,
    "response": "```python\ndef min_k(lst, n):\r\n  return sorted(lst, key=lambda x: x[1])[:n]\n```"
  },
  {
    "id": 154,
    "response": "```python\ndef extract_index_list(lst, lst2, lst3):\r\n    a = set(lst)\r\n    b = set(lst2)\r\n    c = set(lst3)\r\n    d = a.intersection(b, c)\r\n    e = []\r\n    for i in d:\r\n        if i in lst:\r\n            e.append(lst.index(i))\r\n        else:\r\n            pass\r\n    return e\n```"
  },
  {
    "id": 155,
    "response": "```python\ndef second_smallest(lst):\r\n  if len(lst) < 2:\r\n    return None\r\n  else:\r\n    lst.sort()\r\n  return lst[1]\n```"
  },
  {
    "id": 156,
    "response": "```python\nimport re\r\ndef text_match_zero_one(s):\r\n  if re.search(\"(^|[^a-z])0([^a-z]|$)\", s) or re.search(\"(^|[^a-z])b([^a-z]|$)\", s):\r\n    return \"Found a match!\"\r\n  else:\r\n    return \"Not matched!\"\n```"
  },
  {
    "id": 157,
    "response": "```python\ndef count_reverse_pairs(lst):\r\n    count = 0\r\n    for i in lst:\r\n        if i == i[::-1]:\r\n            count += 1\r\n    return count\n```"
  },
  {
    "id": 158,
    "response": "```python\ndef unique_sublists(lst):\r\n  d = {}\r\n  for i in lst:\r\n    if tuple(i) in d:\r\n      d[tuple(i)] += 1\r\n    else:\r\n      d[tuple(i)] = 1\r\n  return d\n```"
  },
  {
    "id": 159,
    "response": "```python\ndef is_decimal(s):\r\n    import re\r\n    x = re.search(r'^[0-9]+(\\.[0-9]+)?$',s)\r\n    if x:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 160,
    "response": "```python\ndef unique_Element(lst, n):\r\n    if (len(set(lst)) == n):\r\n        return 'YES'\r\n    else:\r\n        return 'NO'\n```"
  },
  {
    "id": 161,
    "response": "```python\nimport math\r\ndef arc_length(n, n2):\r\n  if n2>360:\r\n    return None\r\n  else:\r\n    return (n*math.pi/180)*n2/360*2*math.pi\n```"
  },
  {
    "id": 162,
    "response": "```python\ndef check_monthnumber_number(n):\r\n    if n == 2:\r\n        return False\r\n    elif n == 4 or n == 6 or n == 9 or n == 11:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 163,
    "response": "```python\ndef find_Min_Diff(tup, n):\r\n    tup.sort()\r\n    min_diff = tup[1] - tup[0]\r\n    for i in range(1, n - 1):\r\n        if (tup[i + 1] - tup[i]) < min_diff:\r\n            min_diff = tup[i + 1] - tup[i]\r\n    return min_diff\n```"
  },
  {
    "id": 164,
    "response": "```python\ndef number_ctr(s):\r\n    count = 0\r\n    for i in s:\r\n        if i.isdigit():\r\n            count = count + 1\r\n    return count\n```"
  },
  {
    "id": 165,
    "response": "```python\ndef is_polite(n):\r\n  if (n % 2 == 0):\r\n    return (n + 1) // 2\r\n  else:\r\n    return (n + 1) // 2 + 1\n```"
  },
  {
    "id": 166,
    "response": "```python\ndef pair_wise(lst):\r\n  result = []\r\n  for i in range(0, len(lst) - 1):\r\n    result.append((lst[i], lst[i + 1]))\r\n  return result\n```"
  },
  {
    "id": 167,
    "response": "```python\ndef get_Pairs_Count(lst, sum, n):\r\n    count = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst)):\r\n            if lst[i]+lst[j] == sum:\r\n                count = count + 1\r\n    return count\n```"
  },
  {
    "id": 168,
    "response": "```python\ndef check_Odd_Parity(n):\r\n  n = n ^ 1\r\n  if (n & 1) == 0:\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 169,
    "response": "```python\ndef Diff(lst, lst2):\r\n    return list(set(lst) ^ set(lst2))\n```"
  },
  {
    "id": 170,
    "response": "```python\ndef odd_Num_Sum(n):\r\n  sum=0\r\n  for i in range(1,n+1):\r\n    sum=sum+(i**4)\r\n  return sum\n```"
  },
  {
    "id": 171,
    "response": "```python\ndef check_expression(s):\r\n    stack = []\r\n    for c in s:\r\n        if c == '(' or c == '{' or c == '[':\r\n            stack.append(c)\r\n        elif c == ')':\r\n            if not stack or stack.pop() != '(':\r\n                return False\r\n        elif c == '}':\r\n            if not stack or stack.pop() != '{':\r\n                return False\r\n        elif c == ']':\r\n            if not stack or stack.pop() != '[':\r\n                return False\r\n    return len(stack) == 0\n```"
  },
  {
    "id": 172,
    "response": "```python\ndef remove_length(s, n):\r\n    return ' '.join([word for word in s.split(' ') if len(word) != n])\n```"
  },
  {
    "id": 173,
    "response": "```python\ndef occurance_substring(s, s2):\r\n  i = s.find(s2)\r\n  if i == -1:\r\n    return s2, -1, -1\r\n  else:\r\n    return s2, i, i + len(s2) - 1\n```"
  },
  {
    "id": 174,
    "response": "```python\ndef check_email(s):\r\n    import re\r\n    if re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', s):\r\n        return 'Valid Email'\r\n    else:\r\n        return 'Invalid Email'\n```"
  },
  {
    "id": 175,
    "response": "```python\ndef odd_position(lst):\r\n    for i in range(len(lst)):\r\n        if (i+1)%2 == 0:\r\n            if lst[i] % 2 == 0:\r\n                return True\r\n            else:\r\n                return False\r\n    return True\n```"
  },
  {
    "id": 176,
    "response": "```python\ndef count_vowels(s):\r\n  vowels = 'aeiou'\r\n  count = 0\r\n  for char in s:\r\n    if char in vowels:\r\n      count += 1\r\n  return count\n```"
  },
  {
    "id": 177,
    "response": "```python\ndef find_Sum(lst, n):\r\n    sum1 = 0\r\n    for i in range(0, n):\r\n        sum1 = sum1 + lst[i]\r\n    return sum1\n```"
  },
  {
    "id": 178,
    "response": "```python\ndef pack_consecutive_duplicates(lst):\r\n    result = []\r\n    for i in range(len(lst)):\r\n        if i == 0:\r\n            result.append([lst[i]])\r\n        elif lst[i] == lst[i-1]:\r\n            result[-1].append(lst[i])\r\n        else:\r\n            result.append([lst[i]])\r\n    return result\n```"
  },
  {
    "id": 179,
    "response": "```python\ndef unique_sublists(lst):\r\n  from collections import Counter\r\n  c=Counter(tuple(i) for i in lst)\r\n  return dict(c)\n```"
  },
  {
    "id": 180,
    "response": "```python\ndef find_combinations(lst):\r\n  result = []\r\n  for i in range(len(lst)):\r\n    for j in range(len(lst)):\r\n      result.append((lst[i][0] + lst[j][0], lst[i][1] + lst[j][1]))\r\n  return result\n```"
  },
  {
    "id": 181,
    "response": "```python\ndef count_Divisors(n):\r\n    divisors = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            divisors += 1\r\n    if divisors % 2 == 0:\r\n        return \"Even\"\r\n    else:\r\n        return \"Odd\"\n```"
  },
  {
    "id": 182,
    "response": "```python\ndef Odd_Length_Sum(lst):\r\n  odd_sum=0\r\n  for i in range(0,len(lst)):\r\n    if (len(lst)-i)%2==1:\r\n      odd_sum+=sum(lst[i:])\r\n  return odd_sum\n```"
  },
  {
    "id": 183,
    "response": "```python\ndef rgb_to_hsv(r, g, b):\r\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx - mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = 60 * (((g - b) / df) % 6)\r\n    elif mx == g:\r\n        h = 60 * (((b - r) / df) + 2)\r\n    elif mx == b:\r\n        h = 60 * (((r - g) / df) + 4)\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df / mx) * 100\r\n    v = mx * 100\r\n    return (h, s, v)\n```"
  },
  {
    "id": 184,
    "response": "```python\ndef mul_even_odd(lst):\r\n  a=0\r\n  b=0\r\n  for i in lst:\r\n    if i%2==0:\r\n      a=i\r\n      break\r\n  for i in lst:\r\n    if i%2!=0:\r\n      b=i\r\n      break\r\n  return a*b\n```"
  },
  {
    "id": 185,
    "response": "```python\ndef tuple_str_int(s):\r\n  t = tuple(map(int, s.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))\r\n  return t\n```"
  },
  {
    "id": 186,
    "response": "```python\ndef right_insertion(lst, n):\r\n    for i in range(len(lst)):\r\n        if lst[i] >= n:\r\n            return i\r\n    return len(lst)\n```"
  },
  {
    "id": 187,
    "response": "```python\nimport re\r\ndef text_match_three(text):\r\n    if re.search(r'ab{3}',text):\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'\n```"
  },
  {
    "id": 188,
    "response": "```python\ndef new_tuple(lst, s):\r\n  return tuple(lst + [s])\n```"
  },
  {
    "id": 189,
    "response": "```python\ndef perimeter_polygon(n, n2):\r\n  return n * n2\n```"
  },
  {
    "id": 190,
    "response": "```python\ndef even_position(lst):\r\n  count=0\r\n  for i in range(0,len(lst),2):\r\n    if lst[i]%2==0:\r\n      count+=1\r\n  if count>0:\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 191,
    "response": "```python\ndef remove_nested(tup):\r\n  res = []\r\n  for x in tup:\r\n    if isinstance(x, tuple):\r\n      res.extend(remove_nested(x))\r\n    else:\r\n      res.append(x)\r\n  return tuple(res)\n```"
  },
  {
    "id": 192,
    "response": "```python\ndef count_list(lst):\r\n  return len(lst)\n```"
  },
  {
    "id": 193,
    "response": "```python\ndef last(lst, n, n2):\r\n  for i in range(len(lst)-1, -1, -1):\r\n    if lst[i] == n:\r\n      return i\r\n  return -1\n```"
  },
  {
    "id": 194,
    "response": "```python\nimport re\r\ndef text_starta_endb(text):\r\n  patterns = 'a.*b$'\r\n  if re.search(patterns,  text):\r\n    return 'Found a match!'\r\n  else:\r\n    return 'Not matched!'\n```"
  },
  {
    "id": 195,
    "response": "```python\ndef cheap_items(lst, n):\r\n  sorted_list = sorted(lst, key = lambda x: x['price'])\r\n  return sorted_list[:n]\n```"
  },
  {
    "id": 196,
    "response": "```python\ndef return_sum(dct):\r\n  return sum(dct.values())\n```"
  },
  {
    "id": 197,
    "response": "```python\ndef sum_in_Range(l, r):\r\n    return sum(i for i in range(l, r+1) if i%2 != 0)\n```"
  },
  {
    "id": 198,
    "response": "```python\ndef _sum(lst):\r\n  return sum(lst)\n```"
  },
  {
    "id": 199,
    "response": "```python\ndef left_Rotate(n, n2):\r\n  return (n << n2) % (2**n2)\n```"
  },
  {
    "id": 200,
    "response": "```python\ndef remove_all_spaces(s):\r\n    return s.replace(\" \",\"\")\n```"
  },
  {
    "id": 201,
    "response": "```python\ndef test_three_equal(n, n2, n3):\r\n  count = 0\r\n  if n == n2 and n2 == n3:\r\n    count = 3\r\n  elif n == n2 or n2 == n3 or n == n3:\r\n    count = 2\r\n  else:\r\n    count = 0\r\n  return count\n```"
  },
  {
    "id": 202,
    "response": "```python\ndef count_Rotation(lst, n):\r\n    start = 0\r\n    end = n - 1\r\n    result = 0\r\n    while (start <= end):\r\n        mid = (start + end) // 2\r\n        if (lst[mid] < lst[mid - 1]):\r\n            result = mid\r\n            break\r\n        elif (lst[start] < lst[mid]):\r\n            start = mid + 1\r\n        else:\r\n            end = mid - 1\r\n    return result\n```"
  },
  {
    "id": 203,
    "response": "```python\ndef is_Perfect_Square(n):\r\n  import math\r\n  sqrt = math.sqrt(n)\r\n  if (int(sqrt) ** 2 == n):\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 204,
    "response": "```python\ndef is_Product_Even(lst, n):\r\n  if (lst[0] * lst[1] % 2 == 0):\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 205,
    "response": "```python\ndef max_sum_list(lst):\r\n    max_sum = 0\r\n    max_list = []\r\n    for i in lst:\r\n        sum1 = sum(i)\r\n        if sum1 > max_sum:\r\n            max_sum = sum1\r\n            max_list = i\r\n    return max_list\n```"
  },
  {
    "id": 206,
    "response": "```python\ndef max_run_uppercase(s):\r\n  c=0\r\n  m=0\r\n  for i in s:\r\n    if i.isupper():\r\n      c+=1\r\n      m=max(c,m)\r\n    else:\r\n      c=0\r\n  return m\n```"
  },
  {
    "id": 207,
    "response": "```python\ndef first_odd(lst):\r\n    for i in lst:\r\n        if i%2!=0:\r\n            return i\r\n    return 0\n```"
  },
  {
    "id": 208,
    "response": "```python\ndef check_K(tup, n):\r\n    if n in tup:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 209,
    "response": "```python\ndef check_smaller(tup, tup2):\r\n  for i in range(len(tup)):\r\n    if tup2[i] <= tup[i]:\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 210,
    "response": "```python\ndef count_variable(n, n2, n3, n4):\r\n  result = []\r\n  for i in range(n):\r\n    result.append('p')\r\n  for i in range(n2):\r\n    result.append('q')\r\n  for i in range(n3):\r\n    result.append('r')\r\n  for i in range(n4):\r\n    result.append('s')\r\n  return result\n```"
  },
  {
    "id": 211,
    "response": "```python\ndef check_identical(lst, lst2):\r\n    if lst == lst2:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 212,
    "response": "```python\ndef road_rd(s):\r\n  import re\r\n  return re.sub(r\"Road\", \"Rd.\", s)\n```"
  },
  {
    "id": 213,
    "response": "```python\ndef string_length(s):\r\n  return len(s)\n```"
  },
  {
    "id": 214,
    "response": "```python\ndef rombus_area(n, n2):\r\n    area = (n * n2) / 2\r\n    return area\n```"
  },
  {
    "id": 215,
    "response": "```python\ndef sort_by_dnf(lst, n):\r\n    count_0 = 0\r\n    count_1 = 0\r\n    count_2 = 0\r\n    for i in range(0, n):\r\n        if lst[i] == 0:\r\n            count_0 += 1\r\n        elif lst[i] == 1:\r\n            count_1 += 1\r\n        else:\r\n            count_2 += 1\r\n    for i in range(0, count_0):\r\n        lst[i] = 0\r\n    for i in range(count_0, count_0 + count_1):\r\n        lst[i] = 1\r\n    for i in range(count_0 + count_1, n):\r\n        lst[i] = 2\r\n    return lst\n```"
  },
  {
    "id": 216,
    "response": "```python\ndef clear_tuple(tup):\r\n    if (tup[0] == 0 or tup[0] == 1 or tup[0] == 2 or tup[0] == 3 or tup[0] == 4 or tup[0] == 5 or tup[0] == 6 or tup[0] == 7 or tup[0] == 8 or tup[0] == 9):\r\n        return ()\r\n    else:\r\n        return (tup[0],)\n```"
  },
  {
    "id": 217,
    "response": "```python\ndef div_of_nums(lst, m, n):\r\n  result = list(filter(lambda x: x % m == 0 or x % n == 0, lst))\r\n  return result\n```"
  },
  {
    "id": 218,
    "response": "```python\ndef lower_ctr(s):\r\n    c=0\r\n    for i in s:\r\n        if i.islower():\r\n            c+=1\r\n    return c\n```"
  },
  {
    "id": 219,
    "response": "```python\ndef count_duplic(lst):\r\n  from collections import Counter\r\n  count = Counter(lst)\r\n  x = []\r\n  y = []\r\n  for i in lst:\r\n    if lst.count(i) > 1:\r\n      x.append(i)\r\n      y.append(lst.count(i))\r\n    else:\r\n      x.append(i)\r\n      y.append(1)\r\n  return (x,y)\n```"
  },
  {
    "id": 220,
    "response": "```python\ndef check_monthnum_number(n):\r\n    if n == 2:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 221,
    "response": "```python\ndef merge_dictionaries(dct, dct2): \r\n    res = dict(dct)\r\n    for key, value in dct2.items(): \r\n        res[key] = value \r\n    return res\n```"
  },
  {
    "id": 222,
    "response": "```python\ndef pass_validity(password):\r\n  if (len(password) < 8): \r\n    return False\r\n  if not any(c.isdigit() for c in password): \r\n    return False\r\n  if not any(c.isupper() for c in password): \r\n    return False\r\n  if not any(c.islower() for c in password): \r\n    return False\r\n  if not any(c in \"!@#$%^&*()_+[]{}|;:,.<>?\" for c in password): \r\n    return False\r\n  return True\n```"
  },
  {
    "id": 223,
    "response": "```python\nimport re\r\ndef check_substring(s, s2):\r\n    if re.search(s2, s):\r\n        return \"string starts with the given substring\"\r\n    else:\r\n        return \"string doesnt start with the given substring\"\n```"
  },
  {
    "id": 224,
    "response": "```python\ndef remove_even(lst):\r\n  return [x for x in lst if x % 2 != 0]\n```"
  },
  {
    "id": 225,
    "response": "```python\ndef access_elements(lst, indices):\r\n  return [lst[i] for i in indices]\n```"
  },
  {
    "id": 226,
    "response": "```python\ndef check_Type_Of_Triangle(n, n2, n3):\r\n  if (n + n2 < n3) or (n + n3 < n2) or (n2 + n3 < n):\r\n    return \"Invalid Triangle\"\r\n  elif (n == n2) and (n2 == n3):\r\n    return \"Equilateral Triangle\"\r\n  elif (n == n2) or (n == n3) or (n2 == n3):\r\n    return \"Isosceles Triangle\"\r\n  elif (n**2 + n2**2 == n3**2) or (n**2 + n3**2 == n2**2) or (n2**2 + n3**2 == n**2):\r\n    return \"Right-angled Triangle\"\r\n  elif (n**2 + n2**2 > n3**2) or (n**2 + n3**2 > n2**2) or (n2**2 + n3**2 > n**2):\r\n    return \"Acute-angled Triangle\"\r\n  else:\r\n    return \"Obtuse-angled Triangle\"\n```"
  },
  {
    "id": 227,
    "response": "```python\ndef sum_column(lst, n):\r\n    sum = 0\r\n    for i in lst:\r\n        sum = sum + i[n]\r\n    return sum\n```"
  },
  {
    "id": 228,
    "response": "```python\ndef count_alpha_dig_spl(s):\r\n    alpha=0\r\n    dig=0\r\n    spl=0\r\n    for i in s:\r\n        if i.isalpha():\r\n            alpha+=1\r\n        elif i.isdigit():\r\n            dig+=1\r\n        else:\r\n            spl+=1\r\n    return alpha,dig,spl\n```"
  },
  {
    "id": 229,
    "response": "```python\ndef second_frequent(lst):\r\n    freq = {}\r\n    for i in lst:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    freq = sorted(freq.items(), key = lambda x: x[1], reverse = True)\r\n    return freq[1][0]\n```"
  },
  {
    "id": 230,
    "response": "```python\ndef round_up(n, n2):\r\n    return round(n, n2)\n```"
  },
  {
    "id": 231,
    "response": "```python\ndef count_Pairs(lst, n):\r\n  count = 0\r\n  for i in range(0, len(lst)):\r\n    for j in range(i + 1, len(lst)):\r\n      if (lst[i] + lst[j]) == n:\r\n        count += 1\r\n  return count\n```"
  },
  {
    "id": 232,
    "response": "```python\nimport re\r\ndef extract_max(s): \r\n    x = re.findall(r'\\d+', s) \r\n    return max(x)\n```"
  },
  {
    "id": 233,
    "response": "```python\ndef get_key(dct):\r\n  return list(dct.keys())\n```"
  },
  {
    "id": 234,
    "response": "```python\ndef generate_matrix(n):\r\n    matrix = [[0 for x in range(n)] for y in range(n)]\r\n    num = 1\r\n    for i in range(n):\r\n        for j in range(n):\r\n            matrix[i][j] = num\r\n            num += 1\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i == 0:\r\n                if j == 0:\r\n                    matrix[i][j] = 1\r\n                elif j == n-1:\r\n                    matrix[i][j] = 2\r\n                else:\r\n                    matrix[i][j] = 3\r\n            elif i == n-1:\r\n                if j == 0:\r\n                    matrix[i][j] = 4\r\n                elif j == n-1:\r\n                    matrix[i][j] = 5\r\n                else:\r\n                    matrix[i][j] = 6\r\n            elif j == 0:\r\n                if i == 0:\r\n                    matrix[i][j] = 7\r\n                elif i == n-1:\r\n                    matrix[i][j] = 8\r\n                else:\r\n                    matrix[i][j] = 9\r\n            elif j == n-1:\r\n                if i == 0:\r\n                    matrix[i][j] = 10\r\n                elif i == n-1:\r\n                    matrix[i][j] = 11\r\n                else:\r\n                    matrix[i][j] = 12\r\n    return matrix\n```"
  },
  {
    "id": 235,
    "response": "```python\ndef slope(n, n2, n3, n4):\r\n    return (n4-n3)/(n2-n1)\n```"
  },
  {
    "id": 236,
    "response": "```python\ndef max_sub_array_sum(lst, n):\r\n    max_sum = lst[0]\r\n    current_sum = lst[0]\r\n    for i in range(1, n):\r\n        current_sum = max(lst[i], current_sum + lst[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\n```"
  },
  {
    "id": 237,
    "response": "```python\ndef cube_Sum(n):\r\n  sum=0\r\n  for i in range(1,n+1):\r\n    sum+=i**3\r\n  return sum\n```"
  },
  {
    "id": 238,
    "response": "```python\ndef min_Swaps(s1, s2):\r\n    a = 0\r\n    for i in range(len(s1)):\r\n        if s1[i] != s2[i]:\r\n            a += 1\r\n    if a == 0:\r\n        return 0\r\n    if a % 2 == 0:\r\n        return int(a / 2)\r\n    else:\r\n        return int((a / 2) + 1)\n```"
  },
  {
    "id": 239,
    "response": "```python\ndef sort_tuple(lst): \r\n    lst.sort(key = lambda x: x[0]) \r\n    return lst\n```"
  },
  {
    "id": 240,
    "response": "```python\ndef Check_Solution(n, n2, n3):\r\n    if n == n2 or n == n3:\r\n        return \"Yes\"\r\n    else:\r\n        return \"No\"\n```"
  },
  {
    "id": 241,
    "response": "```python\ndef get_inv_count(lst, n):\r\n  count = 0\r\n  for i in range(0, n):\r\n    for j in range(i + 1, n):\r\n      if lst[i] > lst[j]:\r\n        count += 1\r\n  return count\n```"
  },
  {
    "id": 242,
    "response": "```python\ndef get_odd_occurence(lst, n):\r\n    for i in range(n):\r\n        count = 0\r\n        for j in range(n):\r\n            if lst[i] == lst[j]:\r\n                count += 1\r\n        if count % 2 != 0:\r\n            return lst[i]\n```"
  },
  {
    "id": 243,
    "response": "```python\nfrom heapq import heappush, heappop\r\ndef nth_super_ugly_number(n, lst):\r\n    heap = [1]\r\n    ugly = set([1])\r\n    for _ in range(n):\r\n        num = heappop(heap)\r\n        for x in lst:\r\n            if num * x not in ugly:\r\n                ugly.add(num * x)\r\n                heappush(heap, num * x)\r\n    return num\n```"
  },
  {
    "id": 244,
    "response": "```python\ndef get_Number(n, n2): \r\n    a = n\r\n    b = n2\r\n    if a > b: \r\n        a, b = b, a\r\n    c = a + b\r\n    return c - a\n```"
  },
  {
    "id": 245,
    "response": "```python\ndef find_Digits(n):\r\n  import math\r\n  x = math.factorial(n)\r\n  count = 0\r\n  while (x > 0):\r\n    if (x % 10 == 0):\r\n      count += 1\r\n    x = x / 10\r\n  return count\n```"
  },
  {
    "id": 246,
    "response": "```python\nfrom collections import defaultdict\r\ndef find_platform(lst, lst2, n):\r\n    # create a dictionary to store the arrival and departure times\r\n    dict1 = defaultdict(list)\r\n    for i in range(n):\r\n        dict1[lst[i]].append(lst2[i])\r\n    # sort the dictionary keys\r\n    dict1 = sorted(dict1.keys())\r\n    # create a list to store the platform count\r\n    platform_count = []\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    # create a variable to store the platform count\r\n    platform_count = 0\r\n    #\n```"
  },
  {
    "id": 247,
    "response": "```python\ndef lcopy(lst):\r\n  return lst.copy()\n```"
  },
  {
    "id": 248,
    "response": "```python\ndef area_trapezium(n, n2, n3):\r\n    return (n + n2) * n3 / 2\n```"
  },
  {
    "id": 249,
    "response": "```python\ndef Sum(n):\r\n  sum=0\r\n  for digit in str(n):\r\n    sum+=int(digit)\r\n  return sum\n```"
  },
  {
    "id": 250,
    "response": "```python\ndef is_triangleexists(n, n2, n3):\r\n    if (n + n2 > n3) and (n + n3 > n2) and (n2 + n3 > n):\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 251,
    "response": "```python\ndef Sum_of_Inverse_Divisors(n, n2):\r\n    sum=0\r\n    for i in range(1,n+1):\r\n        if n%i==0:\r\n            sum+=1/i\r\n    return sum\n```"
  },
  {
    "id": 252,
    "response": "```python\ndef remove_negs(lst):\r\n  result = []\r\n  for num in lst:\r\n    if num >= 0:\r\n      result.append(num)\r\n  return result\n```"
  },
  {
    "id": 253,
    "response": "```python\ndef sum_of_odd_Factors(n):\r\n    total = 1\r\n    i = 3\r\n    while i * i <= n:\r\n        if n % i == 0:\r\n            power = 0\r\n            while n % i == 0:\r\n                n = n / i\r\n                power += 1\r\n            total = total * (i ** power - 1) / (i - 1)\r\n        i += 2\r\n    if n > 1:\r\n        total = total * (n * n - 1) / (n - 1)\r\n    return int(total)\n```"
  },
  {
    "id": 254,
    "response": "```python\nimport heapq\r\ndef raw_heap(lst):\r\n  return heapq.heapify(lst)\n```"
  },
  {
    "id": 255,
    "response": "```python\ndef check_Even_Parity(n):\r\n  if n%2 == 0:\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 256,
    "response": "```python\ndef find_Min_Swaps(lst, n):\r\n    count = 0\r\n    for i in range(n):\r\n        if lst[i] == 0:\r\n            for j in range(i+1,n):\r\n                if lst[j] == 1:\r\n                    lst[i],lst[j] = lst[j],lst[i]\r\n                    count += 1\r\n                    break\r\n    return count\n```"
  },
  {
    "id": 257,
    "response": "```python\ndef listify_list(lst):\r\n    result = []\r\n    for item in lst:\r\n        result.append(list(item))\r\n    return result\n```"
  },
  {
    "id": 258,
    "response": "```python\ndef count_list(lst):\r\n  total=0\r\n  for i in lst:\r\n    if isinstance(i,list):\r\n      total+=len(i)**2\r\n    else:\r\n      total+=1\r\n  return total\n```"
  },
  {
    "id": 259,
    "response": "```python\ndef sub_lists(lst):\r\n  sublist = [[]]\r\n  for i in range(len(lst)+1):\r\n    for j in range(i):\r\n      sub_list = lst[j:i]\r\n      sub_lists = sublist.append(sub_list)\r\n  return sublist\n```"
  },
  {
    "id": 260,
    "response": "```python\ndef check_alphanumeric(s):\r\n  for i in range(len(s)-1,-1,-1):\r\n    if s[i].isalnum() == False:\r\n      return 'Discard'\r\n  return 'Accept'\n```"
  },
  {
    "id": 261,
    "response": "```python\ndef anagram_lambda(lst, s):\r\n  def sort_string(string):\r\n    return ''.join(sorted(string))\r\n  result = list(filter(lambda x: sort_string(x) == sort_string(s), lst))\r\n  return result\n```"
  },
  {
    "id": 262,
    "response": "```python\nfrom collections import Counter\r\ndef n_common_words(s, n):\r\n    words = s.split()\r\n    counter = Counter(words)\r\n    return counter.most_common(n)\n```"
  },
  {
    "id": 263,
    "response": "```python\ndef find_longest_conseq_subseq(lst, n):\r\n    s = set(lst)\r\n    res = 0\r\n    for i in range(0, n):\r\n        if lst[i] - 1 not in s:\r\n            curr = lst[i]\r\n            while curr in s:\r\n                curr += 1\r\n            res = max(res, curr - lst[i])\r\n    return res\n```"
  },
  {
    "id": 264,
    "response": "```python\ndef palindrome_lambda(lst):\r\n  return list(filter(lambda x: x.lower() == x[::-1].lower(), lst))\n```"
  },
  {
    "id": 265,
    "response": "```python\ndef ntimes_list(lst, n):\r\n  result = [x*n for x in lst]\r\n  return result\n```"
  },
  {
    "id": 266,
    "response": "```python\ndef check_monthnumb(month):\r\n  if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 267,
    "response": "```python\ndef min_Num(lst, n):\r\n    sum = 0\r\n    for i in range(len(lst)):\r\n        sum = sum + lst[i]\r\n    if sum % n == 0:\r\n        return 0\r\n    else:\r\n        return n - (sum % n)\n```"
  },
  {
    "id": 268,
    "response": "```python\ndef length_Of_Last_Word(s):\r\n  return len(s.strip().split(\" \")[-1])\n```"
  },
  {
    "id": 269,
    "response": "```python\ndef remove_list_range(lst, n, n2):\r\n  return [x for x in lst if not (n <= min(x) <= n2 or n <= max(x) <= n2)]\n```"
  },
  {
    "id": 270,
    "response": "```python\ndef sum_positivenum(lst):\r\n  return sum(filter(lambda x: x > 0, lst))\n```"
  },
  {
    "id": 271,
    "response": "```python\ndef are_Rotations(s, s2): \r\n    if len(s) != len(s2): \r\n        return False\r\n    temp = s + s \r\n    if temp.count(s2)>0: \r\n        return True\r\n    else: \r\n        return False\n```"
  },
  {
    "id": 272,
    "response": "```python\ndef check_subset(lst, lst2):\r\n    if len(lst) == 0:\r\n        return True\r\n    if len(lst) > len(lst2):\r\n        return False\r\n    for i in range(len(lst)):\r\n        if lst[i] not in lst2:\r\n            return False\r\n    return True\n```"
  },
  {
    "id": 273,
    "response": "```python\ndef fibonacci(n):\r\n    if n <= 1:\r\n        return n\r\n    else:\r\n        return fibonacci(n-1) + fibonacci(n-2)\n```"
  },
  {
    "id": 274,
    "response": "```python\ndef check_Concat(s, s2):\r\n    if s in s2:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 275,
    "response": "```python\ndef min_difference(lst):\r\n    min_diff = 0\r\n    for i in lst:\r\n        min_diff = min(min_diff, abs(i[0] - i[1]))\r\n    return min_diff\n```"
  },
  {
    "id": 276,
    "response": "```python\ndef lcm(n, n2): \r\n    if n > n2: \r\n        n1 = n \r\n        n2 = n2 \r\n        n = n1 \r\n    else: \r\n        n1 = n2 \r\n        n2 = n \r\n        n = n1 \r\n    for i in range(1, n2 + 1): \r\n        if (n * i) % n2 == 0: \r\n            lcm = n * i \r\n            break\r\n    return lcm\n```"
  },
  {
    "id": 277,
    "response": "```python\ndef sort_String(s):\r\n  return ''.join(sorted(s))\n```"
  },
  {
    "id": 278,
    "response": "```python\ndef check_tuples(tup, lst):\r\n    return (len(set(tup).intersection(set(lst)))) == len(lst)\n```"
  },
  {
    "id": 279,
    "response": "```python\nimport re\r\ndef text_match(text):\r\n  patterns = 'a.*b$'\r\n  if re.search(patterns,  text):\r\n    return 'Found a match!'\r\n  else:\r\n    return 'Not matched!'\n```"
  },
  {
    "id": 280,
    "response": "```python\ndef Check_Solution(n, n2, n3):\r\n    if (n2*n2)-(4*n*n3) == 0:\r\n        return \"1 solution\"\r\n    elif (n2*n2)-(4*n*n3) < 0:\r\n        return \"No solutions\"\r\n    elif (n2*n2)-(4*n*n3) > 0:\r\n        return \"2 solutions\"\n```"
  },
  {
    "id": 281,
    "response": "```python\ndef sum_even_odd(lst):\r\n  even_sum = 0\r\n  odd_sum = 0\r\n  for i in range(len(lst)):\r\n    if lst[i] % 2 == 0:\r\n      even_sum += lst[i]\r\n    else:\r\n      odd_sum += lst[i]\r\n  return even_sum + odd_sum\n```"
  },
  {
    "id": 282,
    "response": "```python\ndef parallelogram_perimeter(n, n2):\r\n    return (n+n2)*2\n```"
  },
  {
    "id": 283,
    "response": "```python\ndef div_of_nums(lst, m, n):\r\n    return list(filter(lambda x: (x % m == 0) and (x % n == 0), lst))\n```"
  },
  {
    "id": 284,
    "response": "```python\ndef all_Bits_Set_In_The_Given_Range(n, n2, n3):\r\n    if n2 <= n3:\r\n        return (n & (n2 ^ n3)) == 0\r\n    else:\r\n        return (n & (n3 ^ n2)) == 0\n```"
  },
  {
    "id": 285,
    "response": "```python\ndef is_Isomorphic(s1, s2):\r\n    if len(s1) != len(s2):\r\n        return False\r\n    map1 = {}\r\n    map2 = {}\r\n    for i in range(len(s1)):\r\n        ch1 = s1[i]\r\n        ch2 = s2[i]\r\n        if ch1 in map1 and map1[ch1] != ch2:\r\n            return False\r\n        if ch2 in map2 and map2[ch2] != ch1:\r\n            return False\r\n        map1[ch1] = ch2\r\n        map2[ch2] = ch1\r\n    return True\n```"
  },
  {
    "id": 286,
    "response": "```python\ndef sum_num(tup):\r\n  sum=0\r\n  for i in tup:\r\n    sum+=i\r\n  return sum/len(tup)\n```"
  },
  {
    "id": 287,
    "response": "```python\ndef is_odd(n):\r\n    if (n & 1):\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 288,
    "response": "```python\ndef substract_elements(tup, tup2):\r\n    return tuple(tuple(a-b for a,b in zip(tup[i],tup2[i])) for i in range(len(tup)))\n```"
  },
  {
    "id": 289,
    "response": "```python\ndef reverse_list_lists(lst):\r\n    return [list(reversed(i)) for i in lst]\n```"
  },
  {
    "id": 290,
    "response": "```python\ndef find_Extra(lst, lst2, n):\r\n  for i in range(n):\r\n    if lst[i] != lst2[i]:\r\n      return i\r\n  return n\n```"
  },
  {
    "id": 291,
    "response": "```python\ndef same_Length(n, n2):\r\n  if len(str(n)) == len(str(n2)):\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 292,
    "response": "```python\ndef remove_spaces(s):\r\n  return ' '.join(s.split())\n```"
  },
  {
    "id": 293,
    "response": "```python\ndef Extract(lst):\r\n  return [sublist[-1] for sublist in lst]\n```"
  },
  {
    "id": 294,
    "response": "```python\ndef float_to_tuple(s):\r\n    return tuple(float(x) for x in s.split(\",\"))\n```"
  },
  {
    "id": 295,
    "response": "```python\ndef max_sum_subseq(lst):\r\n    sum1 = 0\r\n    max_sum = 0\r\n    for i in lst:\r\n        sum1 = sum1 + i\r\n        if sum1 < 0:\r\n            sum1 = 0\r\n        max_sum = max(max_sum, sum1)\r\n    return max_sum\n```"
  },
  {
    "id": 296,
    "response": "```python\ndef sort_list_last(lst):\r\n  def last(n):\r\n    return n[-1]\r\n  return sorted(lst, key=last)\n```"
  },
  {
    "id": 297,
    "response": "```python\ndef is_Word_Present(s, s2):\r\n    if s2 in s:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 298,
    "response": "```python\ndef extract_elements(lst, n): \r\n  result = [] \r\n  for i in range(0, len(lst)): \r\n    if i % n == 0: \r\n      result.append(lst[i]) \r\n  return result\n```"
  },
  {
    "id": 299,
    "response": "```python\ndef check(lst, n):\r\n    if lst.count(lst[0]) == n:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 300,
    "response": "```python\ndef match_num(s):\r\n  for i in range(len(s)):\r\n    if s[i].isdigit():\r\n      if s[i] == '5':\r\n        return True\r\n      else:\r\n        return False\r\n  return False\n```"
  },
  {
    "id": 301,
    "response": "```python\ndef num_comm_div(n, n2):\r\n  if n > n2:\r\n    n, n2 = n2, n\r\n  gcd = 1\r\n  for i in range(1, n+1):\r\n    if n % i == 0 and n2 % i == 0:\r\n      gcd = i\r\n  return gcd\n```"
  },
  {
    "id": 302,
    "response": "```python\ndef find(n, n2):\r\n    return n % n2\n```"
  },
  {
    "id": 303,
    "response": "```python\ndef add_consecutive_nums(lst):\r\n    result = []\r\n    for i in range(len(lst)):\r\n        if i == 0:\r\n            result.append(lst[i])\r\n        else:\r\n            result.append(lst[i] + lst[i-1])\r\n    return result\n```"
  },
  {
    "id": 304,
    "response": "```python\ndef sum_Of_Series(n):\r\n    return (n * (n + 1) // 2) ** 2\n```"
  },
  {
    "id": 305,
    "response": "```python\ndef re_order(lst):\r\n    lst.sort(key=lambda x: x == 0)\r\n    return lst\n```"
  },
  {
    "id": 306,
    "response": "```python\ndef permutation_coefficient(n, k):\r\n    if k > n:\r\n        return 0\r\n    if k == 0 or k == n:\r\n        return 1\r\n    res = 1\r\n    for i in range(k):\r\n        res = res * (n - i) // (i + 1)\r\n    return res\n```"
  },
  {
    "id": 307,
    "response": "```python\ndef remove_words(lst, lst2):\r\n  for i in lst2:\r\n    if i in lst:\r\n      lst.remove(i)\r\n  return lst\n```"
  },
  {
    "id": 308,
    "response": "```python\ndef same_order(lst, lst2):\r\n  if len(lst) != len(lst2):\r\n    return False\r\n  for i in range(len(lst)):\r\n    if lst[i] != lst2[i]:\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 309,
    "response": "```python\ndef average_Odd(n):\r\n    sum=0\r\n    count=0\r\n    for i in range(1,n+1):\r\n        if i%2!=0:\r\n            sum=sum+i\r\n            count=count+1\r\n    return (sum//count)\n```"
  },
  {
    "id": 310,
    "response": "```python\ndef no_of_subsequences(lst, k):\r\n    count = 0\r\n    for i in range(2**len(lst)):\r\n        subsequence = []\r\n        for j in range(len(lst)):\r\n            if i & (1 << j):\r\n                subsequence.append(lst[j])\r\n        if len(subsequence) == 0:\r\n            count += 1\r\n        elif (len(subsequence) > 0 and sum(subsequence) < k):\r\n            count += 1\r\n    return count\n```"
  },
  {
    "id": 311,
    "response": "```python\ndef find_Min_Sum(n):\r\n  if (n==1):\r\n    return 0\r\n  if (n%2!=0):\r\n    return n\r\n  else:\r\n    return n//2+n//4\n```"
  },
  {
    "id": 312,
    "response": "```python\ndef count_element_freq(tup):\r\n    freq = {}\r\n    for element in tup:\r\n        if isinstance(element, tuple):\r\n            for sub_element in element:\r\n                if sub_element in freq:\r\n                    freq[sub_element] += 1\r\n                else:\r\n                    freq[sub_element] = 1\r\n        else:\r\n            if element in freq:\r\n                freq[element] += 1\r\n            else:\r\n                freq[element] = 1\r\n    return freq\n```"
  },
  {
    "id": 313,
    "response": "```python\ndef add_str(tup, s):\r\n    result = []\r\n    for x in tup:\r\n        result.append(x)\r\n        result.append(s)\r\n    return result\n```"
  },
  {
    "id": 314,
    "response": "```python\ndef sum_elements(tup):\r\n  return sum(tup)\n```"
  },
  {
    "id": 315,
    "response": "```python\ndef modular_sum(lst, n, n2):\r\n    sum1=0\r\n    sum2=0\r\n    for i in range(len(lst)):\r\n        if lst[i]%n==0:\r\n            sum1+=lst[i]\r\n        else:\r\n            sum2+=lst[i]\r\n    if sum1%n2==0:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 316,
    "response": "```python\r\ndef radix_sort(lst):\r\n    max1 = max(lst)\r\n    exp = 1\r\n    while max1 // exp > 0:\r\n        counting_sort(lst, exp)\r\n        exp *= 10\r\n    return lst\r\n\r\ndef counting_sort(lst, exp):\r\n    n = len(lst)\r\n    output = [0] * n\r\n    count = [0] * 10\r\n    for i in range(0, n):\r\n        index = lst[i] // exp\r\n        count[index % 10] += 1\r\n    for i in range(1, 10):\r\n        count[i] += count[i - 1]\r\n    i = n - 1\r\n    while i >= 0:\r\n        index = lst[i] // exp\r\n        output[count[index % 10] - 1] = lst[i]\r\n        count[index % 10] -= 1\r\n        i -= 1\r\n    for i in range(0, n):\r\n        lst[i] = output[i]\r\n```"
  },
  {
    "id": 317,
    "response": "```python\ndef largest_pos(lst):\r\n  max = 0\r\n  for x in lst:\r\n    if x > max and x > 0:\r\n      max = x\r\n  return max\n```"
  },
  {
    "id": 318,
    "response": "```python\ndef sqrt_root(n):\r\n  if n < 0:\r\n    return -1\r\n  if n == 0 or n == 1:\r\n    return n\r\n  left = 1\r\n  right = n\r\n  while left <= right:\r\n    mid = (left + right) // 2\r\n    if mid * mid == n:\r\n      return mid\r\n    elif mid * mid > n:\r\n      right = mid - 1\r\n    else:\r\n      left = mid + 1\r\n  return -1\n```"
  },
  {
    "id": 319,
    "response": "```python\nimport math\r\ndef volume_tetrahedron(n):\r\n  return (n**3)/(6*math.sqrt(2))\n```"
  },
  {
    "id": 320,
    "response": "```python\ndef gcd(a, b): \r\n    if a == 0 : \r\n        return b \r\n    return gcd(b % a, a) \r\n  \r\ndef lcm(a, b): \r\n    return (a * b) / gcd(a, b) \r\n  \r\ndef get_lcm(lst): \r\n    res = lst[0] \r\n    for i in range(1, len(lst)): \r\n        res = lcm(res, lst[i]) \r\n    return int(res)\n```"
  },
  {
    "id": 321,
    "response": "```python\ndef check_isosceles(n, n2, n3):\r\n  if n == n2 or n2 == n3 or n3 == n:\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 322,
    "response": "```python\ndef lbs(lst):\r\n    n = len(lst)\r\n    if n <= 1:\r\n        return n\r\n    def is_bst(arr):\r\n        i = 0\r\n        j = len(arr) - 1\r\n        while i < j:\r\n            if arr[i] > arr[j]:\r\n                return False\r\n            i += 1\r\n            j -= 1\r\n        return True\r\n    def is_bts(arr):\r\n        i = 0\r\n        j = len(arr) - 1\r\n        while i < j:\r\n            if arr[i] < arr[j]:\r\n                return False\r\n            i += 1\r\n            j -= 1\r\n        return True\r\n    def max_len(arr):\r\n        n = len(arr)\r\n        if n <= 1:\r\n            return n\r\n        max_len = 1\r\n        for i in range(n):\r\n            for j in range(i + 1, n):\r\n                if is_bst(arr[i:j+1]) or is_bts(arr[i:j+1]):\r\n                    max_len = max(max_len, j - i + 1)\r\n        return max_len\r\n    return max_len(lst)\n```"
  },
  {
    "id": 323,
    "response": "```python\ndef check_string(s):\r\n  x = lambda s: list(filter(lambda x: x in s, ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'])) if (not any(c.isupper() for c in s) or not any(c.isdigit() for c in s) or len(s) < 8) else ['Valid string.']\r\n  return x(s)\n```"
  },
  {
    "id": 324,
    "response": "```python\ndef max_sum_increasing_subsequence(lst, n):\r\n    dp = [0 for i in range(n)]\r\n    dp[0] = lst[0]\r\n    for i in range(1, n):\r\n        dp[i] = lst[i]\r\n        for j in range(i):\r\n            if lst[j] < lst[i]:\r\n                dp[i] = max(dp[i], dp[j] + lst[i])\r\n    return max(dp)\n```"
  },
  {
    "id": 325,
    "response": "```python\ndef parallel_lines(lst, lst2):\r\n  if (lst[0] * lst2[1]) == (lst[1] * lst2[0]):\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 326,
    "response": "```python\ndef capitalize_first_last_letters(s):\r\n    if len(s) == 1:\r\n        return s.upper()\r\n    else:\r\n        return s[0].upper() + s[1:-1] + s[-1].upper()\n```"
  },
  {
    "id": 327,
    "response": "```python\ndef get_pairs_count(lst, n, n2):\r\n  count = 0\r\n  for i in range(0, n):\r\n    for j in range(i + 1, n):\r\n      if (lst[i] + lst[j] == n2):\r\n        count += 1\r\n  return count\n```"
  },
  {
    "id": 328,
    "response": "```python\ndef min_length(lst):\r\n  min_len = len(lst[0])\r\n  min_list = lst[0]\r\n  for i in lst:\r\n    if len(i) < min_len:\r\n      min_len = len(i)\r\n      min_list = i\r\n  return (min_len, min_list)\n```"
  },
  {
    "id": 329,
    "response": "```python\ndef jacobsthal_lucas(n):\r\n  if n == 0:\r\n    return 0\r\n  elif n == 1:\r\n    return 2\r\n  else:\r\n    return (jacobsthal_lucas(n-1) + 2 * jacobsthal_lucas(n-2))\n```"
  },
  {
    "id": 330,
    "response": "```python\ndef negative_count(lst):\r\n    count=0\r\n    for i in lst:\r\n        if i<0:\r\n            count=count+1\r\n    return count/len(lst)\n```"
  },
  {
    "id": 331,
    "response": "```python\ndef min_coins(lst, n, n2):\r\n    if (n2 == 0):\r\n        return 0\r\n    if (n2 < 0):\r\n        return float('inf')\r\n    if (n == 0):\r\n        return float('inf')\r\n    return min(min_coins(lst, n - 1, n2 - lst[n - 1]) + 1, min_coins(lst, n - 1, n2))\n```"
  },
  {
    "id": 332,
    "response": "```python\ndef check_permutation(s, s2):\r\n    s = sorted(s)\r\n    s2 = sorted(s2)\r\n    if s == s2:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 333,
    "response": "```python\ndef remove_datatype(tup, param):\r\n  res = [x for x in tup if not isinstance(x, param)]\r\n  return res\n```"
  },
  {
    "id": 334,
    "response": "```python\ndef search_literal(s, s2):\r\n    start = 0\r\n    while True:\r\n        start = s.find(s2, start)\r\n        if start == -1:\r\n            break\r\n        yield start, start + len(s2)\r\n        start += 1\n```"
  },
  {
    "id": 335,
    "response": "```python\nimport math\r\ndef topbottom_surfacearea(n):\r\n  return (2*(math.pi)*(n**2))\n```"
  },
  {
    "id": 336,
    "response": "```python\ndef nth_items(lst, n):\r\n    result = []\r\n    for i in range(0, len(lst), n):\r\n        result.append(lst[i])\r\n    return result\n```"
  },
  {
    "id": 337,
    "response": "```python\ndef first_repeated_word(s):\r\n  words = s.split(\" \")\r\n  seen = set()\r\n  for word in words:\r\n    if word in seen:\r\n      return word\r\n    seen.add(word)\r\n  return None\n```"
  },
  {
    "id": 338,
    "response": "```python\ndef string_list_to_tuple(string_list):\r\n  return tuple(string_list)\n```"
  },
  {
    "id": 339,
    "response": "```python\ndef basesnum_coresspondingnum(lst, lst2):\r\n  result = [] \r\n  for i in range(len(lst)):\r\n    result.append(lst[i]**lst2[i])\r\n  return result\n```"
  },
  {
    "id": 340,
    "response": "```python\ndef find_Diff(lst, n): \r\n    d = {} \r\n    for i in lst: \r\n        if i in d: \r\n            d[i] += 1 \r\n        else: \r\n            d[i] = 1\r\n    max = 0\r\n    minn```"
  },
  {
    "id": 341,
    "response": "```python\ndef check_abundant(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        if (n % i == 0):\r\n            sum += i\r\n    if (sum > n):\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 342,
    "response": "```python\nimport re\r\ndef fill_spaces(s):\r\n    return re.sub(r'[ ,.]', ':', s)\n```"
  },
  {
    "id": 343,
    "response": "```python\ndef count_digits(n, n2):\r\n  return (len(str(n))+len(str(n2)))\n```"
  },
  {
    "id": 344,
    "response": "```python\ndef flatten_tuple(lst):\r\n  result = []\r\n  for i in lst:\r\n    for j in i:\r\n      result.append(j)\r\n  return ' '.join(result)\n```"
  },
  {
    "id": 345,
    "response": "```python\ndef toggle_F_and_L_bits(n):\r\n  return (n^(1<<0)|(1<<31))\n```"
  },
  {
    "id": 346,
    "response": "```python\ndef last_occurence_char(s, s2):\r\n  for i in range(len(s)):\r\n    if s[i] == s2:\r\n      return i\r\n  return None\n```"
  },
  {
    "id": 347,
    "response": "```python\ndef Total_Hamming_Distance(n):\r\n    if n == 0:\r\n        return 0\r\n    if n == 1:\r\n        return 0\r\n    if n == 2:\r\n        return 1\r\n    if n == 3:\r\n        return 2\r\n    if n == 4:\r\n        return 3\r\n    if n == 5:\r\n        return 4\r\n    if n == 6:\r\n        return 5\r\n    if n == 7:\r\n        return 6\r\n    if n == 8:\r\n        return 7\r\n    if n == 9:\r\n        return 8\r\n    if n == 10:\r\n        return 9\r\n    if n == 11:\r\n        return 10\r\n    if n == 12:\r\n        return 11\r\n    if n == 13:\r\n        return 12\r\n    if n == 14:\r\n        return 13\r\n    if n == 15:\r\n        return 14\r\n    if n == 16:\r\n        return 15\r\n    if n == 17:\r\n        return 16\r\n    if n == 18:\r\n        return 17\r\n    if n == 19:\r\n        return 18\r\n    if n == 20:\r\n        return 19\r\n    if n == 21:\r\n        return 20\r\n    if n == 22:\r\n        return 21\r\n    if n == 23:\r\n        return 22\r\n    if n == 24:\r\n        return 23\r\n    if n == 25:\r\n        return 24\r\n    if n == 26:\r\n        return 25\r\n    if n == 27:\r\n        return 26\r\n    if n == 28:\r\n        return 27\r\n    if n == 29:\r\n        return 28\r\n    if n == 30:\r\n        return 29\r\n    if n == 31:\r\n        return 30\r\n    if n == 32:\r\n        return 31\r\n    if n == 33:\r\n        return 32\r\n    if n == 34:\r\n        return 33\r\n    if n == 35:\r\n        return 34\r\n    if n == 36:\r\n        return 35\r\n    if n == 37:\r\n        return 36\r\n    if n == 38:\r\n        return 37\r\n    if n == 39:\r\n        return 38\r\n    if n == 40:\r\n        return 39\r\n    if n == 41:\r\n        return 40\r\n    if n == 42:\r\n        return 41\r\n    if n == 43:\r\n        return 42\r\n    if n == 44:\r\n        return 43\r\n    if n == 45:\r\n        return 44\r\n    if n == 46:\r\n        return 45\r\n    if n == 47:\r\n        return 46\r\n    if n == 48:\r\n        return 47\r\n    if n == 49:\r\n        return 48\r\n    if n == 50:\r\n        return 49\r\n    if n == 51:\r\n        return 50\r\n    if n == 52:\r\n        return 51\r\n    if n == 53:\r\n        return 52\r\n    if n == 54:\r\n        return 53\r\n    if n == 55:\r\n        return 54\r\n    if n == 56:\r\n        return 55\r\n    if n == 57:\r\n        return 56\r\n    if n == 58:\r\n        return 57\r\n    if n == 59:\r\n        return 58\r\n    if n == 60:\r\n        return 59\r\n    if n == 61:\r\n        return 60\r\n    if n == 62:\r\n        return 61\r\n    if n == 63:\r\n        return 62\r\n    if n == 64:\r\n        return 63\r\n    if n == 65:\r\n        return 64\r\n    if n == 66:\r\n        return 65\r\n    if n == 67:\r\n        return 66\r\n    if n == 68:\r\n        return 67\r\n    if n == 69:\r\n        return 68\r\n    if n == 70:\r\n        return 69\r\n    if n == 71:\r\n        return 70\r\n    if n == 72:\r\n        return 71\r\n    if n == 73:\r\n        return 72\n```"
  },
  {
    "id": 348,
    "response": "```python\ndef longest_increasing_subsequence(lst):\r\n    if not lst:\r\n        return 0\r\n    n = len(lst)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if lst[j] < lst[i]:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\n```"
  },
  {
    "id": 349,
    "response": "```python\ndef odd_Num_Sum(n):\r\n  result = 0\r\n  for i in range(1,n+1):\r\n    result = result + (2*i - 1)**5\r\n  return result\n```"
  },
  {
    "id": 350,
    "response": "```python\ndef find_Max(lst, n, n2):\r\n  if (lst[0] >= lst[n2]):\r\n    return lst[0]\r\n  else:\r\n    return lst[n2]\n```"
  },
  {
    "id": 351,
    "response": "```python\ndef extract_column(lst, n):\r\n  return [row[n] for row in lst]\n```"
  },
  {
    "id": 352,
    "response": "```python\ndef Seq_Linear(lst):\r\n    d = lst[1] - lst[0]\r\n    for i in range(1, len(lst)-1):\r\n        if lst[i+1] - lst[i] != d:\r\n            return \"Non Linear Sequence\"\r\n    return \"Linear Sequence\"\n```"
  },
  {
    "id": 353,
    "response": "```python\ndef tuple_to_float(tup):\r\n    return float(''.join(map(str, tup)))\n```"
  },
  {
    "id": 354,
    "response": "```python\ndef Split(lst):\r\n  l = len(lst)\r\n  if (l % 2 == 0):\r\n    return [lst[i] for i in range(0, l, 2)]\r\n  else:\r\n    return [lst[i] for i in range(1, l, 2)]\n```"
  },
  {
    "id": 355,
    "response": "```python\ndef difference(n):\r\n    sum1 = 0\r\n    sum2 = 0\r\n    for i in range(1, n+1):\r\n        sum1 = sum1 + (i * i * i)\r\n        sum2 = sum2 + i\r\n    return sum1 - (sum2 * sum2)\n```"
  },
  {
    "id": 356,
    "response": "```python\ndef find_Odd_Pair(lst, n): \r\n    res = 0\r\n    for i in range(0, n): \r\n        res = res ^ lst[i] \r\n    return res\n```"
  },
  {
    "id": 357,
    "response": "```python\ndef toggle_string(s):\r\n  return s.swapcase()\n```"
  },
  {
    "id": 358,
    "response": "```python\ndef digit_distance_nums(n, n2):\r\n  a = str(n)\r\n  b = str(n2)\r\n  if len(a) > len(b):\r\n    for i in range(len(a) - len(b)):\r\n      b = \"0\" + b\r\n  elif len(b) > len(a):\r\n    for i in range(len(b) - len(a)):\r\n      a = \"0\" + a\r\n  sum = 0\r\n  for i in range(len(a)):\r\n    sum = sum + int(a[i]) - int(b[i])\r\n  return sum\n```"
  },
  {
    "id": 359,
    "response": "```python\ndef max_sub_array_sum(lst, n):\r\n    max_sum = lst[0]\r\n    current_sum = 0\r\n    for i in range(n):\r\n        current_sum = max(lst[i], current_sum + lst[i])\r\n        max_sum = max(max_sum, current_sum)\r\n    return max_sum\n```"
  },
  {
    "id": 360,
    "response": "```python\ndef union_elements(tup1, tup2):\r\n  res = list(set(tup1) | set(tup2))\r\n  return tuple(res)\n```"
  },
  {
    "id": 361,
    "response": "```python\ndef assign_elements(lst):\r\n    d = {}\r\n    for i in lst:\r\n        if i[0] not in d:\r\n            d[i[0]] = []\r\n        if i[1] not in d:\r\n            d[i[1]] = []\r\n        d[i[0]].append(i[1])\r\n    return d\n```"
  },
  {
    "id": 362,
    "response": "```python\ndef Find_Max_Length(lst):\r\n  max_len = 0\r\n  for sub in lst:\r\n    if len(sub) > max_len:\r\n      max_len = len(sub)\r\n  return max_len\n```"
  },
  {
    "id": 363,
    "response": "```python\nimport re\r\ndef extract_values(s):\r\n  return re.findall(r'\\\"(.*?)\\\"',s)\n```"
  },
  {
    "id": 364,
    "response": "```python\ndef count_Pairs(lst, n):\r\n  count = 0\r\n  for i in range(0, len(lst)):\r\n    for j in range(i + 1, len(lst)):\r\n      if (lst[i] + lst[j]) == n:\r\n        count += 1\r\n  return count\n```"
  },
  {
    "id": 365,
    "response": "```python\ndef split(s):\r\n    return list(s)\n```"
  },
  {
    "id": 366,
    "response": "```python\ndef sum_digits(n):\r\n    sum=0\r\n    for digit in str(n):\r\n        sum=sum+int(digit)\r\n    return sum\n```"
  },
  {
    "id": 367,
    "response": "```python\ndef issort_list(lst):\r\n  for i in range(1, len(lst)):\r\n    if lst[i] < lst[i-1]:\r\n      return False\r\n  return True\n```"
  },
  {
    "id": 368,
    "response": "```python\ndef empty_list(n):\r\n    return [{}, {}, {}, {}, {}, {}, {}]\n```"
  },
  {
    "id": 369,
    "response": "```python\ndef sort_sublists(lst):\r\n  for i in range(len(lst)):\r\n    lst[i].sort()\r\n  return lst\n```"
  },
  {
    "id": 370,
    "response": "```python\ndef remove_words(lst, lst2):\r\n  for i in lst2:\r\n    for j in lst:\r\n      if i in j:\r\n        lst.remove(j)\r\n  return lst\n```"
  },
  {
    "id": 371,
    "response": "```python\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\r\n    lst.sort()\r\n    result = 0\r\n    for i in range(0, n - 1):\r\n        if (lst[i + 1] - lst[i]) <= k:\r\n            result += lst[i + 1] + lst[i]\r\n    return result\n```"
  },
  {
    "id": 372,
    "response": "```python\ndef two_unique_nums(lst):\r\n  result = []\r\n  for i in range(len(lst)):\r\n    if lst[i] not in result:\r\n      result.append(lst[i])\r\n  return result\n```"
  },
  {
    "id": 373,
    "response": "```python\ndef unique_product(lst):\r\n  product = 1\r\n  for i in lst:\r\n    if lst.count(i) == 1:\r\n      product = product * i\r\n  return product\n```"
  },
  {
    "id": 374,
    "response": "```python\nimport math\r\ndef surfacearea_cylinder(n, n2):\r\n    return 2 * math.pi * n * (n + n2)\n```"
  },
  {
    "id": 375,
    "response": "```python\ndef count_no(n, n2, n3, n4):\r\n  n1 = 0\r\n  for i in range(1, n+1):\r\n    if (i % 3 == 0 or i % 4 == 0):\r\n      n1 = n1 + i\r\n  return n1\n```"
  },
  {
    "id": 376,
    "response": "```python\ndef is_Sub_Array(lst, lst2, n, n2):\r\n  for i in range(n - n2 + 1):\r\n    for j in range(n2):\r\n      if (lst[i + j] != lst2[j]):\r\n        break\r\n    else:\r\n      return True\r\n  return False\n```"
  },
  {
    "id": 377,
    "response": "```python\ndef last_Digit_Factorial(n):\r\n    if n <= 1:\r\n        return 1\r\n    if n >= 5:\r\n        return 0\r\n    else:\r\n        return 1 * 2 * 3 * 4 % 10\n```"
  },
  {
    "id": 378,
    "response": "```python\ndef interleave_lists(lst, lst2, lst3):\r\n  result = []\r\n  for i in range(len(lst)):\r\n    result.append(lst[i])\r\n    result.append(lst2[i])\r\n    result.append(lst3[i])\r\n  return result\n```"
  },
  {
    "id": 379,
    "response": "```python\ndef find_dissimilar(tup, tup2):\r\n    list1 = list(tup)\r\n    list2 = list(tup2)\r\n    list3 = list1 + list2\r\n    list3 = list(set(list3))\r\n    return tuple(list3)\n```"
  },
  {
    "id": 380,
    "response": "```python\ndef extract_even(tup):\r\n    res = ()\r\n    for i in tup:\r\n        if isinstance(i, tuple):\r\n            res = res + extract_even(i)\r\n        else:\r\n            if i % 2 == 0:\r\n                res = res + (i,)\r\n    return res\n```"
  },
  {
    "id": 381,
    "response": "```python\ndef surface_Area(n, n2): \r\n    return (n * n) + (n * n2)\n```"
  },
  {
    "id": 382,
    "response": "```python\ndef my_dict(dct):\r\n  if len(dct) == 0:\r\n    return True\r\n  else:\r\n    return False\n```"
  },
  {
    "id": 383,
    "response": "```python\ndef catalan_number(n):\r\n    if n <= 1:\r\n        return 1\r\n    result = 1\r\n    for i in range(n):\r\n        result = result * (2 * n - i) // (i + 1)\r\n    return result // n + 1\n```"
  },
  {
    "id": 384,
    "response": "```python\nimport re\r\ndef find_adverbs(s):\r\n  pattern = r'\\b([a-z]+)\\b'\r\n  result = re.findall(pattern, s)\r\n  return result[0]\n```"
  },
  {
    "id": 385,
    "response": "```python\ndef expensive_items(lst, n):\r\n    return sorted(lst, key = lambda x: x['price'], reverse = True)[:n]\n```"
  },
  {
    "id": 386,
    "response": "```python\ndef split_Arr(lst, n, n2):\r\n  a = lst[n:]\r\n  b = lst[:n]\r\n  return (a + b)\n```"
  },
  {
    "id": 387,
    "response": "```python\ndef list_tuple(lst):\r\n  return tuple(lst)\n```"
  },
  {
    "id": 388,
    "response": "```python\ndef big_diff(lst):\r\n  return max(lst) - min(lst)\n```"
  },
  {
    "id": 389,
    "response": "```python\ndef perfect_squares(n, n2):\r\n  res = []\r\n  for i in range(n, n2+1):\r\n    if i == int(i**0.5)**2:\r\n      res.append(i)\r\n  return res\n```"
  },
  {
    "id": 390,
    "response": "```python\nimport math\r\ndef polar_rect(r, t):\r\n    x = r * math.cos(t)\r\n    y = r * math.sin(t)\r\n    return (math.hypot(x, y), math.atan2(y, x)), complex(x, y)\n```"
  },
  {
    "id": 391,
    "response": "```python\ndef swap_List(lst):\r\n    lst[0], lst[-1] = lst[-1], lst[0]\r\n    return lst\n```"
  },
  {
    "id": 392,
    "response": "```python\ndef sum_Of_product(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return sum_Of_product(n-1) + (2**(n-1))\n```"
  },
  {
    "id": 393,
    "response": "```python\ndef removezero_ip(s):\r\n    s = s.split(\".\")\r\n    s = [i for i in s if i != '0']\r\n    s = '.'.join(s)\r\n    return s\n```"
  },
  {
    "id": 394,
    "response": "```python\ndef diff_even_odd(lst):\r\n    even_sum = 0\r\n    odd_sum = 0\r\n    for i in lst:\r\n        if i%2 == 0:\r\n            even_sum += i\r\n        else:\r\n            odd_sum += i\r\n    return even_sum - odd_sum\n```"
  },
  {
    "id": 395,
    "response": "```python\ndef min_Swaps(s1, s2):\r\n    if len(s1) != len(s2):\r\n        return \"Not Possible\"\r\n    count = 0\r\n    for i in range(len(s1)):\r\n        if s1[i] != s2[i]:\r\n            count += 1\r\n    if count == 0:\r\n        return 0\r\n    if count == 2:\r\n        return 1\r\n    return \"Not Possible\"\n```"
  },
  {
    "id": 396,
    "response": "```python\nimport sys\r\ndef tuple_size(tup):\r\n  return sys.getsizeof(tup)\n```"
  },
  {
    "id": 397,
    "response": "```python\ndef find_kth(lst, lst2, n, n2, n3):\r\n    i = 0\r\n    j = 0\r\n    k = n3\r\n    while i < n and j < n2 and k > 0:\r\n        if lst[i] < lst2[j]:\r\n            i += 1\r\n        else:\r\n            j += 1\r\n        k -= 1\r\n    if k > 0:\r\n        return lst2[j]\r\n    else:\r\n        return lst[i]\n```"
  },
  {
    "id": 398,
    "response": "```python\ndef armstrong_number(n):\r\n    s=str(n)\r\n    sum=0\r\n    for i in range(len(s)):\r\n        sum+=int(s[i])**len(s)\r\n    if sum==n:\r\n        return True\r\n    else:\r\n        return False\n```"
  },
  {
    "id": 399,
    "response": "```python\ndef sum_average(n):\r\n    sum=0\r\n    for i in range(1,n+1):\r\n        sum=sum+i\r\n    avg=sum/n\r\n    return (sum,avg)\n```"
  },
  {
    "id": 400,
    "response": "```python\ndef is_Even(n):\r\n    return (n & 1) == 0\n```"
  }
]