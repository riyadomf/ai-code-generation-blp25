[
  {
    "id": 1,
    "response": "```python\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\ndef max_chain_length(lst, n):\n    lst.sort(key=lambda x: x.x)\n    chain_length = 1\n    for i in range(1, n):\n        if lst[i].x >= lst[i-1].y:\n            chain_length += 1\n    return chain_length\n```"
  },
  {
    "id": 2,
    "response": "```python\ndef first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n```"
  },
  {
    "id": 3,
    "response": "```python\ndef get_ludic(n):\n    def get_ludic_numbers(n):\n        if n < 1:\n            return []\n        ludic = [i for i in range(1, n+1)]\n        i = 1\n        while i < len(ludic):\n            if i < len(ludic) and i+1 < len(ludic):\n                ludic.pop(i+1)\n            else:\n                i += 1\n        return ludic\n    return get_ludic_numbers(n)\n```"
  },
  {
    "id": 4,
    "response": "```python\ndef reverse_words(s):\n    return ' '.join(s.split(' ')[::-1])\n```"
  },
  {
    "id": 5,
    "response": "```python\ndef prime_num(n):\n    if (n <= 1):\n        return False\n    if (n == 2):\n        return True\n    if (n % 2 == 0):\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if (n % i == 0):\n            return False\n    return True\n```"
  },
  {
    "id": 6,
    "response": "```python\nimport math\ndef radian_degree(n):\n  return math.radians(n)\n```"
  },
  {
    "id": 7,
    "response": "```python\nimport re\ndef find_literals(s, s2):\n    pattern = s2\n    match = re.search(pattern, s)\n    if match:\n        start = match.start()\n        end = match.end()\n        return (pattern, start, end)\n```"
  },
  {
    "id": 8,
    "response": "```python\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"
  },
  {
    "id": 9,
    "response": "```python\ndef floor_Min(n, n2, n3):\n  return min(n, n2, n3)\n```"
  },
  {
    "id": 10,
    "response": "```python\ndef remove_kth_element(lst, k):\n  del lst[k]\n  return lst\n```"
  },
  {
    "id": 11,
    "response": "```python\ndef max_of_nth(lst, n):\n  max = lst[0][n]\n  for i in range(1, len(lst)):\n    if max < lst[i][n]:\n      max = lst[i][n]\n  return max\n```"
  },
  {
    "id": 12,
    "response": "```python\ndef merge(lst):\n    a = []\n    b = []\n    for i in range(len(lst)):\n        a.append(lst[i][0])\n        b.append(lst[i][1])\n    return [a, b]\n```"
  },
  {
    "id": 13,
    "response": "```python\ndef maximum_value(lst):\n  return [max(i[1]) for i in lst]\n```"
  },
  {
    "id": 14,
    "response": "```python\ndef cummulative_sum(lst):\n  result = 0\n  for i in lst:\n    result += sum(i)\n  return result\n```"
  },
  {
    "id": 15,
    "response": "```python\ndef average_tuple(tup):\n  return [sum(x)/len(x) for x in zip(*tup)]\n```"
  },
  {
    "id": 16,
    "response": "```python\ndef tuple_modulo(tup, tup2):\n  res = []\n  for i in range(len(tup)):\n    res.append(tup[i] % tup2[i])\n  return tuple(res)\n```"
  },
  {
    "id": 17,
    "response": "```python\nimport math\ndef min_Jumps(n, n2, n3):\n    if n3 == 0:\n        return 0\n    else:\n        return (n3 - n) / (n2 - n)\n```"
  },
  {
    "id": 18,
    "response": "```python\ndef div_list(lst, lst2):\n    return [float(i/j) for i,j in zip(lst, lst2)]\n```"
  },
  {
    "id": 19,
    "response": "```python\ndef move_num(s):\n    a = \"\"\n    for i in range(len(s)):\n        if s[i].isdigit():\n            a = a + s[i]\n    for i in range(len(s)):\n        if s[i].isalpha():\n            a = a + s[i]\n    return a\n```"
  },
  {
    "id": 20,
    "response": "```python\ndef largest_subset(lst, n):\n    lst.sort()\n    s = set()\n    for i in range(len(lst)):\n        if lst[i] % n == 0:\n            s.add(lst[i])\n    return len(s)\n```"
  },
  {
    "id": 21,
    "response": "```python\ndef increment_numerics(lst, n):\n    for i in range(len(lst)):\n        if lst[i].isdigit():\n            lst[i] = str(int(lst[i]) + n)\n    return lst\n```"
  },
  {
    "id": 22,
    "response": "```python\ndef get_median(lst, lst2, n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(0, n):\n        sum1 = sum1 + lst[i]\n        sum2 = sum2 + lst2[i]\n    median = (sum1 + sum2) / (2 * n)\n    return median\n```"
  },
  {
    "id": 23,
    "response": "```python\nfrom functools import reduce\ndef nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))\n```"
  },
  {
    "id": 24,
    "response": "```python\ndef is_upper(s):\n    return s.upper()\n```"
  },
  {
    "id": 25,
    "response": "```python\ndef swap_List(lst):\n  lst[0], lst[-1] = lst[-1], lst[0]\n  return lst\n```"
  },
  {
    "id": 26,
    "response": "```python\ndef triangle_area(n):\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return (n * n)\n```"
  },
  {
    "id": 27,
    "response": "```python\ndef find_First_Missing(lst, n, n2):\n  for i in range(0, n2):\n    if (i not in lst):\n      return i\n```"
  },
  {
    "id": 28,
    "response": "```python\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n```"
  },
  {
    "id": 29,
    "response": "```python\ndef Split(lst):\n    return [lst[i] for i in range(0, len(lst)) if i % 2 == 0]\n```"
  },
  {
    "id": 30,
    "response": "```python\ndef get_coordinates(tup):\n    x, y = tup\n    result = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i == x and j == y):\n                result.append([i, j])\n            elif (i == x or j == y):\n                result.append([i, j])\n    return result\n```"
  },
  {
    "id": 31,
    "response": "```python\nimport re\ndef replace_spaces(s):\n    return re.sub(r'\\s+', '_', s)\n```"
  },
  {
    "id": 32,
    "response": "```python\ndef move_zero(lst):\n    res = [x for x in lst if x != 0]\n    res.extend([0]*lst.count(0))\n    return res\n```"
  },
  {
    "id": 33,
    "response": "```python\ndef pair_OR_Sum(lst, n): \n  res = 0\n  for i in range(0, n): \n    for j in range(i + 1, n): \n      res = res + (lst[i] | lst[j]) \n  return res\n```"
  },
  {
    "id": 34,
    "response": "```python\ndef even_Power_Sum(n):\n  sum = 0\n  for i in range(2,n+1,2):\n    sum += i**4\n  return sum\n```"
  },
  {
    "id": 35,
    "response": "```python\nimport heapq\ndef heap_sort(lst):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n```"
  },
  {
    "id": 36,
    "response": "```python\nimport numpy as np\ndef Check_Solution(n, n2, n3):\n    if n == n2 and n == n3:\n        return \"Yes\"\n    else:\n        return \"No\"\n```"
  },
  {
    "id": 37,
    "response": "```python\ndef noprofit_noloss(n, n2):\n  if n == n2:\n    return True\n  else:\n    return False\n```"
  },
  {
    "id": 38,
    "response": "```python\ndef wind_chill(n, n2):\n  return (35.74 + 0.6215 * n - 35.75 * (n2 ** 0.16) + 0.4275 * n * (n2 ** 0.16))\n```"
  },
  {
    "id": 39,
    "response": "```python\ndef sample_nam(lst):\n    return sum(len(i) for i in lst if not i[0].islower())\n```"
  },
  {
    "id": 40,
    "response": "```python\ndef remove_parenthesis(lst):\n  for i in range(len(lst)):\n    if lst[i] == '(' or lst[i] == ')':\n      lst.pop(i)\n  return lst\n```"
  },
  {
    "id": 41,
    "response": "```python\ndef is_nonagonal(n):\n    return (1 + (1 + 8 * n) ** 0.5) % 3 == 0\n```"
  },
  {
    "id": 42,
    "response": "```python\ndef remove_similar_row(lst):\n  res = set()\n  for row in lst:\n    if tuple(row) not in res:\n      res.add(tuple(row))\n  return res\n```"
  },
  {
    "id": 43,
    "response": "```python\nimport re\ndef text_match_wordz_middle(text):\n  patterns = 'z(?=.*z)'\n  if re.search(patterns,  text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'\n```"
  },
  {
    "id": 44,
    "response": "```python\ndef reverse_Array_Upto_K(lst, n):\n  lst[:n] = lst[:n][::-1]\n  return lst\n```"
  },
  {
    "id": 45,
    "response": "```python\ndef find_k_product(lst, k):\n    prod = 1\n    for i in range(len(lst)):\n        prod = prod * lst[i][k]\n    return prod\n```"
  },
  {
    "id": 46,
    "response": "```python\ndef No_of_cubes(n,k):\n  if k>n:\n    return 0\n  else:\n    return ((n-k+1)*(n-k+1)*(n-k+1))\n```"
  },
  {
    "id": 47,
    "response": "```python\ndef split_upperstring(s):\n    res = []\n    for i in range(len(s)):\n        if i == 0 or s[i].isupper() and s[i-1].islower():\n            res.append(s[i])\n    return res\n```"
  },
  {
    "id": 48,
    "response": "```python\ndef exchange_elements(lst):\n    n = len(lst)\n    for i in range(0, n, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n```"
  },
  {
    "id": 49,
    "response": "```python\ndef sum_Range_list(lst, n, n2):\n  sum1=0\n  for i in range(n,n2):\n    sum1=sum1+lst[i]\n  return sum1\n```"
  },
  {
    "id": 50,
    "response": "```python\ndef are_Equal(lst, lst2, n, n2):\n    if (n != n2):\n        return False\n    for i in range(0, n):\n        if (lst[i] != lst2[i]):\n            return False\n    return True\n```"
  },
  {
    "id": 51,
    "response": "```python\ndef check_subset(tup, tup2):\n  for i in tup:\n    if i not in tup2:\n      return False\n  return True\n```"
  },
  {
    "id": 52,
    "response": "```python\ndef matrix_to_list(lst):\n    return [list(x) for x in zip(*lst)]\n```"
  },
  {
    "id": 53,
    "response": "```python\nfrom collections import defaultdict\ndef grouping_dictionary(lst):\n    dict = defaultdict(list)\n    for key, value in lst:\n        dict[key].append(value)\n    return dict\n```"
  },
  {
    "id": 54,
    "response": "```python\ndef rectangle_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
  },
  {
    "id": 55,
    "response": "```python\ndef fifth_Power_Sum(n):\n  return sum([i**5 for i in range(1, n+1)])\n```"
  },
  {
    "id": 56,
    "response": "```python\ndef find_Min_Sum(lst, lst2, n):\n    sum1=0\n    sum2=0\n    for i in range(0,n):\n        sum1=sum1+lst[i]\n        sum2=sum2+lst2[i]\n    return (abs(sum1-sum2))\n```"
  },
  {
    "id": 57,
    "response": "```python\ndef first_Digit(n):\n    f=1\n    for i in range(1,n+1):\n        f=f*i\n    return int(str(f)[0])\n```"
  },
  {
    "id": 58,
    "response": "```python\ndef max_occurrences(lst):\n  return max(lst, key = lst.count)\n```"
  },
  {
    "id": 59,
    "response": "```python\ndef Repeat(lst):\n  result = []\n  for i in range(len(lst)):\n    for j in range(i+1, len(lst)):\n      if lst[i] == lst[j] and lst[i] not in result:\n        result.append(lst[i])\n  return result\n```"
  },
  {
    "id": 60,
    "response": "```python\ndef find_Points(n, n2, n3, n4):\n    return (min(n,n2),max(n3,n4))\n```"
  },
  {
    "id": 61,
    "response": "```python\ndef max_sum_of_three_consecutive(lst, n):\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    for i in range(0, n):\n        sum1 += lst[i]\n    for i in range(0, n - 1):\n        sum2 += lst[i]\n    for i in range(0, n - 2):\n        sum3 += lst[i]\n    return sum1 + sum2 + sum3\n```"
  },
  {
    "id": 62,
    "response": "```python\ndef sorted_dict(dct):\n  return {k: sorted(v) for k,v in dct.items()}\n```"
  },
  {
    "id": 63,
    "response": "```python\ndef find_max_val(n, n2, n3):\n    if n % n2 == n3:\n        return n\n    else:\n        return n - (n3 - (n % n2))\n```"
  },
  {
    "id": 64,
    "response": "```python\ndef average_Even(n):\n  if (n%2==0):\n    return (n/2)\n  else:\n    return (n/2+1)\n```"
  },
  {
    "id": 65,
    "response": "```python\ndef move_last(lst):\n  return lst[1:] + [lst[0]]\n```"
  },
  {
    "id": 66,
    "response": "```python\ndef count_char(s, s2):\n  return s.count(s2)\n```"
  },
  {
    "id": 67,
    "response": "```python\ndef Check_Vow(s, s2):\n    count = 0\n    for i in s:\n        if i in s2:\n            count = count + 1\n    return count\n```"
  },
  {
    "id": 68,
    "response": "```python\ndef replace(s, s2):\n    return s.replace(s2, \"\")\n```"
  },
  {
    "id": 69,
    "response": "```python\nimport re\ndef check_IP(ip):\n  if re.search(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", ip):\n    return 'Valid IP address'\n  else:\n    return 'Invalid IP address'\n```"
  },
  {
    "id": 70,
    "response": "```python\ndef decreasing_trend(lst):\n  for i in range(len(lst)-1):\n    if lst[i] < lst[i+1]:\n      return False\n  return True\n```"
  },
  {
    "id": 71,
    "response": "```python\ndef set_Right_most_Unset_Bit(n):\n    return n | (n + 1)\n```"
  },
  {
    "id": 72,
    "response": "```python\ndef max_of_three(n, n2, n3):\n  if n > n2 and n > n3:\n    return n\n  elif n2 > n and n2 > n3:\n    return n2\n  else:\n    return n3\n```"
  },
  {
    "id": 73,
    "response": "```python\ndef convert(lst):\n    s = ''.join(map(str, lst))\n    return int(s)\n```"
  },
  {
    "id": 74,
    "response": "```python\ndef remove_duplicate(s):\n    return list(dict.fromkeys(s.split()))\n```"
  },
  {
    "id": 75,
    "response": "```python\ndef sum_nums(n, n2, n3, n4):\n  sum = n + n2 + n3 + n4\n  if sum in range(20):\n    return 20\n  else:\n    return sum\n```"
  },
  {
    "id": 76,
    "response": "```python\nimport re\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n```"
  },
  {
    "id": 77,
    "response": "```python\ndef validity_triangle(n, n2, n3):\n    if (n+n2)>n3 and (n+n3)>n2 and (n2+n3)>n:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 78,
    "response": "```python\ndef remove_spaces(s):\n  return s.replace(' ','')\n```"
  },
  {
    "id": 79,
    "response": "```python\ndef access_key(dct, n):\n  return list(dct.keys())[n]\n```"
  },
  {
    "id": 80,
    "response": "```python\ndef increasing_trend(lst):\n  for i in range(1, len(lst)):\n    if lst[i] <= lst[i-1]:\n      return False\n  return True\n```"
  },
  {
    "id": 81,
    "response": "```python\ndef smallest_Divisor(n):\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            return i\n        i+=1\n    return n\n```"
  },
  {
    "id": 82,
    "response": "```python\nfrom itertools import product\ndef mul_list(lst, lst2):\n    return [a*b for a,b in product(lst, lst2)]\n```"
  },
  {
    "id": 83,
    "response": "```python\ndef sum_Square(n):\n    for i in range(n+1):\n        for j in range(n+1):\n            if i*i + j*j == n:\n                return True\n    return False\n```"
  },
  {
    "id": 84,
    "response": "```python\ndef count_Char(s, s2):\n    count=0\n    for i in s:\n        if i==s2:\n            count=count+1\n    return count\n```"
  },
  {
    "id": 85,
    "response": "```python\ndef sum_Of_Primes(n):\n    def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    return sum([i for i in range(2, n+1) if isPrime(i)])\n```"
  },
  {
    "id": 86,
    "response": "```python\ndef freq_element(tup):\n    freq_dict = dict()\n    for element in tup:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return str(freq_dict)\n```"
  },
  {
    "id": 87,
    "response": "```python\ndef recur_gcd(a, b): \n    if (a == 0): \n        return b \n    return recur_gcd(b % a, a) \n```"
  },
  {
    "id": 88,
    "response": "```python\nimport math\ndef len_complex(n, n2):\n  return math.sqrt(n**2 + n2**2)\n```"
  },
  {
    "id": 89,
    "response": "```python\ndef min_jumps(lst, n):\n    if (n <= 1):\n        return 0\n    jump = 1\n    reach = lst[0]\n    steps = lst[0]\n    for i in range(1, n):\n        if (i == n - 1):\n            return jump\n        if (steps == 0):\n            jump += 1\n            steps = reach - i + 1\n            if (reach <= i):\n                return -1\n        reach = max(reach, i + lst[i])\n```"
  },
  {
    "id": 90,
    "response": "```python\ndef mul_consecutive_nums(lst):\n  res = []\n  for i in range(0,len(lst)-1):\n    res.append(lst[i]*lst[i+1])\n  return res\n```"
  },
  {
    "id": 91,
    "response": "```python\ndef group_element(lst):\n    result = {}\n    for i in lst:\n        if i[1] in result:\n            result[i[1]].append(i[0])\n        else:\n            result[i[1]] = [i[0]]\n    return result\n```"
  },
  {
    "id": 92,
    "response": "```python\ndef last_Two_Digits(n):\n    if n == 0 or n == 1:\n        return 1\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res % 100\n```"
  },
  {
    "id": 93,
    "response": "```python\nimport re\ndef remove_multiple_spaces(s):\n  return re.sub(r'\\s+', ' ', s)\n```"
  },
  {
    "id": 94,
    "response": "```python\ndef extract_unique(dct):\n    a = set()\n    for i in dct.values():\n        for j in i:\n            a.add(j)\n    return sorted(list(a))\n```"
  },
  {
    "id": 95,
    "response": "```python\ndef check_greater(tup, tup2):\n    for i in range(len(tup)):\n        if tup2[i] > tup[i]:\n            return False\n    return True\n```"
  },
  {
    "id": 96,
    "response": "```python\ndef zip_list(lst, lst2):\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i] + lst2[i])\n    return result\n```"
  },
  {
    "id": 97,
    "response": "```python\ndef count_even(lst):\n  return len(list(filter(lambda x: (x % 2 == 0), lst)))\n```"
  },
  {
    "id": 98,
    "response": "```python\ndef sort_dict_item(dct):\n    return dict(sorted(dct.items(), key=lambda x: x[0]))\n```"
  },
  {
    "id": 99,
    "response": "```python\ndef min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    if count == 0:\n        return 0\n    if count % 2 != 0:\n        return \"Not Possible\"\n    return int(count / 2)\n```"
  },
  {
    "id": 100,
    "response": "```python\ndef count_range_in_list(lst, n, n2):\n  count = 0\n  for i in range(len(lst)):\n    if lst[i] >= n and lst[i] <= n2:\n      count = count + 1\n  return count\n```"
  },
  {
    "id": 101,
    "response": "```python\ndef equilibrium_index(lst):\n    sum_left = 0\n    sum_right = sum(lst)\n    for i in range(len(lst)):\n        sum_right -= lst[i]\n        if sum_left == sum_right:\n            return i\n        sum_left += lst[i]\n    return -1\n```"
  },
  {
    "id": 102,
    "response": "```python\ndef removals(lst, n, n2):\n    a = 0\n    for i in lst:\n        if i == n or i == n2:\n            a += 1\n    return a\n```"
  },
  {
    "id": 103,
    "response": "```python\ndef is_key_present(dct, n):\n  if n in dct:\n    return True\n  else:\n    return False\n```"
  },
  {
    "id": 104,
    "response": "```python\ndef harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)\n```"
  },
  {
    "id": 105,
    "response": "```python\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))\n```"
  },
  {
    "id": 106,
    "response": "```python\ndef is_subset(lst, n, lst2, n2):\n    for i in range(n2):\n        if lst2[i] not in lst:\n            return False\n    return True\n```"
  },
  {
    "id": 107,
    "response": "```python\ndef count_Set_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += count_set_bits(i)\n    return count\n\ndef count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```"
  },
  {
    "id": 108,
    "response": "```python\ndef Convert(s):\n  return s.split(\" \")\n```"
  },
  {
    "id": 109,
    "response": "```python\ndef get_unique(lst):\n  d = {}\n  for i in lst:\n    for j in i:\n      if j in d:\n        d[j] += 1\n      else:\n        d[j] = 1\n  return str(d)\n```"
  },
  {
    "id": 110,
    "response": "```python\ndef front_and_rear(tup):\n  return (tup[0], tup[-1])\n```"
  },
  {
    "id": 111,
    "response": "```python\ndef product_Equal(n):\n  prod1 = 1\n  prod2 = 1\n  for i in range(len(str(n))):\n    if i < len(str(n)) / 2:\n      prod1 *= int(str(n)[i])\n    else:\n      prod2 *= int(str(n)[i])\n  if prod1 == prod2:\n    return True\n  else:\n    return False\n```"
  },
  {
    "id": 112,
    "response": "```python\ndef remove_duplicate(lst):\n    res = []\n    for x in lst:\n        if x not in res:\n            res.append(x)\n    return res\n```"
  },
  {
    "id": 113,
    "response": "```python\ndef check_valid(tup):\n  for i in tup:\n    if not isinstance(i, bool):\n      return False\n  return True\n```"
  },
  {
    "id": 114,
    "response": "```python\ndef count_Fac(n):\n    if n == 1:\n        return 0\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        count += 1\n    return count\n```"
  },
  {
    "id": 115,
    "response": "```python\ndef str_to_tuple(s):\n    a = s.replace(\"[\", \"\").replace(\"]\", \"\").replace(\" \", \"\")\n    b = a.split(\",\")\n    c = tuple(map(int, b))\n    return c\n```"
  },
  {
    "id": 116,
    "response": "```python\ndef rombus_perimeter(n):\n    return 4 * n\n```"
  },
  {
    "id": 117,
    "response": "```python\nimport math\ndef sd_calc(lst):\n    x = sum(lst)/len(lst)\n    y = sum((i-x)**2 for i in lst)/len(lst)\n    return math.sqrt(y)\n```"
  },
  {
    "id": 118,
    "response": "```python\ndef alternate_elements(lst):\n    return lst[::2]\n```"
  },
  {
    "id": 119,
    "response": "```python\nimport re\ndef text_match(text):\n  pattern = 'ab*?'\n  if re.search(pattern,  text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'\n```"
  },
  {
    "id": 120,
    "response": "```python\ndef add_dict_to_tuple(tup, dct):\n  return tup + (dct,)\n```"
  },
  {
    "id": 121,
    "response": "```python\ndef maxAverageOfPath(lst, n):\n    sum = 0\n    for i in range(n):\n        for j in range(n):\n            sum = sum + lst[i][j]\n    return (sum / (n * n))\n```"
  },
  {
    "id": 122,
    "response": "```python\ndef filter_data(dct, n, n2):\n  return {k:v for k,v in dct.items() if n<=v[0]<=n2}\n```"
  },
  {
    "id": 123,
    "response": "```python\ndef count_same_pair(lst, lst2):\n    count = 0\n    for i in lst:\n        if i in lst2:\n            count += 1\n    return count\n```"
  },
  {
    "id": 124,
    "response": "```python\ndef power_base_sum(n, n2):\n    return sum(int(i) for i in str(n**n2))\n```"
  },
  {
    "id": 125,
    "response": "```python\nimport re\ndef extract_quotation(s):\n  return re.findall(r'\\\"(.*?)\\\"', s)\n```"
  },
  {
    "id": 126,
    "response": "```python\ndef multiply_elements(tup):\n  res = [tup[i]*tup[i+1] for i in range(len(tup)-1)]\n  return tuple(res)\n```"
  },
  {
    "id": 127,
    "response": "```python\nimport re\ndef remove_char(s):\n  return re.sub(r'[^a-zA-Z]', '', s)\n```"
  },
  {
    "id": 128,
    "response": "```python\ndef sum_list(lst, lst2):\n    return [a + b for a, b in zip(lst, lst2)]\n```"
  },
  {
    "id": 129,
    "response": "```python\ndef add_list(lst, lst2):\n  return [x+y for x,y in zip(lst, lst2)]\n```"
  },
  {
    "id": 130,
    "response": "```python\ndef consecutive_duplicates(lst):\n    res = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            res.append(lst[i])\n    return res\n```"
  },
  {
    "id": 131,
    "response": "```python\nimport math\ndef lateralsurface_cone(n, n2):\n    area = math.pi * n * math.sqrt((n2)**2 + (n)**2)\n    return (area)\n```"
  },
  {
    "id": 132,
    "response": "```python\nimport re\ndef replace_specialchar(s):\n    s = re.sub(r'[ ,.]', ':', s)\n    return s\n```"
  },
  {
    "id": 133,
    "response": "```python\ndef find_first_occurrence(lst, n):\n    left = 0\n    right = len(lst) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if lst[mid] == n:\n            result = mid\n            right = mid - 1\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```"
  },
  {
    "id": 134,
    "response": "```python\ndef sum_Of_Subarray_Prod(lst, n):\n  sum = 0\n  for i in range(0, n):\n    for j in range(i, n):\n      prod = 1\n      for k in range(i, j+1):\n        prod = prod * lst[k]\n      sum = sum + prod\n  return sum\n```"
  },
  {
    "id": 135,
    "response": "```python\ndef toggle_middle_bits(n):\n    a = n\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    o = 0\n    p = 0\n    q = 0\n    r = 0\n    s = 0\n    t = 0\n    u = 0\n    v = 0\n    w = 0\n    x = 0\n    y = 0\n    z = 0\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    o = 0\n    p = 0\n    q = 0\n    r = 0\n    s = 0\n    t = 0\n    u = 0\n    v = 0\n    w = 0\n    x = 0\n    y = 0\n    z = 0\n    return a\n```"
  },
  {
    "id": 136,
    "response": "```python\ndef left_insertion(lst, n):\n    if (lst[0] <= n <= lst[1]):\n        return 0\n    if (lst[1] <= n <= lst[2]):\n        return 1\n    if (lst[2] <= n <= lst[3]):\n        return 2\n    if (lst[3] <= n <= lst[4]):\n        return 3\n```"
  },
  {
    "id": 137,
    "response": "```python\nimport re\ndef check_str(s):\n  if re.match(\"^[aeiouAEIOU]\", s):\n    return \"Valid\"\n  else:\n    return \"Invalid\"\n```"
  },
  {
    "id": 138,
    "response": "```python\ndef geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 + (1/2)*(geometric_sum(n-1))\n```"
  },
  {
    "id": 139,
    "response": "```python\ndef find_Index(n):\n    if n == 1:\n        return 1\n    else:\n        return (n * (n + 1) / 2) + (n - 1)\n```"
  },
  {
    "id": 140,
    "response": "```python\ndef tuple_to_dict(tup):\n    dict1 = {}\n    for i in range(0, len(tup), 2):\n        dict1[tup[i]] = tup[i+1]\n    return dict1\n```"
  },
  {
    "id": 141,
    "response": "```python\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n```"
  },
  {
    "id": 142,
    "response": "```python\nimport math\ndef area_tetrahedron(n):\n    return (math.sqrt(3) * (n * n))\n```"
  },
  {
    "id": 143,
    "response": "```python\ndef rotate_right(lst, n, n2):\n  return lst[n:n2]+lst[0:n]\n```"
  },
  {
    "id": 144,
    "response": "```python\ndef check_none(tup):\n    if None in tup:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 145,
    "response": "```python\ndef divisible_by_digits(n, n2):\n    x = []\n    for i in range(n, n2+1):\n        s = str(i)\n        flag = 0\n        for j in s:\n            if int(j) == 0:\n                flag = 1\n                break\n            if i % int(j) != 0:\n                flag = 1\n                break\n        if flag == 0:\n            x.append(i)\n    return x\n```"
  },
  {
    "id": 146,
    "response": "```python\nimport math\ndef sector_area(n, n2):\n  if (n2 == 360):\n    return None\n  else:\n    return (math.pi * (n**2) * (n2/360))\n```"
  },
  {
    "id": 147,
    "response": "```python\ndef lcs_of_three(s, s2, s3, n, n2, n3):\n    lcs = [[0 for i in range(n3 + 1)] for j in range(n2 + 1)]\n    for i in range(1, n2 + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if (s[i - 1] == s2[j - 1] == s3[k - 1]):\n                    lcs[i][j] = lcs[i - 1][j - 1] + 1\n                else:\n                    lcs[i][j] = 0\n    return lcs[n2][n3]\n```"
  },
  {
    "id": 148,
    "response": "```python\ndef capital_words_spaces(s):\n  return ' '.join([x for x in s.split(' ') if x.isupper()])\n```"
  },
  {
    "id": 149,
    "response": "```python\ndef sort_numeric_strings(lst):\n    return sorted([int(i) for i in lst])\n```"
  },
  {
    "id": 150,
    "response": "```python\ndef add_tuple(lst, tup):\n  return lst + list(tup)\n```"
  },
  {
    "id": 151,
    "response": "```python\ndef check_min_heap(lst, n):\n    for i in range(0, n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and lst[i] > lst[left]:\n            return False\n        if right < n and lst[i] > lst[right]:\n            return False\n    return True\n```"
  },
  {
    "id": 152,
    "response": "```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + 2*jacobsthal_num(n-2))\n```"
  },
  {
    "id": 153,
    "response": "```python\ndef min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]\n```"
  },
  {
    "id": 154,
    "response": "```python\ndef extract_index_list(lst, lst2, lst3):\n  set1 = set(lst)\n  set2 = set(lst2)\n  set3 = set(lst3)\n  set4 = set1.intersection(set2, set3)\n  return list(set4)\n```"
  },
  {
    "id": 155,
    "response": "```python\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = sorted(list(set(lst)))\n    if len(lst) < 2:\n        return None\n    return lst[1]\n```"
  },
  {
    "id": 156,
    "response": "```python\ndef text_match_zero_one(s):\n    if '0' in s or '1' in s or 'b' in s:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
  },
  {
    "id": 157,
    "response": "```python\ndef count_reverse_pairs(lst):\n    count = 0\n    for i in lst:\n        if i == i[::-1]:\n            count += 1\n    return count\n```"
  },
  {
    "id": 158,
    "response": "```python\ndef unique_sublists(lst):\n    result = {}\n    for sublist in lst:\n        result[tuple(sublist)] = result.get(tuple(sublist), 0) + 1\n    return result\n```"
  },
  {
    "id": 159,
    "response": "```python\nimport re\ndef is_decimal(s):\n    return bool(re.search(r\"^[0-9]+(\\.[0-9]+)?$\", s))\n```"
  },
  {
    "id": 160,
    "response": "```python\ndef unique_Element(lst, n):\n  if len(lst) == 1:\n    return 'YES'\n  else:\n    for i in range(0, n):\n      for j in range(i+1, n):\n        if lst[i] == lst[j]:\n          return 'NO'\n    return 'YES'\n```"
  },
  {
    "id": 161,
    "response": "```python\nimport math\ndef arc_length(n, n2):\n  if (n2==0):\n    return 0\n  else:\n    return (n*n2)/180 * math.pi\n```"
  },
  {
    "id": 162,
    "response": "```python\ndef check_monthnumber_number(n):\n    if (n == 4 or n == 6 or n == 9 or n == 11):\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 163,
    "response": "```python\ndef find_Min_Diff(tup, n):\n    if n == 0:\n        return 0\n    tup.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        if tup[i] - tup[i - 1] < min_diff:\n            min_diff = tup[i] - tup[i - 1]\n    return min_diff\n```"
  },
  {
    "id": 164,
    "response": "```python\ndef number_ctr(s):\n    count=0\n    for i in s:\n        if i.isdigit():\n            count+=1\n    return count\n```"
  },
  {
    "id": 165,
    "response": "```python\ndef is_polite(n):\n    for i in range(1, n+1):\n        if (i * (i+1)) / 2 == n:\n            return i\n```"
  },
  {
    "id": 166,
    "response": "```python\ndef pair_wise(lst):\n  if len(lst) == 0:\n    return []\n  else:\n    return list(zip(lst, lst[1:]))\n```"
  },
  {
    "id": 167,
    "response": "```python\ndef get_Pairs_Count(lst, sum, sum2):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count\n```"
  },
  {
    "id": 168,
    "response": "```python\ndef check_Odd_Parity(n):\n  count = 0\n  while (n != 0):\n    count = count + n & 1\n    n = n >> 1\n  if (count % 2 == 0):\n    return False\n  else:\n    return True\n```"
  },
  {
    "id": 169,
    "response": "```python\ndef Diff(lst, lst2):\n    return list(set(lst) - set(lst2))\n```"
  },
  {
    "id": 170,
    "response": "```python\ndef odd_Num_Sum(n):\n    return sum((i**4) for i in range(1, n+1) if (i % 2 == 0))\n```"
  },
  {
    "id": 171,
    "response": "```python\ndef check_expression(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(')')\n        elif c == '{':\n            stack.append('}')\n        elif c == '[':\n            stack.append(']')\n        elif c == ')' or c == '}' or c == ']':\n            if not stack or stack.pop() != c:\n                return False\n    return len(stack) == 0\n```"
  },
  {
    "id": 172,
    "response": "```python\ndef remove_length(s, k):\n    l = s.split(' ')\n    l1 = []\n    for i in l:\n        if len(i) > k:\n            l1.append(i)\n    return ' '.join(l1)\n```"
  },
  {
    "id": 173,
    "response": "```python\ndef occurance_substring(s, s2):\n    if s2 in s:\n        return s2, s.find(s2), s.find(s2)+len(s2)\n    else:\n        return s2, 0, 0\n```"
  },
  {
    "id": 174,
    "response": "```python\nimport re\ndef check_email(s):\n    if re.search(\"^[a-z0-9]+[\\._]?[a-z0-9]+[@][a-z0-9]+[.][a-z]{2,}$\", s):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'\n```"
  },
  {
    "id": 175,
    "response": "```python\ndef odd_position(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n```"
  },
  {
    "id": 176,
    "response": "```python\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n```"
  },
  {
    "id": 177,
    "response": "```python\ndef find_Sum(lst, n):\n    d = dict()\n    res = 0\n    for i in range(0, n):\n        if lst[i] in d:\n            d[lst[i]] = d[lst[i]] + 1\n        else:\n            d[lst[i]] = 1\n    for i in range(0, n):\n        if d[lst[i]] == 1:\n            res = res + lst[i]\n    return res\n```"
  },
  {
    "id": 178,
    "response": "```python\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append([lst[i]])\n        else:\n            result[-1].append(lst[i])\n    return result\n```"
  },
  {
    "id": 179,
    "response": "```python\ndef unique_sublists(lst):\n  a = dict()\n  for i in lst:\n    if tuple(i) not in a:\n      a[tuple(i)] = 1\n    else:\n      a[tuple(i)] += 1\n  return a\n```"
  },
  {
    "id": 180,
    "response": "```python\ndef find_combinations(lst):\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            res.append((lst[i][0] + lst[j][0], lst[i][1] + lst[j][1]))\n    return res\n```"
  },
  {
    "id": 181,
    "response": "```python\ndef count_Divisors(n): \n    count = 0\n    i = 1\n    while i <= n : \n        if (n % i == 0) : \n            count += 1\n        i += 1\n    if (count % 2) == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" \n```"
  },
  {
    "id": 182,
    "response": "```python\ndef Odd_Length_Sum(lst):\n    sum=0\n    for i in range(0,len(lst)):\n        sum=sum+lst[i]\n    return sum\n```"
  },
  {
    "id": 183,
    "response": "```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v\n```"
  },
  {
    "id": 184,
    "response": "```python\ndef mul_even_odd(lst):\n    even=0\n    odd=0\n    for i in lst:\n        if i%2==0:\n            even=i\n            break\n    for i in lst:\n        if i%2!=0:\n            odd=i\n            break\n    return even*odd\n```"
  },
  {
    "id": 185,
    "response": "```python\ndef tuple_str_int(s):\n    s = s.replace('(','')\n    s = s.replace(')','')\n    s = s.split(',')\n    s = [int(x) for x in s]\n    return tuple(s)\n```"
  },
  {
    "id": 186,
    "response": "```python\ndef right_insertion(lst, n):\n    return len(lst) if n > lst[-1] else next((i for i in range(len(lst)) if lst[i] >= n), len(lst))\n```"
  },
  {
    "id": 187,
    "response": "```python\ndef text_match_three(text):\n    import re\n    if re.search('abbb', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
  },
  {
    "id": 188,
    "response": "```python\ndef new_tuple(lst, s):\n  return tuple(lst + [s])\n```"
  },
  {
    "id": 189,
    "response": "```python\ndef perimeter_polygon(n, n2):\n    return n * n2\n```"
  },
  {
    "id": 190,
    "response": "```python\ndef even_position(lst):\n    for i in range(len(lst)):\n        if i%2 == 0:\n            if lst[i]%2 == 1:\n                return False\n    return True\n```"
  },
  {
    "id": 191,
    "response": "```python\ndef remove_nested(tup):\n    res = tuple()\n    for i in tup:\n        if isinstance(i, tuple):\n            res = res + remove_nested(i)\n        else:\n            res = res + (i,)\n    return res\n```"
  },
  {
    "id": 192,
    "response": "```python\ndef count_list(lst):\n    return len(lst)\n```"
  },
  {
    "id": 193,
    "response": "```python\ndef last(lst, n, n2):\n  x = lst[n:n2]\n  for i in range(len(x)):\n    if x[i] == n:\n      return i\n  return -1\n```"
  },
  {
    "id": 194,
    "response": "```python\nimport re\ndef text_starta_endb(text):\n  pat = 'a.*b$'\n  if re.search(pat,text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'\n```"
  },
  {
    "id": 195,
    "response": "```python\ndef cheap_items(lst, n):\n    return sorted(lst, key=lambda x: x['price'])[:n]\n```"
  },
  {
    "id": 196,
    "response": "```python\ndef return_sum(dct):\n    return sum(dct.values())\n```"
  },
  {
    "id": 197,
    "response": "```python\ndef sum_in_Range(l,r):\n  sum=0\n  for i in range(l,r+1):\n    if(i%2!=0):\n      sum=sum+i\n  return sum\n```"
  },
  {
    "id": 198,
    "response": "```python\ndef _sum(lst):\n  return sum(lst)\n```"
  },
  {
    "id": 199,
    "response": "```python\ndef left_Rotate(n, n2):\n    return (n << n2) % n\n```"
  },
  {
    "id": 200,
    "response": "```python\ndef remove_all_spaces(s):\n  return s.replace(\" \",\"\")\n```"
  },
  {
    "id": 201,
    "response": "```python\ndef test_three_equal(n, n2, n3):\n    if n == n2 and n2 == n3:\n        return 3\n    elif n == n2 or n2 == n3 or n == n3:\n        return 2\n    else:\n        return 0\n```"
  },
  {
    "id": 202,
    "response": "```python\ndef count_Rotation(lst, n):\n    low = 0\n    high = n - 1\n    count = 0\n    while (low <= high):\n        mid = (low + high) // 2\n        if (lst[mid] > lst[mid + 1]):\n            count = count + 1\n            break\n        if (lst[mid] < lst[mid - 1]):\n            count = count + 1\n            break\n        if (lst[mid] < lst[low]):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return count\n```"
  },
  {
    "id": 203,
    "response": "```python\nimport math\ndef is_Perfect_Square(n):\n  if (n < 0):\n    return False\n  x = int(math.sqrt(n))\n  return (x * x == n)\n```"
  },
  {
    "id": 204,
    "response": "```python\ndef is_Product_Even(lst, n):\n    if (lst[0] * lst[1] * lst[2]) % 2 == 0:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 205,
    "response": "```python\ndef max_sum_list(lst):\n  max_sum = 0\n  max_list = []\n  for i in lst:\n    sum = 0\n    for j in i:\n      sum += j\n    if sum > max_sum:\n      max_sum = sum\n      max_list = i\n  return max_list\n```"
  },
  {
    "id": 206,
    "response": "```python\ndef max_run_uppercase(s):\n    c=0\n    max=0\n    for i in s:\n        if (i.isupper()):\n            c+=1\n        else:\n            if (c>max):\n                max=c\n            c=0\n    if (c>max):\n        max=c\n    return max\n```"
  },
  {
    "id": 207,
    "response": "```python\ndef first_odd(lst):\n    for i in lst:\n        if i % 2 == 1:\n            return i\n```"
  },
  {
    "id": 208,
    "response": "```python\ndef check_K(tup, n): \n  if n in tup: \n    return True\n  else: \n    return False\n```"
  },
  {
    "id": 209,
    "response": "```python\ndef check_smaller(tup, tup2):\n    for i in range(len(tup)):\n        if tup2[i] < tup[i]:\n            return True\n    return False\n```"
  },
  {
    "id": 210,
    "response": "```python\ndef count_variable(n, n2, n3, n4):\n    result = []\n    for i in range(n):\n        result.append('p')\n    for i in range(n2):\n        result.append('q')\n    for i in range(n3):\n        result.append('r')\n    for i in range(n4):\n        result.append('s')\n    return result\n```"
  },
  {
    "id": 211,
    "response": "```python\ndef check_identical(lst, lst2):\n  if len(lst) != len(lst2):\n    return False\n  for i in range(len(lst)):\n    if lst[i] != lst2[i]:\n      return False\n  return True\n```"
  },
  {
    "id": 212,
    "response": "```python\nimport re\ndef road_rd(s):\n  s = re.sub('Road', 'Rd.', s)\n  return s\n```"
  },
  {
    "id": 213,
    "response": "```python\ndef string_length(s):\n  return len(s)\n```"
  },
  {
    "id": 214,
    "response": "```python\ndef rombus_area(n, n2):\n    return (n * n2)/2\n```"
  },
  {
    "id": 215,
    "response": "```python\ndef sort_by_dnf(lst, n):\n    zeros = 0\n    ones = 0\n    twos = 0\n    for i in range(0, n):\n        if lst[i] == 0:\n            zeros += 1\n        elif lst[i] == 1:\n            ones += 1\n        else:\n            twos += 1\n    for i in range(0, zeros):\n        lst[i] = 0\n    for i in range(zeros, zeros + ones):\n        lst[i] = 1\n    for i in range(zeros + ones, n):\n        lst[i] = 2\n```"
  },
  {
    "id": 216,
    "response": "```python\ndef clear_tuple(tup):\n    for i in tup:\n        if i == 0:\n            return ()\n        else:\n            continue\n```"
  },
  {
    "id": 217,
    "response": "```python\ndef div_of_nums(lst, m, n):\n    return list(filter(lambda x: (x % m == 0 or x % n == 0), lst))\n```"
  },
  {
    "id": 218,
    "response": "```python\ndef lower_ctr(s):\n  c=0\n  for i in s:\n    if i.islower():\n      c+=1\n  return c\n```"
  },
  {
    "id": 219,
    "response": "```python\ndef count_duplic(lst):\n  lst1=[]\n  lst2=[]\n  for i in range(0,len(lst)):\n    c=0\n    for j in range(0,len(lst)):\n      if(lst[i]==lst[j]):\n        c=c+1\n    if(c>1):\n      lst1.append(lst[i])\n      lst2.append(c)\n  return (lst1,lst2)\n```"
  },
  {
    "id": 220,
    "response": "```python\ndef check_monthnum_number(n):\n  if n==2:\n    return True\n  else:\n    return False\n```"
  },
  {
    "id": 221,
    "response": "```python\ndef merge_dictionaries(dct, dct2):\n  result = dct.copy()\n  for key, value in dct2.items():\n    if key not in result:\n      result[key] = value\n  return result\n```"
  },
  {
    "id": 222,
    "response": "```python\nimport re\ndef pass_validity(s):\n  if len(s)<8:\n    return False\n  if not re.search(\"[a-z]\",s):\n    return False\n  if not re.search(\"[A-Z]\",s):\n    return False\n  if not re.search(\"[0-9]\",s):\n    return False\n  if not re.search(\"[_@$]\",s):\n    return False\n  return True\n```"
  },
  {
    "id": 223,
    "response": "```python\nimport re\ndef check_substring(s, s2):\n  if re.match(s2, s):\n    return 'string starts with the given substring'\n  else:\n    return 'string doesnt start with the given substring'\n```"
  },
  {
    "id": 224,
    "response": "```python\ndef remove_even(lst):\n    return [x for x in lst if x % 2 != 0]\n```"
  },
  {
    "id": 225,
    "response": "```python\ndef access_elements(lst, lst2):\n  return [lst[i] for i in lst2]\n```"
  },
  {
    "id": 226,
    "response": "```python\nimport math\ndef check_Type_Of_Triangle(n,n2,n3):\n  if n+n2>n3 and n+n3>n2 and n2+n3>n:\n    if (n*n)+(n2*n2)==(n3*n3):\n      return \"Right-angled Triangle\"\n    elif (n*n)+(n2*n2)>(n3*n3):\n      return \"Acute-angled Triangle\"\n    elif (n*n)+(n2*n2)<(n3*n3):\n      return \"Obtuse-angled Triangle\"\n  else:\n    return \"Not a valid triangle\"\n```"
  },
  {
    "id": 227,
    "response": "```python\ndef sum_column(lst, n):\n  return sum(row[n] for row in lst)\n```"
  },
  {
    "id": 228,
    "response": "```python\ndef count_alpha_dig_spl(s):\n    count_alpha = 0\n    count_dig = 0\n    count_spl = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            count_alpha += 1\n        elif s[i].isdigit():\n            count_dig += 1\n        else:\n            count_spl += 1\n    return count_alpha, count_dig, count_spl\n```"
  },
  {
    "id": 229,
    "response": "```python\ndef second_frequent(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    freq_list = [k for k, v in freq.items() if v == max(freq.values())]\n    return freq_list[1]\n```"
  },
  {
    "id": 230,
    "response": "```python\ndef round_up(n, n2):\n  return (int(n * 10**n2) + 1) / 10**n2\n```"
  },
  {
    "id": 231,
    "response": "```python\ndef count_Pairs(lst, n):\n  count = 0\n  for i in range(0, len(lst)):\n    for j in range(i+1, len(lst)):\n      if (lst[i] + lst[j] == n):\n        count += 1\n  return count\n```"
  },
  {
    "id": 232,
    "response": "```python\nimport re\ndef extract_max(s):\n    x=re.findall(r'\\d+',s)\n    return max(x)\n```"
  },
  {
    "id": 233,
    "response": "```python\ndef get_key(dct):\n  return list(dct.keys())\n```"
  },
  {
    "id": 234,
    "response": "```python\ndef generate_matrix(n):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    num = 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = num\n            num += 1\n    for i in range(n):\n```"
  },
  {
    "id": 235,
    "response": "```python\nimport math\ndef slope(n, n2, n3, n4):\n  m = (n4 - n3)/(n2 - n)\n  return m\n```"
  },
  {
    "id": 236,
    "response": "```python\ndef max_sub_array_sum(lst, n):\n    max_sum = lst[0]\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(lst[i], curr_sum + lst[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n```"
  },
  {
    "id": 237,
    "response": "```python\ndef cube_Sum(n):\n  return sum(i**3 for i in range(1,n+1))\n```"
  },
  {
    "id": 238,
    "response": "```python\ndef min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    if count == 0:\n        return 0\n    return (count+1)//2\n```"
  },
  {
    "id": 239,
    "response": "```python\ndef sort_tuple(lst):\n  lst.sort(key = lambda x: x[0])\n  return lst\n```"
  },
  {
    "id": 240,
    "response": "```python\ndef Check_Solution(n, n2, n3):\n    if (n+n2)==0:\n        if (n3==0):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if (n+n2)==n3:\n            return \"Yes\"\n        else:\n            return \"No\"\n```"
  },
  {
    "id": 241,
    "response": "```python\ndef get_inv_count(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (lst[i] > lst[j]):\n                count += 1\n    return count\n```"
  },
  {
    "id": 242,
    "response": "```python\ndef get_odd_occurence(lst, n):\n    d = {}\n    for i in lst:\n        d[i] = d.get(i, 0) + 1\n    for i in d:\n        if d[i]%2 != 0:\n            return i\n```"
  },
  {
    "id": 243,
    "response": "```python\ndef nth_super_ugly_number(n, primes):\n    # Initialize a list to store the ugly numbers\n    ugly = [1]\n    # Initialize a list to store the indices for each prime\n    index = [0] * len(primes)\n    # Generate the first n ugly numbers\n    for i in range(1, n):\n        # Find the next ugly number by taking the minimum of the next multiple of each prime\n        next_ugly = min(ugly[index[j]] * primes[j] for j in range(len(primes)))\n        # Add the next ugly number to the list\n        ugly.append(next_ugly)\n        # Update the index for each prime that contributed to the next ugly number\n        for j in range(len(primes)):\n            if ugly[index[j]] * primes[j] == next_ugly:\n                index[j] += 1\n    # Return the nth ugly number\n    return ugly[n-1]\n```"
  },
  {
    "id": 244,
    "response": "```python\ndef get_Number(n, n2):\n  return (n+n2)//2\n```"
  },
  {
    "id": 245,
    "response": "```python\ndef find_Digits(n):\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    count = 0\n    while (fact > 0):\n        count = count + 1\n        fact = fact // 10\n    return count\n```"
  },
  {
    "id": 246,
    "response": "```python\ndef find_platform(arrival, departure, n):\n    arr=sorted(arrival)\n    dep=sorted(departure)\n    plat=0\n    i=0\n    j=0\n    while i<n and j<n:\n        if arr[i]<=dep[j]:\n            plat+=1\n            i+=1\n        else:\n            plat-=1\n            j+=1\n    return plat\n```"
  },
  {
    "id": 247,
    "response": "```python\ndef lcopy(lst):\n    return lst.copy()\n```"
  },
  {
    "id": 248,
    "response": "```python\ndef area_trapezium(n, n2, n3):\n    area = (n + n2) * n3 / 2\n    return area\n```"
  },
  {
    "id": 249,
    "response": "```python\ndef Sum(n):\n    s=0\n    for i in range(1,n+1):\n        if n%i==0:\n            s=s+i\n    return s\n```"
  },
  {
    "id": 250,
    "response": "```python\ndef is_triangleexists(n, n2, n3):\n    if n+n2 > n3 and n+n3 > n2 and n2+n3 > n:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 251,
    "response": "```python\ndef Sum_of_Inverse_Divisors(n, n2):\n  sum=0\n  for i in range(1,n+1):\n    if(n%i==0):\n      sum=sum+(1/i)\n  return sum\n```"
  },
  {
    "id": 252,
    "response": "```python\ndef remove_negs(lst):\n  return [x for x in lst if x >= 0]\n```"
  },
  {
    "id": 253,
    "response": "```python\ndef sum_of_odd_Factors(n):\n    res=0\n    for i in range(1,n+1,2):\n        if(n%i==0):\n            res+=i\n    return res\n```"
  },
  {
    "id": 254,
    "response": "```python\ndef raw_heap(lst):\n    lst.sort()\n    return lst\n```"
  },
  {
    "id": 255,
    "response": "```python\ndef check_Even_Parity(n):\n    count = 0\n    while (n != 0):\n        count += n & 1\n        n >>= 1\n    if (count % 2 == 0):\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 256,
    "response": "```python\ndef find_Min_Swaps(lst, n):\n    count = 0\n    for i in range(n):\n        if (lst[i] == 0):\n            for j in range(i+1, n):\n                if (lst[j] == 1):\n                    lst[j] = 0\n                    lst[i] = 1\n                    count += 1\n                    break\n    return count\n```"
  },
  {
    "id": 257,
    "response": "```python\ndef listify_list(lst):\n  return [list(x) for x in lst]\n```"
  },
  {
    "id": 258,
    "response": "```python\ndef count_list(lst):\n    sum = 0\n    for i in range(len(lst)):\n        sum += len(lst[i])\n    return sum\n```"
  },
  {
    "id": 259,
    "response": "```python\ndef sub_lists(lst):\n  res = [[]]\n  for i in range(len(lst)+1):\n    for j in range(i):\n      res.append(lst[j:i])\n  return res\n```"
  },
  {
    "id": 260,
    "response": "```python\ndef check_alphanumeric(s):\n    for i in s:\n        if not i.isalnum():\n            return 'Discard'\n    return 'Accept'\n```"
  },
  {
    "id": 261,
    "response": "```python\ndef anagram_lambda(lst, s):\n    return list(filter(lambda x: sorted(x)==sorted(s),lst))\n```"
  },
  {
    "id": 262,
    "response": "```python\nimport re\nfrom collections import Counter\ndef n_common_words(s, n):\n    words = re.findall(r'\\w+', s.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)\n```"
  },
  {
    "id": 263,
    "response": "```python\ndef find_longest_conseq_subseq(lst, n):\n    s = set(lst)\n    res = 0\n    for i in lst:\n        if i - 1 not in s:\n            j = i + 1\n            while j in s:\n                j += 1\n            res = max(res, j - i)\n    return res\n```"
  },
  {
    "id": 264,
    "response": "```python\ndef palindrome_lambda(lst):\n    result = list(filter(lambda x: (x == x[::-1]), lst))\n    return result\n```"
  },
  {
    "id": 265,
    "response": "```python\ndef ntimes_list(lst, n):\n    return [x*n for x in lst]\n```"
  },
  {
    "id": 266,
    "response": "```python\ndef check_monthnumb(s):\n    if (s == \"January\" or s == \"March\" or s == \"May\" or s == \"July\" or s == \"August\" or s == \"October\" or s == \"December\"):\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 267,
    "response": "```python\ndef min_Num(lst, n):\n    total = sum(lst)\n    remainder = total % n\n    if remainder == 0:\n        return 0\n    else:\n        return n - remainder\n```"
  },
  {
    "id": 268,
    "response": "```python\ndef length_Of_Last_Word(s):\n    if s == \"\":\n        return 0\n    s = s.strip()\n    s = s.split(\" \")\n    return len(s[-1])\n```"
  },
  {
    "id": 269,
    "response": "```python\ndef remove_list_range(lst, n, n2):\n    return [sub for sub in lst if not (n <= min(sub) <= n2 or n <= max(sub) <= n2)]\n```"
  },
  {
    "id": 270,
    "response": "```python\ndef sum_positivenum(lst):\n  return sum(list(filter(lambda x: x>0, lst)))\n```"
  },
  {
    "id": 271,
    "response": "```python\ndef are_Rotations(s1, s2):\n  if len(s1) != len(s2):\n    return False\n  temp = s1 + s1\n  if s2 in temp:\n    return True\n  else:\n    return False\n```"
  },
  {
    "id": 272,
    "response": "```python\ndef check_subset(lst, lst2):\n    if len(lst) == 0:\n        return True\n    if len(lst2) == 0:\n        return False\n    for i in lst:\n        for j in lst2:\n            if i == j:\n                break\n        else:\n            return False\n    return True\n```"
  },
  {
    "id": 273,
    "response": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b\n```"
  },
  {
    "id": 274,
    "response": "```python\ndef check_Concat(s, s2):\n    if s in s2:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 275,
    "response": "```python\ndef min_difference(lst):\n    min_diff = float('inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            diff = abs(lst[i][0] - lst[j][0]) + abs(lst[i][1] - lst[j][1])\n            min_diff = min(min_diff, diff)\n    return min_diff\n```"
  },
  {
    "id": 276,
    "response": "```python\nimport math\ndef lcm(n, n2):\n    return (n * n2) // math.gcd(n, n2)\n```"
  },
  {
    "id": 277,
    "response": "```python\ndef sort_String(s):\n    return ''.join(sorted(s))\n```"
  },
  {
    "id": 278,
    "response": "```python\ndef check_tuples(tup, lst):\n    if len(set(lst)) == len(set(tup)):\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 279,
    "response": "```python\nimport re\ndef text_match(text):\n  pattern = 'ab*?b$'\n  if re.search(pattern,  text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'\n```"
  },
  {
    "id": 280,
    "response": "```python\nimport math\ndef Check_Solution(n, n2, n3):\n    d = (n2*n2) - (4*n*n3)\n    if d < 0:\n        return \"No solutions\"\n    elif d == 0:\n        return \"1 solution\"\n    else:\n        return \"2 solutions\"\n```"
  },
  {
    "id": 281,
    "response": "```python\ndef sum_even_odd(lst):\n  a=0\n  for i in range(len(lst)):\n    if lst[i]%2==0:\n      a+=lst[i]\n  b=0\n  for i in range(len(lst)):\n    if lst[i]%2!=0:\n      b+=lst[i]\n  return a+b\n```"
  },
  {
    "id": 282,
    "response": "```python\ndef parallelogram_perimeter(n, n2):\n  return (n+n2)*2\n```"
  },
  {
    "id": 283,
    "response": "```python\ndef div_of_nums(lst, m, n):\n  result = list(filter(lambda x: (x % m == 0) and (x % n == 0), lst))\n  return result\n```"
  },
  {
    "id": 284,
    "response": "```python\ndef all_Bits_Set_In_The_Given_Range(n, n2, n3):\n    for i in range(n2, n3+1):\n        if (n & (1 << i)) != (1 << i):\n            return False\n    return True\n```"
  },
  {
    "id": 285,
    "response": "```python\ndef is_Isomorphic(s, s2):\n    if len(s) != len(s2):\n        return False\n    s1 = {}\n    s2 = {}\n    for i in range(len(s)):\n        if s[i] in s1:\n            if s1[s[i]] != s2[i]:\n                return False\n        else:\n            s1[s[i]] = s2[i]\n        if s2[i] in s2:\n            if s2[s2[i]] != s[i]:\n                return False\n        else:\n            s2[s2[i]] = s[i]\n    return True\n```"
  },
  {
    "id": 286,
    "response": "```python\ndef sum_num(tup):\n  sum=0\n  for i in tup:\n    sum=sum+i\n  avg=sum/len(tup)\n  return avg\n```"
  },
  {
    "id": 287,
    "response": "```python\ndef is_odd(n):\n    return (n & 1) == 1\n```"
  },
  {
    "id": 288,
    "response": "```python\ndef substract_elements(tup, tup2):\n    res = []\n    for i in range(len(tup)):\n        res.append((tup[i][0] - tup2[i][0], tup[i][1] - tup2[i][1]))\n    return res\n```"
  },
  {
    "id": 289,
    "response": "```python\ndef reverse_list_lists(lst):\n  return [list(reversed(i)) for i in lst]\n```"
  },
  {
    "id": 290,
    "response": "```python\ndef find_Extra(lst, lst2, n):\n  i = 0\n  while i < n:\n    if lst[i] != lst2[i]:\n      return i\n    i += 1\n  return n\n```"
  },
  {
    "id": 291,
    "response": "```python\ndef same_Length(n, n2):\n    a=str(n)\n    b=str(n2)\n    if len(a)==len(b):\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 292,
    "response": "```python\nimport re\ndef remove_spaces(s):\n    s = re.sub(r'\\s+', ' ', s)\n    return s.strip()\n```"
  },
  {
    "id": 293,
    "response": "```python\ndef Extract(lst):\n    return [sublist[-1] for sublist in lst]\n```"
  },
  {
    "id": 294,
    "response": "```python\nimport ast\ndef float_to_tuple(s):\n  return ast.literal_eval(s)\n```"
  },
  {
    "id": 295,
    "response": "```python\ndef max_sum_subseq(lst):\n    max_sum = 0\n    max_sum = max(lst)\n    for i in range(0,len(lst)):\n        for j in range(i,len(lst)):\n            sum = 0\n            for k in range(i,j+1):\n                sum += lst[k]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n```"
  },
  {
    "id": 296,
    "response": "```python\ndef sort_list_last(lst):\n  return sorted(lst,key = lambda x: x[-1])\n```"
  },
  {
    "id": 297,
    "response": "```python\ndef is_Word_Present(s, s2):\n    if s2 in s:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 298,
    "response": "```python\ndef extract_elements(lst, n):\n  result = []\n  i = 0\n  while i < len(lst) and len(result) < n:\n    if lst[i] not in result:\n      result.append(lst[i])\n    i += 1\n  return result[:n]\n```"
  },
  {
    "id": 299,
    "response": "```python\ndef check(lst,n):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    for i in range(0,len(lst)):\n        if lst[i] == lst[i-1]:\n            return True\n    return False\n```"
  },
  {
    "id": 300,
    "response": "```python\ndef match_num(s):\n    return s[0].isdigit()\n```"
  },
  {
    "id": 301,
    "response": "```python\ndef num_comm_div(n, n2):\n    i=1\n    count=0\n    while(i<=n and i<=n2):\n        if(n%i==0 and n2%i==0):\n            count=count+1\n        i=i+1\n    return count\n```"
  },
  {
    "id": 302,
    "response": "```python\ndef find(n, n2):\n    return n%n2\n```"
  },
  {
    "id": 303,
    "response": "```python\ndef add_consecutive_nums(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        j = i\n        while j < len(lst) and lst[j] == lst[i]:\n            j += 1\n        if j > i:\n            result.append(lst[i] * (j - i))\n        i = j\n    return result\n```"
  },
  {
    "id": 304,
    "response": "```python\ndef sum_Of_Series(n):\n    return n * (n + 1) ** 2 // 4\n```"
  },
  {
    "id": 305,
    "response": "```python\ndef re_order(lst):\n  return [x for x in lst if x!=0]+[0]*lst.count(0)\n```"
  },
  {
    "id": 306,
    "response": "```python\ndef permutation_coefficient(n, k):\n    if (k > n):\n        return 0\n    if (k == 0):\n        return 1\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n```"
  },
  {
    "id": 307,
    "response": "```python\ndef remove_words(lst, lst2):\n  for i in lst2:\n    lst.remove(i)\n  return lst\n```"
  },
  {
    "id": 308,
    "response": "```python\ndef same_order(lst, lst2):\n  return all(a == b for a, b in zip(lst, lst2))\n```"
  },
  {
    "id": 309,
    "response": "```python\ndef average_Odd(n):\n    sum=0\n    count=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum=sum+i\n            count=count+1\n    avg=sum//count\n    return avg\n```"
  },
  {
    "id": 310,
    "response": "```python\ndef no_of_subsequences(lst, n):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] < n:\n            count += 1\n    return count\n```"
  },
  {
    "id": 311,
    "response": "```python\ndef find_Min_Sum(n):\n    if n==1:\n        return 1\n    if n%2!=0:\n        return n\n    else:\n        return find_Min_Sum(n//2)+find_Min_Sum(n//4)+find_Min_Sum(n//8)\n```"
  },
  {
    "id": 312,
    "response": "```python\ndef count_element_freq(tup):\n    freq = {}\n    for i in tup:\n        if isinstance(i, tuple):\n            for j in count_element_freq(i):\n                freq[j] = freq.get(j, 0) + 1\n        else:\n            freq[i] = freq.get(i, 0) + 1\n    return freq\n```"
  },
  {
    "id": 313,
    "response": "```python\ndef add_str(tup, s):\n    result = []\n    for x in tup:\n        result.append(x)\n        result.append(s)\n    return result\n```"
  },
  {
    "id": 314,
    "response": "```python\ndef sum_elements(tup):\n    return sum(tup)\n```"
  },
  {
    "id": 315,
    "response": "```python\ndef modular_sum(lst, m, n):\n    sum = 0\n    for i in lst:\n        sum += i\n    if sum % m == 0:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 316,
    "response": "```python\ndef radix_sort(lst):\n    if len(lst) == 0:\n        return lst\n    max_val = max(lst)\n    exp = 1\n    while max_val // exp > 0:\n        lst = counting_sort(lst, exp)\n        exp *= 10\n    return lst\ndef counting_sort(lst, exp):\n    n = len(lst)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(0, n):\n        index = lst[i] // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = lst[i] // exp\n        output[count[index % 10] - 1] = lst[i]\n        count[index % 10] -= 1\n        i -= 1\n    return output\n```"
  },
  {
    "id": 317,
    "response": "```python\ndef largest_pos(lst):\n  return max([x for x in lst if x > 0])\n```"
  },
  {
    "id": 318,
    "response": "```python\ndef sqrt_root(n):\n    return int(n**0.5)\n```"
  },
  {
    "id": 319,
    "response": "```python\nimport math\ndef volume_tetrahedron(n):\n    return (n**3)/(6*math.sqrt(2))\n```"
  },
  {
    "id": 320,
    "response": "```python\nimport math\ndef get_lcm(lst):\n    lcm = 1\n    for num in lst:\n        lcm = lcm * num // math.gcd(lcm, num)\n    return lcm\n```"
  },
  {
    "id": 321,
    "response": "```python\ndef check_isosceles(n, n2, n3):\n    if n==n2 or n==n3 or n2==n3:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 322,
    "response": "```python\ndef lbs(lst):\n    n = len(lst)\n    if (n <= 1):\n        return n\n    lis = [1 for i in range(n)]\n    lds = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if (lst[i] > lst[j] and lis[i] < lis[j] + 1):\n                lis[i] = lis[j] + 1\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if (lst[i] > lst[j] and lds[i] < lds[j] + 1):\n                lds[i] = lds[j] + 1\n    res = 0\n    for i in range(n):\n        res = max(res, lis[i] + lds[i] - 1)\n    return res\n```"
  },
  {
    "id": 323,
    "response": "```python\ndef check_string(s):\n    upper_case = any(c.isupper() for c in s)\n    lower_case = any(c.islower() for c in s)\n    number = any(c.isdigit() for c in s)\n    length = len(s)\n    if (upper_case == False):\n        return 'String must have 1 upper case character.'\n    elif (lower_case == False):\n        return 'String must have 1 lower case character.'\n    elif (number == False):\n        return 'String must have 1 number.'\n    elif (length < 8):\n        return 'String length should be atleast 8.'\n    else:\n        return 'Valid string.'\n```"
  },
  {
    "id": 324,
    "response": "```python\ndef max_sum_increasing_subsequence(lst, n):\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return lst[0]\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = lst[0]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(1, i):\n            if (lst[j - 1] < lst[i - 1] and dp[j - 1] + lst[i - 1] > dp[i]):\n                dp[i] = dp[j - 1] + lst[i - 1]\n    return dp[n]\n```"
  },
  {
    "id": 325,
    "response": "```python\nimport numpy as np\ndef parallel_lines(lst, lst2):\n    a1, b1, c1 = lst\n    a2, b2, c2 = lst2\n    if (a1*b2-a2*b1)==0:\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 326,
    "response": "```python\ndef capitalize_first_last_letters(s):\n    return s[0].upper() + s[1:-1] + s[-1].upper()\n```"
  },
  {
    "id": 327,
    "response": "```python\ndef get_pairs_count(lst, n, n2):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] + lst[j] == n + n2):\n                count += 1\n    return count\n```"
  },
  {
    "id": 328,
    "response": "```python\ndef min_length(lst):\n    min_len = min(len(x) for x in lst)\n    for x in lst:\n        if len(x) == min_len:\n            return min_len, x\n```"
  },
  {
    "id": 329,
    "response": "```python\ndef jacobsthal_lucas(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n    return jacobsthal_lucas(n - 1) + 2 * jacobsthal_lucas(n - 2)\n```"
  },
  {
    "id": 330,
    "response": "```python\ndef negative_count(lst):\n  count = 0\n  for x in lst:\n    if x < 0:\n      count += 1\n  return count / len(lst)\n```"
  },
  {
    "id": 331,
    "response": "```python\ndef min_coins(lst, n, n2):\n    dp = [float('inf')] * (n2 + 1)\n    dp[0] = 0\n    for i in range(1, n2 + 1):\n        for coin in lst:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[n2]\n```"
  },
  {
    "id": 332,
    "response": "```python\ndef check_permutation(s, s2):\n    if len(s) != len(s2):\n        return False\n    s1 = sorted(s)\n    s2 = sorted(s2)\n    if s1 == s2:\n        return True\n    return False\n```"
  },
  {
    "id": 333,
    "response": "```python\ndef remove_datatype(tup, param):\n    return [x for x in tup if not isinstance(x, param)]\n```"
  },
  {
    "id": 334,
    "response": "```python\ndef search_literal(s, s2):\n    return (s.find(s2), s.find(s2)+len(s2))\n```"
  },
  {
    "id": 335,
    "response": "```python\nimport math\ndef topbottom_surfacearea(n):\n    return 2*(math.pi)*(n**2)\n```"
  },
  {
    "id": 336,
    "response": "```python\ndef nth_items(lst, n):\n    return [lst[i] for i in range(0, len(lst), n)]\n```"
  },
  {
    "id": 337,
    "response": "```python\ndef first_repeated_word(s):\n    a=s.split(\" \")\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i]==a[j]:\n                return a[i]\n    return None\n```"
  },
  {
    "id": 338,
    "response": "```python\ndef string_list_to_tuple(tup):\n    return tuple([i for i in tup])\n```"
  },
  {
    "id": 339,
    "response": "```python\ndef basesnum_coresspondingnum(lst, lst2):\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(lst[i] ** lst2[i])\n    return lst1\n```"
  },
  {
    "id": 340,
    "response": "```python\ndef find_Diff(lst, n):\n    freq = {}\n    for i in range(n):\n        if lst[i] not in freq:\n            freq[lst[i]] = 1\n        else:\n            freq[lst[i]] += 1\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    return max_freq - min_freq\n```"
  },
  {
    "id": 341,
    "response": "```python\ndef check_abundant(n):\n  sum = 0\n  for i in range(1, n):\n    if n % i == 0:\n      sum = sum + i\n  if (sum > n):\n    return True\n  else:\n    return False\n```"
  },
  {
    "id": 342,
    "response": "```python\nimport re\ndef fill_spaces(s):\n  return re.sub(r'[\\s,.]', ':', s)\n```"
  },
  {
    "id": 343,
    "response": "```python\ndef count_digits(n, n2):\n  return (len(str(n)) + len(str(n2)))\n```"
  },
  {
    "id": 344,
    "response": "```python\ndef flatten_tuple(lst):\n  res = []\n  for item in lst:\n    if isinstance(item, tuple):\n      res.extend(flatten_tuple(item))\n    else:\n      res.append(item)\n  return ' '.join(res)\n```"
  },
  {
    "id": 345,
    "response": "```python\ndef toggle_F_and_L_bits(n):\n    return (n ^ 1) ^ (n ^ 2)\n```"
  },
  {
    "id": 346,
    "response": "```python\ndef last_occurence_char(s, s2):\n    try:\n        return s.rindex(s2)\n    except ValueError:\n        return None\n```"
  },
  {
    "id": 347,
    "response": "```python\ndef Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n+1):\n        for j in range(i+1,n+1):\n            total += hamming_distance(i,j)\n    return total\ndef hamming_distance(x,y):\n    xor = x^y\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n    return count\n```"
  },
  {
    "id": 348,
    "response": "```python\ndef longest_increasing_subsequence(lst):\n    n = len(lst)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[j] < lst[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```"
  },
  {
    "id": 349,
    "response": "```python\ndef odd_Num_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 1:\n            sum += (i**5)\n    return sum\n```"
  },
  {
    "id": 350,
    "response": "```python\ndef find_Max(lst, n, n2):\n  if (lst[n] >= lst[n2]):\n    return lst[n]\n  else:\n    return lst[n2]\n```"
  },
  {
    "id": 351,
    "response": "```python\ndef extract_column(lst, n):\n    return [row[n] for row in lst]\n```"
  },
  {
    "id": 352,
    "response": "```python\ndef Seq_Linear(lst):\n    if (lst[1]-lst[0]) == (lst[2]-lst[1]):\n        return \"Linear Sequence\"\n    else:\n        return \"Non Linear Sequence\"\n```"
  },
  {
    "id": 353,
    "response": "```python\ndef tuple_to_float(tup):\n  a = str(tup[0])\n  b = str(tup[1])\n  return float(a+b)\n```"
  },
  {
    "id": 354,
    "response": "```python\ndef Split(lst):\n  if lst[0] % 2 == 0:\n    return lst[1::2]\n  else:\n    return lst[::2]\n```"
  },
  {
    "id": 355,
    "response": "```python\ndef difference(n):\n    return (n * (n + 1) * (n + 1) * (n + 1)) - (n * (n + 1) * (n + 1)) / 4\n```"
  },
  {
    "id": 356,
    "response": "```python\ndef find_Odd_Pair(lst, n):\n    odd = 0\n    for i in range(0, n):\n        if (lst[i] % 2) != 0:\n            odd = odd ^ lst[i]\n    return odd\n```"
  },
  {
    "id": 357,
    "response": "```python\ndef toggle_string(s):\n    return s.swapcase()\n```"
  },
  {
    "id": 358,
    "response": "```python\ndef digit_distance_nums(n, n2): \n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n), str(n2)))\n```"
  },
  {
    "id": 359,
    "response": "```python\ndef max_sub_array_sum(lst, n):\n    max_sum = lst[0]\n    curr_sum = 0\n    for i in range(1, n):\n        curr_sum = max(lst[i], curr_sum + lst[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n```"
  },
  {
    "id": 360,
    "response": "```python\ndef union_elements(tup1, tup2):\n    return (tup1 + tup2)\n```"
  },
  {
    "id": 361,
    "response": "```python\ndef assign_elements(lst):\n    d = {}\n    for i in lst:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    for i in lst:\n        if i[1] in d:\n            d[i[1]].append(i[0])\n        else:\n            d[i[1]] = [i[0]]\n    return d\n```"
  },
  {
    "id": 362,
    "response": "```python\ndef Find_Max_Length(lst):\n  max_len = 0\n  for i in lst:\n    max_len = max(max_len, len(i))\n  return max_len\n```"
  },
  {
    "id": 363,
    "response": "```python\ndef extract_values(s):\n    import re\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, s)\n    return matches\n```"
  },
  {
    "id": 364,
    "response": "```python\ndef count_Pairs(lst, n):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] + lst[j]) == n:\n                count += 1\n    return count\n```"
  },
  {
    "id": 365,
    "response": "```python\ndef split(s):\n  return list(s)\n```"
  },
  {
    "id": 366,
    "response": "```python\ndef sum_digits(n):\n  sum=0\n  for digit in str(n):\n    sum=sum+int(digit)\n  return sum\n```"
  },
  {
    "id": 367,
    "response": "```python\ndef issort_list(lst):\n  for i in range(0,len(lst)-1):\n    if lst[i]>lst[i+1]:\n      return False\n  return True\n```"
  },
  {
    "id": 368,
    "response": "```python\ndef empty_list(n):\n    return [{} for i in range(n)]\n```"
  },
  {
    "id": 369,
    "response": "```python\ndef sort_sublists(lst):\n  return [sorted(i) for i in lst]\n```"
  },
  {
    "id": 370,
    "response": "```python\ndef remove_words(lst, lst2):\n    for i in lst2:\n        for j in lst:\n            if i in j:\n                lst.remove(j)\n    return lst\n```"
  },
  {
    "id": 371,
    "response": "```python\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\n    lst.sort()\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(lst[i] - lst[j]) < k:\n                sum += lst[i] + lst[j]\n    return sum\n```"
  },
  {
    "id": 372,
    "response": "```python\ndef two_unique_nums(lst):\n    return list(set(lst))\n```"
  },
  {
    "id": 373,
    "response": "```python\ndef unique_product(lst):\n  a = set(lst)\n  b = 1\n  for i in a:\n    b = b*i\n  return b\n```"
  },
  {
    "id": 374,
    "response": "```python\nimport math\ndef surfacearea_cylinder(r,h):\n    area=2*math.pi*r*(r+h)\n    return area\n```"
  },
  {
    "id": 375,
    "response": "```python\ndef count_no(n, n2, n3, n4):\n    if n2 == 0:\n        return 0\n    if n2 == 1:\n        return 1\n    if n2 == 2:\n        return 2\n    if n2 == 3:\n        return 3\n    if n2 == 4:\n        return 4\n    if n2 == 5:\n        return 5\n    if n2 == 6:\n        return 6\n    if n2 == 7:\n        return 7\n    if n2 == 8:\n        return 8\n    if n2 == 9:\n        return 9\n    if n2 == 10:\n        return 10\n    if n2 == 11:\n        return 11\n    if n2 == 12:\n        return 12\n    if n2 == 13:\n        return 13\n    if n2 == 14:\n        return 14\n    if n2 == 15:\n        return 15\n    if n2 == 16:\n        return 16\n    if n2 == 17:\n        return 17\n    if n2 == 18:\n        return 18\n    if n2 == 19:\n        return 19\n    if n2 == 20:\n        return 20\n```"
  },
  {
    "id": 376,
    "response": "```python\ndef is_Sub_Array(lst, lst2, n, n2):\n    if (n2 > n):\n        return False\n    for i in range(n-n2+1):\n        for j in range(n2):\n            if (lst[i+j] != lst2[j]):\n                break\n        else:\n            return True\n    return False\n```"
  },
  {
    "id": 377,
    "response": "```python\ndef last_Digit_Factorial(n):\n    if n <= 1:\n        return 1\n    if n >= 5 and n <= 9:\n        return 0\n    else:\n        return 1\n```"
  },
  {
    "id": 378,
    "response": "```python\ndef interleave_lists(lst, lst2, lst3):\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i])\n        result.append(lst2[i])\n        result.append(lst3[i])\n    return result\n```"
  },
  {
    "id": 379,
    "response": "```python\ndef find_dissimilar(tup1, tup2):\n    result = []\n    for x in tup1:\n        if x not in tup2:\n            result.append(x)\n    for x in tup2:\n        if x not in tup1:\n            result.append(x)\n    return tuple(sorted(result))\n```"
  },
  {
    "id": 380,
    "response": "```python\ndef extract_even(tup):\n    res = []\n    for i in tup:\n        if isinstance(i, tuple):\n            res.extend(extract_even(i))\n        else:\n            if i % 2 == 0:\n                res.append(i)\n    return tuple(res)\n```"
  },
  {
    "id": 381,
    "response": "```python\ndef surface_Area(n, n2):\n    return (n*n)+(n*n2)\n```"
  },
  {
    "id": 382,
    "response": "```python\ndef my_dict(dct):\n  if len(dct)==0:\n    return True\n  else:\n    return False\n```"
  },
  {
    "id": 383,
    "response": "```python\ndef catalan_number(n):\n    c = 0\n    for i in range(n+1):\n        c = c + (2 * (2 * i + 1) * (2 * i + 1) - 2 * (2 * i + 1) + 2) // (i + 1)\n    return c\n```"
  },
  {
    "id": 384,
    "response": "```python\nimport re\ndef find_adverbs(s):\n  matches = re.finditer(r'\\b([a-zA-Z]+)(\\s+)?(ly)\\b', s)\n  adverbs = []\n  for match in matches:\n    adverbs.append(f\"{match.start()}-{match.end()-1}: {match.group()}\")\n  return adverbs\n```"
  },
  {
    "id": 385,
    "response": "```python\ndef expensive_items(lst, n):\n    return sorted(lst, key = lambda x: x['price'], reverse = True)[0:n]\n```"
  },
  {
    "id": 386,
    "response": "```python\ndef split_Arr(lst, n, n2):\n  a = lst[n:] + lst[:n]\n  return a\n```"
  },
  {
    "id": 387,
    "response": "```python\ndef list_tuple(lst):\n    return tuple(lst)\n```"
  },
  {
    "id": 388,
    "response": "```python\ndef big_diff(lst):\n    return max(lst)-min(lst)\n```"
  },
  {
    "id": 389,
    "response": "```python\ndef perfect_squares(n, n2):\n  res = []\n  for i in range(n, n2+1):\n    x = int(i**0.5)\n    if x*x == i:\n      res.append(i)\n  return res\n```"
  },
  {
    "id": 390,
    "response": "```python\nimport math\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (math.sqrt(x**2 + y**2), math.atan2(y, x)), complex(x, y)\n```"
  },
  {
    "id": 391,
    "response": "```python\ndef swap_List(lst):\n  lst[0], lst[-1] = lst[-1], lst[0]\n  return lst\n```"
  },
  {
    "id": 392,
    "response": "```python\ndef sum_Of_product(n):\n    return (2**(n-1))\n```"
  },
  {
    "id": 393,
    "response": "```python\ndef removezero_ip(ip):\n    ip = ip.split(\".\")\n    ip = [str(int(i)) for i in ip]\n    ip = [i for i in ip if i != '0']\n    return \".\".join(ip)\n```"
  },
  {
    "id": 394,
    "response": "```python\ndef diff_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum = even_sum + i\n        else:\n            odd_sum = odd_sum + i\n    return (even_sum - odd_sum)\n```"
  },
  {
    "id": 395,
    "response": "```python\ndef min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    if count == 0:\n        return 0\n    if count % 2 == 0:\n        return count // 2\n    else:\n        return \"Not Possible\"\n```"
  },
  {
    "id": 396,
    "response": "```python\nimport sys\ndef tuple_size(tup):\n  return sys.getsizeof(tup)\n```"
  },
  {
    "id": 397,
    "response": "```python\ndef find_kth(lst, lst2, n, n2, n3):\n    i = 0\n    j = 0\n    k = 0\n    while i < n and j < n2 and k < n3:\n        if lst[i] < lst2[j]:\n            i += 1\n        elif lst[i] > lst2[j]:\n            j += 1\n        else:\n            k += 1\n            i += 1\n            j += 1\n    return lst[i]\n```"
  },
  {
    "id": 398,
    "response": "```python\ndef armstrong_number(n):\n    temp = n\n    sum1 = 0\n    while(n != 0):\n        digit = n % 10\n        sum1 = sum1 + (digit ** 3)\n        n = n // 10\n    if (temp == sum1):\n        return True\n    else:\n        return False\n```"
  },
  {
    "id": 399,
    "response": "```python\ndef sum_average(n):\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    avg=sum/n\n    return (sum,avg)\n```"
  },
  {
    "id": 400,
    "response": "```python\ndef is_Even(n):\n    if n & 1 == 1:\n        return False\n    else:\n        return True\n```"
  }
]